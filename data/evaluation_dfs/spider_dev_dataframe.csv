gold,db_name,db_schema,C3,Claude,DAIL,DIN,GPT4Turbo,Graphix,RASAT+PICARD,RESDSQL
SELECT count(*) FROM singer,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*) FROM singer;,SELECT COUNT(*) FROM singer;,SELECT count(*) FROM singer,SELECT COUNT(*) FROM singer,SELECT COUNT(Singer_ID) FROM singer;,select count(*) from singer,select count(*) from singer,select count(*) from singer
SELECT count(*) FROM singer,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*) FROM singer;,SELECT COUNT(*) FROM singer;,SELECT count(*) FROM singer,SELECT COUNT(*) FROM singer,SELECT COUNT(Singer_ID) FROM singer;,select count(*) from singer,select count(*) from singer,select count(*) from singer
"SELECT name ,  country ,  age FROM singer ORDER BY age DESC",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT name, country, age FROM singer ORDER BY age DESC;","SELECT Name, Country, Age FROM singer ORDER BY Age DESC;","SELECT Name, Country, Age FROM singer ORDER BY Age DESC","SELECT Name, Country, Age FROM singer ORDER BY Age DESC","SELECT Name, Country, Age FROM singer ORDER BY Age DESC","select name, country, age from singer order by age desc","select name, country, age from singer order by age desc","select singer.name , singer.country , singer.age from singer   order by singer.age desc"
"SELECT name ,  country ,  age FROM singer ORDER BY age DESC",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT singer.name, singer.country, singer.age FROM singer ORDER BY singer.age DESC;","SELECT Name, Country, Age FROM singer ORDER BY Age DESC;","SELECT Name, Country, Age FROM singer ORDER BY Age DESC","SELECT Name, Country, Age FROM singer ORDER BY Age DESC","SELECT Name, Country, Age FROM singer ORDER BY Age DESC","select name, country, age from singer order by age desc","select name, country, age from singer order by age desc","select singer.name , singer.country , singer.age from singer   order by singer.age desc"
"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';","SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'France';","SELECT avg(Age) , min(Age) , max(Age) FROM singer WHERE Country = 'France'","SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'","SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';","select avg(age), min(age), max(age) from singer where country = 'France'","select avg(age), min(age), max(age) from singer where country = ""France""","select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = ""France"""
"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';","SELECT AVG(Age) AS average_age, MIN(Age) AS minimum_age, MAX(Age) AS maximum_age FROM singer WHERE Country = 'France';","SELECT avg(Age) , min(Age) , max(Age) FROM singer WHERE Country = 'France'","SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'","SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';","select avg(age), min(age), max(age) from singer where country = ""France""","select avg(age), min(age), max(age) from singer where country = ""France""","select avg(singer.age) , min(singer.age) , max(singer.age) from singer where  singer.country = ""France"""
"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT singer.name, singer.song_release_year FROM singer WHERE age = ( SELECT MIN(age) FROM singer )","SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);","SELECT T1.Name, T1.Song_release_year FROM singer AS T1 ORDER BY T1.Age ASC LIMIT 1","SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)","SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1","select song_name, song_release_year from singer order by age asc limit 1","select song_name, song_release_year from singer order by age asc limit 1","select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = ( SELECT MIN(age) FROM singer )","SELECT Name, Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);","SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT min(Age) FROM singer)","SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)","SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1;","select song_name, song_release_year from singer order by age asc limit 1","select song_name, song_release_year from singer order by age asc limit 1","select singer.song_name , singer.song_release_year from singer   order by singer.age asc limit 1"
SELECT DISTINCT country FROM singer WHERE age  >  20,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT DISTINCT country FROM singer WHERE age > 20;,SELECT DISTINCT Country FROM singer WHERE Age > 20;,SELECT DISTINCT Country FROM singer WHERE Age > 20,SELECT DISTINCT Country FROM singer WHERE Age > 20,SELECT DISTINCT Country FROM singer WHERE Age > 20,select distinct country from singer where age > 20,select distinct country from singer where age > 20,select distinct singer.country from singer where  singer.age > 20
SELECT DISTINCT country FROM singer WHERE age  >  20,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT DISTINCT country FROM singer WHERE age > 20;,SELECT DISTINCT Country FROM singer WHERE Age > 20;,SELECT DISTINCT Country FROM singer WHERE Age > 20,SELECT DISTINCT Country FROM singer WHERE Age > 20,SELECT DISTINCT Country FROM singer WHERE Age > 20;,select distinct country from singer where age > 20,select distinct country from singer where age > 20,select distinct singer.country from singer where  singer.age > 20
"SELECT country ,  count(*) FROM singer GROUP BY country",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT country, COUNT(*) as number_of_singers FROM singer GROUP BY country;","SELECT Country, COUNT(*) AS num_singers FROM singer GROUP BY Country;","SELECT country , count(*) FROM singer GROUP BY country","SELECT Country, COUNT(Singer_ID) as NumberOfSingers FROM singer GROUP BY Country","SELECT COUNT(Singer_ID) AS NumberOfSingers, Country FROM singer GROUP BY Country","select country, count(*) from singer group by country","select country, count(*) from singer group by country","select singer.country , count(*) from singer  group by singer.country"
"SELECT country ,  count(*) FROM singer GROUP BY country",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT country, COUNT(*) FROM singer GROUP BY country;","SELECT Country, COUNT(*) AS num_singers FROM singer GROUP BY Country;","SELECT Country , COUNT(*) FROM singer GROUP BY Country","SELECT COUNT(Singer_ID) AS NumberOfSingers, Country FROM singer GROUP BY Country","SELECT COUNT(Singer_ID) AS NumberOfSingers, Country FROM singer GROUP BY Country","select country, count(*) from singer group by country","select country, count(*) from singer group by country","select singer.country , count(*) from singer  group by singer.country"
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);,SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);,SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer) ORDER BY Song_Name,SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer),SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);,select song_name from singer where age > (select avg(age) from singer),select song_name from singer where age > (select avg(age) from singer),select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )
SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer);,SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);,SELECT s.Song_Name FROM singer AS s WHERE s.Age > (SELECT avg(Age) FROM singer),SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer),SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);,select song_name from singer where age > (select avg(age) from singer),select song_name from singer where age > (select avg(age) from singer),select singer.song_name from singer where  singer.age > (select avg(singer.age) from singer  )
"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;","SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;","SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000","SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000","SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000","select location, name from stadium where capacity between 5000 and 10000","select location, name from stadium where capacity between 5000 and 10000","select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000"
"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT stadium.location, stadium.name FROM stadium WHERE stadium.capacity >= 5000 AND stadium.capacity <= 10000;","SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;","SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000","SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000","SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000","select location, name from stadium where capacity between 5000 and 10000","select location, name from stadium where capacity between 5000 and 10000","select stadium.location , stadium.name from stadium where  stadium.capacity between 5000 and 10000"
"select max(capacity), average from stadium",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT MAX(capacity), AVG(capacity) FROM stadium;","SELECT MAX(Capacity) AS max_capacity, AVG(Capacity) AS avg_capacity FROM stadium;","SELECT max(Capacity) , avg(Capacity) FROM stadium","SELECT MAX(Capacity), AVG(Capacity) FROM stadium","SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium","select max(capacity), avg(capacity) from stadium","select max(capacity), avg(capacity) from stadium","select max(stadium.capacity) , avg(stadium.capacity) from stadium"
"select avg(capacity) ,  max(capacity) from stadium",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT AVG(capacity), MAX(capacity) FROM stadium;","SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;","SELECT avg(Capacity) , max(Capacity) FROM stadium","SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium","SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;","select avg(capacity), max(capacity) from stadium","select avg(capacity), max(capacity) from stadium","select avg(stadium.capacity) , max(stadium.capacity) from stadium"
"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1;","SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);","SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1","SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1","SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1","select name, capacity from stadium order by average desc limit 1","select name, capacity from stadium order by average desc limit 1","select stadium.name , stadium.capacity from stadium  group by stadium.name  order by avg(stadium.average) desc limit 1"
"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.average = ( SELECT MAX(average) FROM stadium )","SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);","SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1","SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1","SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1","select name, capacity from stadium order by average desc limit 1","select name, capacity from stadium order by average desc limit 1","select stadium.name , stadium.capacity from stadium  group by stadium.name  order by avg(stadium.average) desc limit 1"
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015;,"SELECT COUNT(*)  FROM concert WHERE Year IN (2014, 2015);","SELECT count(*) FROM concert WHERE Year IN ('2014', '2015')",SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015,"SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);",select count(*) from concert where year = 2014 or year = 2015,select count(*) from concert where year = 2014 or year = 2015,select count(*) from concert where  concert.year = 2014 or concert.year = 2015
SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*) FROM concert WHERE year = 2014 OR year = 2015;,"SELECT COUNT(*)  FROM concert WHERE Year IN (2014, 2015);","SELECT count(*) FROM concert WHERE Year IN ('2014', '2015')","SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015)","SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);",select count(*) from concert where year = 2014 or year = 2015,select count(*) from concert where year = 2014 or year = 2015,select count(*) from concert where  concert.year = 2014 or concert.year = 2015
"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;","SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;","SELECT s.Name, count(c.concert_ID) FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name","SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name","SELECT stadium.Name, COUNT(concert.Stadium_ID) AS NumberOfConcerts FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name","select stadium.name, count(*) from stadium join concert on stadium.stadium_id = concert.stadium_id group by concert.stadium_id","select t1.name, count(*) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id group by t2.stadium_id","select stadium.name , count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID  group by concert.stadium_id"
"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT stadium.name, COUNT(concert.concert_id) as num_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id;","SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;","SELECT T1.Name , count(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name","SELECT T1.Stadium_ID, T1.Name, COUNT(T2.concert_ID)  FROM stadium AS T1  JOIN concert AS T2  ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T1.Stadium_ID, T1.Name","SELECT COUNT(concert.Stadium_ID) AS Concert_Count, stadium.Name FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID GROUP BY stadium.Name","select stadium.name, count(*) from stadium join concert on stadium.stadium_id = concert.stadium_id group by stadium.stadium_id","select t1.name, count(*) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id","select stadium.name , count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID  group by concert.stadium_id"
"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(concert.concert_id) DESC LIMIT 1;","SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= 2014 GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;","SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year >= '2014' GROUP BY T1.Stadium_ID ORDER BY count(*) DESC LIMIT 1","SELECT T2.Name, T2.Capacity FROM (SELECT T1.Stadium_ID, COUNT(T1.concert_ID) as num_concerts FROM concert AS T1 WHERE T1.Year >= 2014 GROUP BY T1.Stadium_ID ORDER BY num_concerts DESC LIMIT 1) AS T3 JOIN stadium AS T2 ON T3.Stadium_ID = T2.Stadium_ID","SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year >= 2014 GROUP BY stadium.Stadium_ID ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1","select stadium.name, stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year >= 2014 group by concert.stadium_id order by count(*) desc limit 1","select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year >= 2014 group by t2.stadium_id order by count(*) desc limit 1","select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year >= 2014  group by concert.stadium_id  order by count(*) desc limit 1"
"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.stadium_id IN ( SELECT concert.stadium_id FROM concert WHERE concert.year > 2013 GROUP BY concert.stadium_id HAVING COUNT(*) = ( SELECT COUNT(*) FROM concert WHERE concert.year > 2013 GROUP BY concert.stadium_id ORDER BY COUNT(*) DESC LIMIT 1 ) );","SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > 2013 GROUP BY s.Name, s.Capacity ORDER BY COUNT(*) DESC LIMIT 1;","SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > 2013 GROUP BY T1.Stadium_ID ORDER BY COUNT(*) DESC LIMIT 1","SELECT T2.Name, T2.Capacity FROM stadium AS T2 WHERE T2.Stadium_ID IN (SELECT T1.Stadium_ID FROM concert AS T1 WHERE T1.Year > 2013 GROUP BY T1.Stadium_ID HAVING count(*) = (SELECT MAX(concert_count) FROM (SELECT COUNT(*) as concert_count FROM concert WHERE Year > 2013 GROUP BY Stadium_ID) as subquery) LIMIT 1)","SELECT stadium.Name, stadium.Capacity FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year > 2013 GROUP BY stadium.Stadium_ID ORDER BY COUNT(concert.concert_ID) DESC LIMIT 1","select stadium.name, stadium.capacity from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year > 2013 group by concert.stadium_id order by count(*) desc limit 1","select t1.name, t1.capacity from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year > 2013 group by t2.stadium_id order by count(*) desc limit 1","select stadium.name , stadium.capacity from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year > 2013  group by stadium.stadium_id  order by count(*) desc limit 1"
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1,SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1,"SELECT YEAR, COUNT(concert_ID) AS NumberOfConcerts FROM concert GROUP BY YEAR ORDER BY NumberOfConcerts DESC LIMIT 1",select year from concert group by year order by count(*) desc limit 1,select year from concert group by year order by count(*) desc limit 1,select concert.year from concert  group by concert.year  order by count(*) desc limit 1
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT year from concert group by year order by count(*) desc limit 1;,SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1,SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(concert_ID) DESC LIMIT 1,"SELECT YEAR, COUNT(*) AS NumberOfConcerts FROM concert GROUP BY YEAR ORDER BY NumberOfConcerts DESC LIMIT 1",select year from concert group by year order by count(*) desc limit 1,select year from concert group by year order by count(*) desc limit 1,select concert.year from concert  group by concert.year  order by count(*) desc limit 1
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.stadium_id IS NULL;,SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_ID IS NULL,SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert),SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert),SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL,select name from stadium where stadium_id not in (select stadium_id from concert),select name from stadium where stadium_id not in (select stadium_id from concert),select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL;,SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL;,SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert),SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert),SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_ID IS NULL,select name from stadium where stadium_id not in (select stadium_id from concert),select name from stadium where stadium_id not in (select stadium_id from concert),select stadium.name from stadium where  stadium.stadium_id not in (select concert.Stadium_ID from concert  )
SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30;,SELECT DISTINCT s1.Country FROM singer s1 JOIN singer s2 ON s1.Country = s2.Country WHERE s1.Age > 40 AND s2.Age < 30,SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30,SELECT Country FROM singer WHERE Country IN (SELECT Country FROM singer WHERE Age > 40) INTERSECT SELECT Country FROM singer WHERE Country IN (SELECT Country FROM singer WHERE Age < 30),SELECT DISTINCT s1.Country FROM singer s1 JOIN singer s2 ON s1.Country = s2.Country WHERE s1.Age > 40 AND s2.Age < 30,select country from singer where age > 40 intersect select country from singer where age < 30,select country from singer where age > 40 intersect select country from singer where age < 30,select singer.country from singer where  singer.age > 40   intersect select singer.country from singer where  singer.age < 30
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT name FROM stadium WHERE stadium_id NOT IN ( SELECT stadium_id FROM concert WHERE year = 2014 );,SELECT Name FROM stadium WHERE Stadium_ID NOT IN (   SELECT Stadium_ID   FROM concert   WHERE Year = 2014 );,SELECT Name FROM stadium EXCEPT SELECT T1.Name FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014',SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014'),SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014),select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014,select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014,select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT stadium.name FROM stadium WHERE stadium.stadium_id NOT IN ( SELECT concert.stadium_id FROM concert WHERE concert.year = 2014 );,SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = 2014 WHERE c.concert_ID IS NULL;,SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014'),SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT T1.Stadium_ID FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID  =  T2.Stadium_ID WHERE T2.Year  =  2014),SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID AND concert.Year = 2014 WHERE concert.concert_ID IS NULL,select name from stadium except select stadium.name from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014,select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014,select stadium.name from stadium   except select stadium.name from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014
"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;","SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS num_singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID LEFT JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme","SELECT T2.concert_Name, T2.Theme, count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID","SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID)  FROM concert AS T1  JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID  GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme","SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS NumberOfSingers FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme","select concert.concert_name, concert.theme, count(*) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_name","select t1.concert_name, t1.theme, count(*) from concert as t1 join singer_in_concert as t2 on t1.concert_id = t2.concert_id group by t1.concert_id","select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
"select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;","SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS num_singers FROM concert c LEFT JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID LEFT JOIN singer s ON sic.Singer_ID = s.Singer_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;","SELECT T1.concert_Name , T1.Theme , COUNT(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID","SELECT T1.concert_Name, T1.Theme, COUNT(T2.Singer_ID)  FROM concert AS T1  JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID  GROUP BY T1.concert_ID, T1.concert_Name, T1.Theme","SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS NumberOfSingers FROM concert LEFT JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme","select concert.concert_name, concert.theme, count(*) from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id group by concert.concert_name","select t1.concert_name, t1.theme, count(*) from concert as t1 join singer_in_concert as t2 on t1.concert_id = t2.concert_id group by t1.concert_id","select concert.concert_name , concert.theme , count(*) from singer_in_concert join concert on singer_in_concert.concert_ID = concert.concert_ID  group by concert.concert_name"
"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT singer.name, COUNT(concert.concert_id) as num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY singer.name;","SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID LEFT JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Name;","SELECT T2.Name , COUNT(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID","SELECT T1.Name, COUNT(T2.concert_ID)  FROM singer AS T1  JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Singer_ID, T1.Name","SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS NumberOfConcerts FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name","select singer.name, count(*) from singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id group by singer.name","select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t1.singer_id","select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT singer.name, COUNT(singer_in_concert.concert_id) as num_concerts FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;","SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID LEFT JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Name;","SELECT T2.Name , count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name","SELECT T1.Name, count(T2.concert_ID) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name, T2.Singer_ID","SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS NumberOfConcerts FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name","select singer.name, count(*) from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id group by singer.name","select t2.name, count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t1.singer_id","select singer.name , count(*) from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID  group by singer.name"
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014;,SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014;,SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = '2014',SELECT DISTINCT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014',SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014,select singer.name from singer_in_concert join concert on singer_in_concert.concert_id = concert.concert_id join singer on singer_in_concert.singer_id = singer.singer_id where concert.year = 2014,select t3.name from singer_in_concert as t1 join concert as t2 on t1.concert_id = t2.concert_id join singer as t3 on t1.singer_id = t3.singer_id where t2.year = 2014,select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014
SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.year = 2014;,SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014;,SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T3 ON T1.concert_ID = T3.concert_ID JOIN singer AS T2 ON T3.Singer_ID = T2.Singer_ID WHERE T1.Year = '2014',SELECT DISTINCT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014',SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = 2014,select singer.name from singer join singer_in_concert on singer.singer_id = singer_in_concert.singer_id join concert on singer_in_concert.concert_id = concert.concert_id where concert.year = 2014,select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id = t2.singer_id join concert as t3 on t1.concert_id = t3.concert_id where t3.year = 2014,select singer.name from singer_in_concert join singer on singer_in_concert.Singer_ID = singer.Singer_ID join concert on singer_in_concert.concert_ID = concert.concert_ID where  concert.year = 2014
"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%';","SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';","SELECT Name, Country FROM singer WHERE Song_Name LIKE ""%Hey%""","SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'","SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';","select name, country from singer where song_name like ""%hey%""","select name, country from singer where song_name like ""%hey%""","select singer.name , singer.country from singer where  singer.song_name like ""%Hey%"""
"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT singer.name, singer.country FROM singer WHERE singer.song_name LIKE '%Hey%';","SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';","SELECT Name, Country FROM singer WHERE Song_Name LIKE ""%Hey%""","SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'","SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';","select name, country from singer where song_name like '%hey%'","select name, country from singer where song_name like ""%hey%""","select singer.name , singer.country from singer where  singer.song_name like ""%Hey%"""
"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT stadium.name, stadium.location FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name, stadium.location FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year = 2015;","SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;","SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'","SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2014 INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2015","SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2","select stadium.name, stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name, stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015","select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015","select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 INTERSECT SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2015;","SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;","SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'","SELECT Name, Location FROM stadium WHERE Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2014) AND Stadium_ID IN (SELECT Stadium_ID FROM concert WHERE Year = 2015)","SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2","select stadium.name, stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2014 intersect select stadium.name, stadium.location from stadium join concert on stadium.stadium_id = concert.stadium_id where concert.year = 2015","select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2014 intersect select t1.name, t1.location from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t2.year = 2015","select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2014   intersect select stadium.name , stadium.location from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  concert.year = 2015"
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*) FROM concert WHERE stadium_id = ( SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1 );,SELECT COUNT(*) AS num_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium);,SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Capacity = (SELECT max(Capacity) FROM stadium),SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1),SELECT COUNT(concert.concert_ID) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium),select count(*) from stadium join concert on stadium.stadium_id = concert.stadium_id where stadium.capacity = (select max(capacity) from stadium),select count(*) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id order by t1.capacity desc limit 1,select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity = (select max(stadium.Capacity) from stadium  )
select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(concert_id) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);,SELECT COUNT(*) AS num_concerts FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium);,SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Capacity = (SELECT max(Capacity) FROM stadium),SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1),SELECT COUNT(concert.Stadium_ID) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Capacity = (SELECT MAX(Capacity) FROM stadium),select count(*) from concert join stadium on concert.stadium_id = stadium.stadium_id where stadium.capacity = (select max(capacity) from stadium),select count(*) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id order by t1.capacity desc limit 1,select count(*) from concert join stadium on concert.Stadium_ID = stadium.Stadium_ID where  stadium.capacity = (select max(stadium.Capacity) from stadium  )
SELECT count(*) FROM pets WHERE weight  >  10,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*) FROM pets WHERE weight > 10;,SELECT COUNT(*)  FROM Pets WHERE weight > 10;,SELECT count(*) FROM Pets WHERE weight > 10,SELECT COUNT(*) FROM Pets WHERE weight > 10,SELECT COUNT(PetID) FROM Pets WHERE weight > 10;,select count(*) from pets where weight > 10,select count(*) from pets where weight > 10,select count(*) from Pets where  pets.weight > 10
SELECT count(*) FROM pets WHERE weight  >  10,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*) FROM pets WHERE weight > 10;,SELECT COUNT(*)  FROM Pets WHERE weight > 10;,SELECT count(*) FROM Pets WHERE weight > 10,SELECT COUNT(*) FROM Pets WHERE weight > 10,SELECT COUNT(PetID) FROM Pets WHERE weight > 10;,select count(*) from pets where weight > 10,select count(*) from pets where weight > 10,select count(*) from Pets where  pets.weight > 10
SELECT weight FROM pets ORDER BY pet_age LIMIT 1,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT pets.weight FROM pets WHERE pets.pettype = 'dog' ORDER BY pets.pet_age ASC LIMIT 1;,SELECT MIN(weight)  FROM Pets WHERE PetType = 'dog';,SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;,SELECT weight FROM Pets WHERE pet_age = (SELECT min(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog',SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1,select weight from pets where pettype = 'dog' order by pet_age limit 1,select weight from pets order by pet_age asc limit 1,"select pets.weight from Pets where  pets.pettype = ""dog""   order by pets.pet_age asc limit 1"
SELECT weight FROM pets ORDER BY pet_age LIMIT 1,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT MIN(weight) FROM pets WHERE pettype = 'dog';,SELECT MIN(weight) AS youngest_dog_weight FROM Pets WHERE PetType = 'dog';,SELECT weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;,SELECT weight FROM Pets WHERE pet_age = (SELECT min(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog',SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1,select weight from pets order by pet_age limit 1,select weight from pets order by pet_age asc limit 1,"select pets.weight from Pets where  pets.pet_age = ""dog""   order by pets.pet_age asc limit 1"
"SELECT max(weight) ,  petType FROM pets GROUP BY petType",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT pets.pettype, MAX(pets.weight) FROM pets GROUP BY pets.pettype;","SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType;","SELECT PetType , max(weight) FROM Pets GROUP BY PetType","SELECT MAX(weight), PetType FROM Pets GROUP BY PetType","SELECT MAX(weight) AS MaxWeight, PetType FROM Pets GROUP BY PetType","select max(weight), pettype from pets group by pettype","select max(weight), pettype from pets group by pettype","select max(pets.weight) , pets.pettype from Pets  group by pets.pettype"
"SELECT max(weight) ,  petType FROM pets GROUP BY petType",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT pets.pettype, MAX(pets.weight) FROM pets GROUP BY pets.pettype;","SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;","SELECT PetType , max(weight) FROM Pets GROUP BY PetType","SELECT MAX(weight), PetType FROM Pets GROUP BY PetType","SELECT MAX(weight) AS MaxWeight, PetType FROM Pets GROUP BY PetType","select pettype, max(weight) from pets group by pettype","select max(weight), pettype from pets group by pettype","select max(pets.weight) , pets.pettype from Pets  group by pets.pettype"
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20;,SELECT COUNT(*) AS num_pets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;,SELECT count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20,SELECT count(T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20,SELECT COUNT(Pets.PetID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20,select count(*) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.age > 20,select count(*) from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t3.age > 20,select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID where  student.age > 20
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(pets.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20,SELECT COUNT(*)  FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20;,SELECT count(*) FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20),SELECT count(T1.PetID) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20,SELECT COUNT(DISTINCT Pets.PetID) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20,select count(*) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.age > 20,select count(*) from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t3.age > 20,select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.age > 20
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'F' AND pets.pettype = 'dog';,SELECT COUNT(*)  FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog';,SELECT count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'Dog',SELECT count(T1.PetID) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.PetType = 'dog' AND T3.Sex = 'F',SELECT COUNT(Pets.PetID) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'F';,"select count(*) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = ""F"" and pets.pettype = ""dog""","select count(*) from pets as t1 join has_pet as t2 on t1.petid = t2.petid join student as t3 on t2.stuid = t3.stuid where t3.sex = ""F"" and t1.pettype = ""dog""","select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = ""F"" and pets.pettype = ""dog"""
SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*) FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.sex = 'female' AND pets.pettype = 'dog';,SELECT COUNT(*)  FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog';,SELECT count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T2.Sex = 'F' AND T3.PetType = 'Dog',SELECT count(*) FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.PetType = 'dog' AND T3.Sex = 'female',SELECT COUNT(Pets.PetID) FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.PetType = 'dog' AND Student.Sex = 'F';,"select count(*) from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where student.sex = ""F"" and pets.pettype = ""dog""","select count(*) from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t3.stuid = t1.stuid where t3.sex = ""F"" and t2.pettype = ""dog""","select count(*) from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  student.sex = ""F"" and pets.pettype = ""dog"""
SELECT count(DISTINCT pettype) FROM pets,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(DISTINCT pettype) FROM pets;,SELECT COUNT(DISTINCT PetType) AS num_pet_types FROM Pets;,SELECT count(DISTINCT PetType) FROM Pets,SELECT COUNT(DISTINCT PetType) FROM Pets,SELECT COUNT(DISTINCT PetType) FROM Pets;,select count(distinct pettype) from pets,select count(distinct pettype) from pets,select count( distinct pets.pettype) from Pets
SELECT count(DISTINCT pettype) FROM pets,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(DISTINCT pettype) FROM pets;,SELECT COUNT(DISTINCT PetType) FROM Pets;,SELECT count(DISTINCT PetType) FROM Pets,SELECT COUNT(DISTINCT PetType) FROM Pets,SELECT COUNT(DISTINCT PetType) FROM Pets;,select count(distinct pettype) from pets,select count(distinct pettype) from pets,select count( distinct pets.pettype) from Pets
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' OR pets.pettype = 'dog';,"SELECT Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog');","SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = ""Cat"" OR T3.PetType = ""Dog""",SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog',"SELECT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')","select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = ""cat"" or pets.pettype = ""dog""","select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""cat"" or t3.pettype = ""dog""","select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""cat"" or pets.pettype = ""dog"""
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog');","SELECT Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog');","SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')))",SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog',"SELECT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog')","select distinct student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = ""cat"" or pets.pettype = ""dog""","select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""cat"" or t3.pettype = ""dog""","select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""cat"" or pets.pettype = ""dog"""
select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT student.fname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND student.stuid IN (SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' );,"SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog') GROUP BY s.StuID HAVING COUNT(DISTINCT p.PetType) = 2;","SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = ""Cat"") INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = ""Dog""))",SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog',SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')),"select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = ""cat"" intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = ""dog""","select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""cat"" intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""dog""","select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""cat""   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""dog"""
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT student.fname FROM student WHERE stuid IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'cat' ) AND stuid IN ( SELECT stuid FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pettype = 'dog' );,"SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType IN ('cat', 'dog') GROUP BY s.Fname HAVING COUNT(DISTINCT p.PetType) = 2;",SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat') INTERSECT SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')),SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog',SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')) AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')),"select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = ""cat"" intersect select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = ""dog""",select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = 'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = 'dog',"select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""cat""   intersect select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""dog"""
"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.major, student.age FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = ""cat"" );","SELECT Major, Age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) );","SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')","SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat')","SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')","select major, age from student where stuid not in (select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = ""cat"")","select major, age from student except select t1.major, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""cat""","select student.major , student.age from Student   except select student.major , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""cat"""
"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.major, student.age FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' );","SELECT s.Major, s.Age FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType != 'cat' OR p.PetType IS NULL;","SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')","SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'cat')","SELECT Major, Age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))","select major, age from student where stuid not in (select has_pet.stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = ""cat"")","select major, age from student where stuid not in (select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = ""cat"")","select student.major , student.age from Student   except select student.major , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""cat"""
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT student.stuid FROM student WHERE student.stuid NOT IN ( SELECT has_pet.stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' ),SELECT StuID FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat'   ) );,SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat'),SELECT StuID FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'),SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')),"select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = ""cat""","select stuid from student except select stuid from has_pet join pets as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = ""cat""","select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""cat"""
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT stuid FROM has_pet INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = ""cat"");",SELECT s.StuID FROM Student s WHERE s.StuID NOT IN (   SELECT hp.StuID   FROM Has_Pet hp   JOIN Pets p ON hp.PetID = p.PetID   WHERE p.PetType = 'cat' );,SELECT StuID FROM Student EXCEPT SELECT T1.StuID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.PetID = T2.PetID WHERE T2.PetType = 'cat',SELECT StuID FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'),SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')),"select stuid from student except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = ""cat""","select stuid from student except select stuid from has_pet join pets on pets.petid = pets.petid where pettype = ""cat""","select student.stuid from Student   except select student.stuid from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""cat"""
"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.fname, student.age FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' AND student.stuid NOT IN ( SELECT student.stuid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' )","SELECT Fname, Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.StuID NOT IN (   SELECT StuID   FROM Has_Pet hp   JOIN Pets p ON hp.PetID = p.PetID   WHERE p.PetType = 'cat' );","SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat'))","SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' EXCEPT SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'","SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))","select fname, age from student where stuid in (select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = ""dog"" except select stuid from has_pet join pets on has_pet.petid = pets.petid where pets.pettype = ""cat"")","select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""dog"" except select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""cat""","select student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""dog"" and pets.pettype != ""cat"""
"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'dog' EXCEPT SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat';,SELECT Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.StuID NOT IN (   SELECT StuID   FROM Has_Pet hp   JOIN Pets p ON hp.PetID = p.PetID   WHERE p.PetType = 'cat' );,SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat')),SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'dog' EXCEPT SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.PetType  =  'cat',SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'dog')) AND StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat')),"select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = ""dog"" except select student.fname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pettype = ""cat""","select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""dog"" except select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""cat""","select student.fname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pettype = ""dog"" and pets.pettype != ""cat"""
"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets);","SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);","SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1","SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)","SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1","select pettype, weight from pets order by pet_age limit 1","select pettype, weight from pets order by pet_age asc limit 1","select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT pets.pettype, pets.weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) LIMIT 1;","SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);","SELECT PetType, weight FROM Pets ORDER BY pet_age ASC LIMIT 1","SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)","SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);","select pettype, weight from pets order by pet_age limit 1","select pettype, weight from pets order by pet_age asc limit 1","select pets.pettype , pets.weight from Pets   order by pets.pet_age asc limit 1"
"SELECT petid ,  weight FROM pets WHERE pet_age  >  1",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;","SELECT PetID, weight FROM Pets WHERE pet_age > 1;","SELECT PetID, weight FROM Pets WHERE pet_age > 1","SELECT PetID, weight FROM Pets WHERE pet_age > 1","SELECT PetID, weight FROM Pets WHERE pet_age > 1;","select petid, weight from pets where pet_age > 1","select petid, weight from pets where pet_age > 1","select pets.petid , pets.weight from Pets where  pets.pet_age > 1"
"SELECT petid ,  weight FROM pets WHERE pet_age  >  1",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT pets.petid, pets.weight FROM pets WHERE pets.pet_age > 1;","SELECT PetID, weight FROM Pets WHERE pet_age > 1;","SELECT PetID, weight FROM Pets WHERE pet_age > 1","SELECT PetID, weight FROM Pets WHERE pet_age > 1","SELECT PetID, weight FROM Pets WHERE pet_age > 1","select petid, weight from pets where pet_age > 1","select petid, weight from pets where pet_age > 1","select pets.petid , pets.weight from Pets where  pets.pet_age > 1"
"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT pettype, AVG(pet_age) as average_age, MAX(pet_age) as maximum_age FROM pets GROUP BY pettype;","SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;","SELECT PetType , avg(pet_age) , max(pet_age) FROM Pets GROUP BY PetType","SELECT AVG(pet_age), MAX(pet_age), PetType FROM Pets GROUP BY PetType","SELECT AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge, PetType FROM Pets GROUP BY PetType","select pettype, avg(pet_age), max(pet_age) from pets group by pettype","select pettype, avg(pet_age), max(pet_age) from pets group by pettype","select pets.pettype , avg(pets.pet_age) , max(pets.pet_age) from Pets  group by pets.pettype"
"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT pettype, AVG(pet_age) as average_age, MAX(pet_age) as maximum_age FROM pets GROUP BY pettype;","SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets GROUP BY PetType;","SELECT avg(pet_age) , max(pet_age) , PetType FROM Pets GROUP BY PetType","SELECT AVG(pet_age), MAX(pet_age), PetType FROM Pets GROUP BY PetType","SELECT AVG(pet_age) AS AverageAge, MAX(pet_age) AS MaxAge, PetType FROM Pets GROUP BY PetType","select pettype, avg(pet_age), max(pet_age) from pets group by pettype","select pettype, avg(pet_age), max(pet_age) from pets group by pettype","select pets.pettype , avg(pets.pet_age) , max(pets.pet_age) from Pets  group by pets.pettype"
"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT pettype, avg(weight) FROM pets GROUP BY pettype;","SELECT PetType, AVG(weight) AS avg_weight FROM Pets GROUP BY PetType;","SELECT PetType , avg(weight) FROM Pets GROUP BY PetType","SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType","SELECT AVG(weight) AS average_weight, PetType FROM Pets GROUP BY PetType;","select pettype, avg(weight) from pets group by pettype","select pettype, avg(weight) from pets group by pettype","select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT pettype, AVG(weight) FROM pets GROUP BY pettype;","SELECT PetType, AVG(weight) AS avg_weight FROM Pets GROUP BY PetType;","SELECT PetType , avg(weight) FROM Pets GROUP BY PetType","SELECT AVG(weight), PetType FROM Pets GROUP BY PetType","SELECT AVG(weight) AS average_weight, PetType FROM Pets GROUP BY PetType","select pettype, avg(weight) from pets group by pettype","select pettype, avg(weight) from pets group by pettype","select pets.pettype , avg(pets.weight) from Pets  group by pets.pettype"
"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid;","SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);","SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID","SELECT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID","SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);","select distinct student.fname, student.age from student join has_pet on student.stuid = has_pet.stuid","select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid","select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID"
"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid;","SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet);","SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID","SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID","SELECT Fname, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet) GROUP BY Fname, Age;","select distinct student.fname, student.age from student join has_pet on student.stuid = has_pet.stuid","select distinct t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid","select distinct student.fname , student.age from Has_Pet join Student on Has_Pet.StuID = Student.StuID"
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT pets.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE lname = 'Smith';,SELECT Has_Pet.PetID FROM Student  JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'Smith';,SELECT PetID FROM Has_Pet WHERE StuID = (SELECT StuID FROM Student WHERE LName = 'Smith'),SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith',SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith',"select has_pet.petid from has_pet join student on has_pet.stuid = student.stuid where student.lname = ""Smith""",select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith',"select has_pet.petid from Has_Pet join Student on Has_Pet.StuID = Student.StuID where  student.lname = ""Smith"""
SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT pets.petid FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE student.lname = 'Smith';,SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';,SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith',SELECT T1.PetID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith',SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith',"select has_pet.petid from has_pet join student on has_pet.stuid = student.stuid where student.lname = ""Smith""",select t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith',"select has_pet.petid from Has_Pet join Student on Has_Pet.StuID = Student.StuID where  student.lname = ""Smith"""
"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.stuid, COUNT(has_pet.petid) FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid;","SELECT s.StuID, COUNT(hp.PetID) AS num_pets FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID HAVING COUNT(hp.PetID) > 0;","SELECT Has_Pet.StuID , count(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Has_Pet.StuID HAVING count(*) > 0","SELECT count(T1.PetID), T1.StuID FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID","SELECT COUNT(Has_Pet.PetID) AS NumberOfPets, Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID","select count(*), stuid from has_pet group by stuid","select count(*), t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid group by t1.stuid","select count(*) , has_pet.stuid from Has_Pet  group by has_pet.stuid"
"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.stuid, COUNT(pets.petid) FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid GROUP BY student.stuid;","SELECT s.StuID, COUNT(hp.PetID) AS num_pets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID;","SELECT T1.StuID , count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID","SELECT StuID, count(PetID) FROM Has_Pet GROUP BY StuID","SELECT COUNT(Has_Pet.PetID) AS NumberOfPets, Has_Pet.StuID FROM Has_Pet GROUP BY Has_Pet.StuID","select count(*), student.stuid from student join has_pet on student.stuid = has_pet.stuid group by student.stuid","select count(*), t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid","select count(*) , has_pet.stuid from Has_Pet  group by has_pet.stuid"
"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.fname, student.sex FROM student WHERE student.stuid IN (SELECT stuid FROM has_pet GROUP BY stuid HAVING COUNT(*) > 1);","SELECT Fname, Sex FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   GROUP BY StuID   HAVING COUNT(*) > 1 );","SELECT T1.Fname , T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING count(*) > 1","SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING count(PetID) > 1)","SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)","select student.fname, student.sex from student join has_pet on student.stuid = has_pet.stuid group by has_pet.stuid having count(*) > 1","select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1","select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1"
"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT student.fname, student.sex FROM student WHERE student.stuid IN (SELECT has_pet.stuid FROM has_pet GROUP BY has_pet.stuid HAVING COUNT(*) > 1);","SELECT Fname, Sex FROM Student s WHERE (SELECT COUNT(*) FROM Has_Pet hp WHERE hp.StuID = s.StuID) > 1;","SELECT Fname, Sex FROM Student AS S JOIN Has_Pet AS P ON S.StuID = P.StuID GROUP BY S.StuID HAVING count(*) > 1","SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING count(PetID) > 1)","SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)","select student.fname, student.sex from student join has_pet on student.stuid = has_pet.stuid group by has_pet.stuid having count(*) > 1","select t1.fname, t1.sex from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count(*) > 1","select student.fname , student.sex from Has_Pet join Student on Has_Pet.StuID = Student.StuID  group by has_pet.stuid having  count(*) > 1"
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3;,SELECT LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3;,SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' AND pet_age = 3)),SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3,SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3,select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pet_age = 3,select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pet_age = 3,"select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = ""cat"""
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3 ORDER BY student.lname DESC LIMIT 1;,SELECT LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3;,SELECT S.LName FROM Student AS S JOIN Has_Pet AS HP ON S.StuID = HP.StuID JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;,SELECT T1.LName FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3,SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND Pets.pet_age = 3,select student.lname from student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid where pets.pet_age = 3,select t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pet_age = 3,"select student.lname from Has_Pet join Student on Has_Pet.StuID = Student.StuID join Pets on Has_Pet.PetID = Pets.PetID where  pets.pet_age = 3 and pets.pettype = ""cat"""
select avg(age) from student where stuid not in (select stuid from has_pet),pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT AVG(age) FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_pet ),SELECT AVG(Age) AS avg_age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);,SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet),SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet),SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet),select avg(age) from student where stuid not in (select stuid from has_pet),select avg(age) from student where stuid not in (select stuid from has_pet),select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )
select avg(age) from student where stuid not in (select stuid from has_pet),pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT AVG(age) FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet),SELECT AVG(Age) AS avg_age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet );,SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet),SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet),SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);,select avg(age) from student where stuid not in (select stuid from has_pet),select avg(age) from student where stuid not in (select stuid from has_pet),select avg(student.age) from Student where  student.stuid not in (select Has_Pet.StuID from Has_Pet  )
SELECT count(*) FROM CONTINENTS;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM continents;,SELECT COUNT(*) FROM continents;,SELECT count(*) FROM continents,SELECT COUNT(*) FROM continents,SELECT COUNT(*) FROM continents,select count(*) from continents,select count(*) from continents,select count(*) from continents
SELECT count(*) FROM CONTINENTS;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT count(*) FROM continents;,SELECT COUNT(*) FROM continents;,SELECT count(*) FROM continents,SELECT COUNT(*) FROM continents,SELECT COUNT(ContId) FROM continents,select count(*) from continents,select count(*) from continents,select count(*) from continents
"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT continents.contid, continents.continent, COUNT(countries.countryname) FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;","SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS num_countries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;","SELECT T1.ContId , T1.Continent, count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId","SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId)  FROM continents AS T1  JOIN countries AS T2 ON T1.ContId = T2.Continent  GROUP BY T1.ContId, T1.Continent","SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent","select continents.continent, countries.countryname, count(*) from continents join countries on continents.continent = countries.continent group by continents.continent","select t1.continent, t2.countryname, count(*) from continents as t1 join countries as t2 on t1.continent = t2.continent group by t1.continent","select continents.contid , continents.continent , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.contid"
"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT continents.contid, continents.continent, COUNT(countries.countryid) as num_countries FROM continents LEFT JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;","SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;","SELECT T1.ContId , T1.Continent, count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId","SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId)  FROM continents AS T1  JOIN countries AS T2 ON T1.ContId = T2.Continent  GROUP BY T1.ContId, T1.Continent","SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent","select continents.continent, countries.countryname, count(*) from continents join countries on continents.continent = countries.continent group by continents.continent","select t1.continent, count(*) from continents as t1 join countries as t2 on t1.continent = t2.continent group by t1.continent","select continents.continent , countries.countryname , count(*) from countries join continents on countries.Continent = continents.ContId  group by continents.continent"
SELECT count(*) FROM COUNTRIES;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM countries;,SELECT COUNT(*) FROM countries;,SELECT count(*) FROM countries,SELECT COUNT(*) FROM countries,SELECT COUNT(CountryId) FROM countries,select count(*) from countries,select count(*) from countries,select count(*) from countries
SELECT count(*) FROM COUNTRIES;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT count(*) FROM countries;,SELECT COUNT(*) FROM countries;,SELECT count(*) FROM countries,SELECT COUNT(*) FROM countries,SELECT COUNT(CountryId) FROM countries;,select count(*) from countries,select count(*) from countries,select count(*) from countries
"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) as num_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id;","SELECT m.FullName, m.Id, COUNT(l.ModelId) AS num_models FROM car_makers m LEFT JOIN model_list l ON m.Id = l.Maker GROUP BY m.FullName, m.Id;","SELECT car_makers.FullName, car_makers.Id, COUNT(model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName","SELECT T2.FullName, T2.Id, COUNT(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.FullName, T2.Id","SELECT COUNT(model_list.ModelId) AS NumberOfModels, car_makers.FullName, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id, car_makers.FullName","select car_makers.fullname, car_makers.id, count(*) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id","select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id","select car_makers.fullname , car_makers.maker , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker"
"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;","SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS num_models FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;","SELECT T1.Id, T1.FullName, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName","SELECT T1.FullName, T1.Id, count(T2.Model) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName, T1.Id","SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName","select car_makers.fullname, car_makers.id, count(*) from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id","select t1.fullname, t1.id, count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id","select car_makers.fullname , car_makers.id , count(*) from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.horsepower LIMIT 1;,SELECT Model  FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower ASC LIMIT 1;,SELECT Model FROM model_list WHERE Maker = (SELECT Maker FROM car_makers WHERE Country = (SELECT Country FROM cars_data ORDER BY Horsepower ASC LIMIT 1)),SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Horsepower = (SELECT min(Horsepower) FROM cars_data),"SELECT MIN(Horsepower), car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY car_names.Model ORDER BY MIN(Horsepower) ASC LIMIT 1",select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid order by cars_data.horsepower limit 1,select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower limit 1,select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.horsepower asc limit 1
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.horsepower ASC LIMIT 1;,SELECT Model  FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower ASC LIMIT 1;,SELECT Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE Horsepower = ( SELECT MIN ( Horsepower ) FROM cars_data );,SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Horsepower LIMIT 1,SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY Horsepower ASC LIMIT 1,select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid order by cars_data.horsepower limit 1,select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.horsepower limit 1,select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.horsepower asc limit 1
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);,SELECT Model  FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);,SELECT model FROM model_list WHERE ModelId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT avg(Weight) FROM cars_data)),SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT avg(Weight) FROM cars_data)),SELECT AVG(Weight) FROM cars_data) AS AvgWeight WHERE Weight < AvgWeight;,select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.weight < (select avg(weight) from cars_data),select t1.model from model_list as t1 join cars_data as t2 on t1.modelid = t2.id where t2.weight < (select avg(weight) from cars_data),select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )
SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.weight < (SELECT AVG(weight) FROM cars_data);,SELECT Model  FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);,SELECT model FROM model_list WHERE Maker IN (SELECT Maker FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)));,SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg(Weight) FROM cars_data),SELECT model_list.Model  FROM model_list  JOIN car_names ON model_list.ModelId = car_names.MakeId  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data);,select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.weight < (select avg(weight) from cars_data),select t1.model from model_list as t1 join cars_data as t2 on t1.modelid = t2.id where t2.weight < (select avg(weight) from cars_data),select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.weight < (select avg(cars_data.Weight) from cars_data  )
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT car_makers.maker FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;,SELECT DISTINCT cm.FullName FROM car_makers cm JOIN car_names cn ON cm.Id = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;,SELECT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = 1970))),SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = 1970,SELECT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = 1970)));,select distinct car_makers.maker from car_makers join cars_data on car_makers.id = cars_data.id where cars_data.year = 1970,select t1.maker from car_makers as t1 join cars_data as t2 on t1.id = t2.id where t2.year = 1970,select car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT car_makers.fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = 1970;,SELECT DISTINCT FullName FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker   JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;,SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T4.Year = 1970,SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T4 ON T1.Id = T4.Maker JOIN car_names AS T2 ON T4.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = 1970,SELECT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE Model IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = 1970))),select distinct car_makers.maker from car_makers join car_names on car_makers.id = car_names.makeid join cars_data on cars_data.id = car_names.makeid where cars_data.year = 1970,select distinct t1.maker from car_makers as t1 join cars_data as t2 on t1.id = t2.id where t2.year = 1970,select distinct car_makers.maker from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.year = 1970
"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_names.make, cars_data.year FROM car_names JOIN model_list ON car_names.model = model_list.modelid JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = ( SELECT MIN(year) FROM cars_data );","SELECT Make, Year FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year = (SELECT MIN(Year) FROM cars_data);","SELECT T1.Make , T1.Year FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId ORDER BY T1.Year ASC LIMIT 1","SELECT T1.Make , T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Year  =  (SELECT min(Year) FROM cars_data)","SELECT MIN(Year), Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY Make ORDER BY Year ASC LIMIT 1","select car_names.make, cars_data.year from cars_data join car_names on cars_data.id = car_names.makeid order by cars_data.year limit 1","select make, model, year from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.year limit 1","select car_names.make , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId   order by cars_data.year asc limit 1"
"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_makers.maker, MIN(cars_data.year) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id GROUP BY car_makers.maker ORDER BY MIN(cars_data.year) LIMIT 1;","SELECT car_makers.Maker, cars_data.Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id ORDER BY cars_data.Year LIMIT 1;","SELECT T1.Maker, T2.Year FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id ORDER BY T2.Year ASC LIMIT 1","SELECT T1.Maker, T2.Year FROM car_makers AS T1 JOIN model_list AS T3 ON T1.Id = T3.Maker JOIN car_names AS T4 ON T3.Model = T4.Model JOIN cars_data AS T2 ON T4.MakeId = T2.Id ORDER BY T2.Year ASC LIMIT 1","SELECT MIN(Year), car_makers.Maker FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id ORDER BY Year ASC LIMIT 1","select car_makers.maker, cars_data.year from cars_data join model_list on cars_data.id = model_list.modelid join car_makers on cars_data.id = car_makers.id order by cars_data.year limit 1","select t1.maker, t2.year from car_makers as t1 join cars_data as t2 on t1.id = t2.id order by t2.year limit 1","select car_makers.maker , cars_data.year from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id   order by cars_data.year asc limit 1"
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT DISTINCT car_names.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE cars_data.year > 1980;,SELECT DISTINCT Model  FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year > 1980;,SELECT DISTINCT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent IN (SELECT ContId FROM continents))) AND ModelId IN (SELECT MakeId FROM cars_data WHERE Year > 1980),SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T1.MakeId = T3.Id WHERE T3.Year > 1980,SELECT Model  FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id  WHERE Year > 1980  GROUP BY Model;,select distinct car_names.model from car_names join cars_data on car_names.makeid = cars_data.id where cars_data.year > 1980,select distinct t1.model from model_list as t1 join cars_data as t2 on t1.model = t2.id where t2.year > 1980,select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE cars_data.year > 1980;,SELECT DISTINCT Model  FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980;,SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Year > 1980,SELECT DISTINCT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id JOIN model_list AS T3 ON T1.Model = T3.Model WHERE T2.Year > 1980,SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Year > 1980;,select distinct model_list.model from model_list join cars_data on model_list.modelid = cars_data.id where cars_data.year > 1980,select distinct t2.model from cars_data as t1 join model_list as t2 on t1.id = t2.modelid where t1.year > 1980,select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  cars_data.year > 1980
"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT continents.continent, COUNT(car_makers.id) FROM continents JOIN countries ON continents.contid = countries.continent JOIN car_makers ON countries.countryid = car_makers.country GROUP BY continents.continent;","SELECT c.Continent, COUNT(cm.Id) AS maker_count FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;","SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.ContId","SELECT count(T1.Id), T3.Continent FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId GROUP BY T3.Continent","SELECT CONTINENT, COUNT(DISTINCT car_makers.Id) AS MakerCount FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CONTINENT","select continents.continent, count(*) from continents join car_makers on continents.contid = car_makers.country group by continents.continent","select t1.continent, count(*) from continents as t1 join car_makers as t2 on t1.contid = t2.country group by t1.continent","select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT continents.continent, COUNT(car_makers.maker) FROM continents JOIN countries ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY continents.continent;","SELECT c.Continent, COUNT(cm.Id) AS num_car_makers FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;","SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent","SELECT T1.Continent, COUNT(T3.Id)  FROM continents AS T1  JOIN countries AS T2 ON T1.ContId = T2.Continent  JOIN car_makers AS T3 ON T2.CountryId = T3.Country  GROUP BY T1.Continent","SELECT continents.Continent, COUNT(car_makers.Id) AS NumberOfCarMakers FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent LEFT JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent","select countries.countryname, count(*) from countries join car_makers on countries.countryid = car_makers.country group by countries.continent","select t1.continent, count(*) from continents as t1 join car_makers as t2 on t1.contid = t2.country group by t1.continent","select continents.continent , count(*) from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId  group by continents.continent"
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT countries.countryname FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname ORDER BY COUNT(car_makers.maker) DESC LIMIT 1;,SELECT CountryName FROM countries WHERE CountryId = (   SELECT Country   FROM car_makers   GROUP BY Country   ORDER BY COUNT(*) DESC   LIMIT 1 );,SELECT countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY COUNT(*) DESC LIMIT 1,SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.CountryName ORDER BY count(*) DESC LIMIT 1,"SELECT COUNT(car_makers.Id) AS MakerCount, countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY MakerCount DESC LIMIT 1",select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count(*) desc limit 1,select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t2.country order by count(*) desc limit 1,select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryname  order by count(*) desc limit 1
SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT countries.countryname FROM countries JOIN car_makers ON countries.countryid = car_makers.country GROUP BY countries.countryname ORDER BY COUNT(car_makers.maker) DESC LIMIT 1;,SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(*) DESC LIMIT 1;,SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY count(*) DESC LIMIT 1,SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY count(*) DESC LIMIT 1,"SELECT COUNT(car_makers.Id) AS MakerCount, countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId GROUP BY countries.CountryName ORDER BY MakerCount DESC LIMIT 1",select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname order by count(*) desc limit 1,select country from car_makers group by country order by count(*) desc limit 1,select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by car_makers.country  order by count(*) desc limit 1
"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_makers.fullname, COUNT(model_list.model) as model_count FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname;","SELECT FullName, COUNT(*) AS num_models FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY FullName;","SELECT T1.FullName , COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName","SELECT count(T1.Model) ,  T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.Id, T2.FullName","SELECT COUNT(model_list.ModelId) AS ModelCount, car_makers.FullName FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.FullName","select count(*), car_makers.fullname from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id","select count(*), t1.fullname from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.fullname","select count(*) , car_makers.fullname from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker"
"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_makers.id, car_makers.fullname, COUNT(model_list.model) AS num_car_models FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname;","SELECT m.Id, m.FullName, COUNT(l.ModelId) AS num_models FROM car_makers m LEFT JOIN model_list l ON m.Id = l.Maker GROUP BY m.Id, m.FullName;","SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.Model) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName","SELECT count(T1.Model), T2.Id, T2.FullName FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.Id, T2.FullName","SELECT COUNT(model_list.Model) AS NumberOfModels, car_makers.Id, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName","select count(*), car_makers.id, car_makers.fullname from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id","select count(*), t1.id, t1.fullname from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id","select count(*) , car_makers.id , car_makers.fullname from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id"
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT cars_data.accelerate FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.maker = 'amc' AND car_names.make = 'amc hornet sportabout (sw)';,SELECT Accelerate  FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'amc hornet sportabout (sw)';,SELECT Accelerate FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'amc hornet sportabout (sw)'),SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc hornet sportabout (sw)',SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'amc hornet sportabout (sw)';,"select cars_data.accelerate from car_names join cars_data on car_names.makeid = cars_data.id where car_names.make = ""amc hornet"" and car_names.make = ""sw""","select t2.accelerate from car_names as t1 join cars_data as t2 on t1.model = t2.id where t1.make = ""amc hornet sportabout (sw)""","select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = ""amc hornet sportabout (sw)"""
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT accelerate FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid INNER JOIN model_list ON car_names.model = model_list.model INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE car_names.model = 'amc hornet sportabout (sw)';,SELECT Accelerate  FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'amc hornet sportabout (sw)';,SELECT Accelerate FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'amc hornet sportabout (sw)'),SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc hornet sportabout (sw)',SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Make = 'amc hornet sportabout (sw)'),"select cars_data.accelerate from car_names join cars_data on car_names.makeid = cars_data.id where car_names.make = ""amc hornet"" and car_names.make = ""sw""","select t2.accelerate from car_names as t1 join cars_data as t2 on t1.make = t2.id where t1.make = ""amc hornet sportabout (sw)""","select cars_data.accelerate from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.make = ""amc hornet sportabout (sw)"""
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(DISTINCT car_makers.id) AS car_maker_count FROM car_makers INNER JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'france';,SELECT COUNT(*)  FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france');,SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France',SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France',SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'france',"select count(*) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = ""france""","select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.countryname = ""france""","select count(*) from car_makers join countries on car_makers.Country = countries.CountryId where  countries.countryname = ""france"""
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(DISTINCT car_makers.maker) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France';,SELECT COUNT(*)  FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france');,SELECT count(DISTINCT Maker) FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE CountryName = 'France'),SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France',SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France',"select count(*) from car_makers join countries on car_makers.country = countries.countryid where countries.countryname = ""France""","select count(*) from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.countryname = ""France""","select count(*) from car_makers join countries on car_makers.Country = countries.CountryId where  countries.countryname = ""france"""
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT count(DISTINCT modelid) FROM car_makers JOIN countries ON car_makers.country = countries.countryid JOIN model_list ON model_list.maker = car_makers.id WHERE countries.countryname = 'usa';,SELECT COUNT(*)  FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa';,SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'USA';,SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa',SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa',"select count(*) from countries join car_makers on countries.countryid = car_makers.country where countries.countryname = ""USA""",select count(*) from countries as t1 join model_list as t2 on t1.countryid = t2.maker where t1.countryname = 'usa',"select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  countries.countryname = ""usa"""
SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(modelid) FROM countries JOIN car_makers ON countries.countryid = car_makers.country JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE countries.countryname = 'United States';,SELECT COUNT(*)  FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa';,SELECT count(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'North America' AND countries.CountryName = 'United States';,SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'United States',SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa',select count(*) from car_makers where country = 'USA',select count(*) from model_list where maker = 'USA',"select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.country = ""USA"""
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT AVG(mpg) FROM cars_data WHERE cylinders = 4;,SELECT AVG(MPG) AS avg_mpg FROM cars_data WHERE Cylinders = 4;,SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4,SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4,SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4,select avg(mpg) from cars_data where cylinders = 4,select avg(mpg) from cars_data where cylinders = 4,select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4
SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT avg(mpg) FROM cars_data WHERE cylinders = 4;,SELECT AVG(MPG) AS avg_mpg FROM cars_data WHERE Cylinders = 4;,SELECT avg(MPG) FROM cars_data WHERE Cylinders = 4,SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4,SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;,select avg(mpg) from cars_data where cylinders = 4,select avg(mpg) from cars_data where cylinders = 4,select avg(cars_data.mpg) from cars_data where  cars_data.cylinders = 4
select min(weight) from cars_data where cylinders  =  8 and year  =  1974,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT min(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;,SELECT MIN(Weight) AS smallest_weight FROM cars_data WHERE Cylinders = 8 AND Year = 1974;,SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974,SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974,SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974,select min(weight) from cars_data where cylinders = 8 and year = 1974,select min(weight) from cars_data where cylinders = 8 and year = 1974,select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8
select min(weight) from cars_data where cylinders  =  8 and year  =  1974,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974;,SELECT MIN(Weight) AS min_weight FROM cars_data WHERE Cylinders = 8 AND Year = 1974;,SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974,SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974,SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974,select min(weight) from cars_data where cylinders = 8 and year = 1974,select min(weight) from cars_data where cylinders = 8 and year = 1974,select min(cars_data.weight) from cars_data where  cars_data.year = 1974 and cars_data.cylinders = 8
"SELECT Maker ,  Model FROM MODEL_LIST;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT model_list.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model;","SELECT Maker, Model  FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id;","SELECT car_makers.Maker , model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker","SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker","SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker","select maker, model from model_list","select maker, model from model_list","select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
"SELECT Maker ,  Model FROM MODEL_LIST;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT model_list.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model;","SELECT Maker, Model  FROM model_list;","SELECT Maker , Model FROM model_list","SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker","SELECT Maker, Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id;","select maker, model from model_list","select maker, model from model_list","select car_makers.maker , model_list.model from model_list join car_makers on model_list.Maker = car_makers.Id"
"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT countries.countryname, countries.countryid FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname, countries.countryid;","SELECT CountryName, CountryId FROM countries WHERE CountryId IN (   SELECT DISTINCT Country   FROM car_makers );","SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId, countries.CountryName","SELECT DISTINCT T2.CountryName, T2.CountryId FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId","SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId, countries.CountryName","select countries.countryname, car_makers.country from car_makers join countries on car_makers.country = countries.countryid","select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country","select countries.countryname , car_makers.id from car_makers join countries on car_makers.Country = countries.CountryId"
"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT countries.countryid, countries.countryname FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid;","SELECT CountryName, CountryId FROM countries WHERE CountryId IN (   SELECT DISTINCT Country   FROM car_makers );","SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(*) >= 1","SELECT DISTINCT T1.CountryName, T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country","SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId, countries.CountryName","select countries.countryname, car_makers.country from countries join car_makers on countries.countryid = car_makers.country","select t1.countryname, t1.countryid from countries as t1 join car_makers as t2 on t1.countryid = t2.country","select countries.countryname , countries.countryid from car_makers join countries on car_makers.Country = countries.CountryId"
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;,SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;,SELECT count(*) FROM cars_data WHERE Horsepower > 150,SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150,SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;,select count(*) from cars_data where horsepower > 150,select count(*) from cars_data where horsepower > 150,select count(*) from cars_data where  cars_data.horsepower > 150
SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM cars_data WHERE horsepower > 150;,SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;,SELECT count(*) FROM cars_data WHERE Horsepower > 150,SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150,SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;,select count(*) from cars_data where horsepower > 150,select count(*) from cars_data where horsepower > 150,select count(*) from cars_data where  cars_data.horsepower > 150
"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT year, AVG(weight) AS average_weight FROM cars_data GROUP BY year;","SELECT Year, AVG(Weight) AS avg_weight FROM cars_data GROUP BY Year;","SELECT avg(Weight) , Year FROM cars_data GROUP BY Year","SELECT AVG(Weight), Year FROM cars_data GROUP BY Year","SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year","select avg(weight), year from cars_data group by year","select avg(weight), year from cars_data group by year","select avg(cars_data.weight) , cars_data.year from cars_data  group by cars_data.year"
"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT year, AVG(weight), AVG(year) FROM cars_data GROUP BY year;","SELECT Year, AVG(Weight) AS avg_weight FROM cars_data GROUP BY Year;","SELECT avg(Weight) , Year FROM cars_data GROUP BY Year","SELECT AVG(Weight), Year FROM cars_data GROUP BY Year","SELECT AVG(Weight) AS AverageWeight, Year FROM cars_data GROUP BY Year","select avg(weight), year from cars_data group by year","select avg(weight), year from cars_data group by year","select avg(cars_data.weight) , cars_data.year from cars_data  group by cars_data.year"
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON countries.countryid = car_makers.country WHERE continents.continent = 'europe' GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.id) >= 3;,SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'europe') GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;,"SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 JOIN continents AS T3 ON T1.Country = T2.CountryId AND T2.Continent = T3.ContId WHERE T3.Continent = ""Europe"" GROUP BY T2.CountryName HAVING count(*) >= 3",SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId  =  T2.Country JOIN continents AS T3 ON T1.Continent  =  T3.ContId WHERE T3.Continent  =  'Europe' GROUP BY T1.CountryName HAVING count(*)  >=  3,SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent IN (SELECT ContId FROM continents WHERE Continent = 'europe') GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3,select countries.countryname from car_makers join countries on car_makers.country = countries.countryid join continents on continents.continent =,"select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.continent = ""europe"" group by t1.countryname having count(*) >= 3","select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = ""europe""  group by countries.countryname having  count(*) >= 3"
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT countries.countryname FROM countries JOIN continents ON countries.continent = continents.contid JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.maker) >= 3 AND continents.continent = ""europe"";",SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'europe') GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;,SELECT CountryName FROM countries WHERE Continent IN (SELECT ContId FROM continents WHERE Continent = 'Europe') AND CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) >= 3),SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING count(*) >= 3,SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country WHERE countries.Continent IN (SELECT ContId FROM continents WHERE Continent = 'europe') GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3,select countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryname having count(*) >= 3,select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country group by t2.country having count(*) >= 3,"select countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId join continents on countries.Continent = continents.ContId where  continents.continent = ""europe""  group by countries.countryname having  count(*) >= 3"
"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT MAX(cars_data.horsepower), car_makers.fullname FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3;","SELECT MAX(Horsepower) AS max_horsepower, Make  FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 3;","SELECT max(cars_data.Horsepower), car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3","SELECT max(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make","SELECT MAX(Horsepower) AS MaxHorsepower, Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 3 GROUP BY Make","select max(horsepower), car_names.make from cars_data join car_names on cars_data.id = car_names.model where cars_data.cylinders = 3","select max(t1.horsepower), max(t2.make) from cars_data as t1 join car_names as t2 on t1.id = t2.model where t1.cylinders = 3","select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3"
"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT MAX(cars_data.horsepower), car_makers.fullname FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3","SELECT Make, Horsepower FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE cd.Cylinders = 3 ORDER BY cd.Horsepower DESC LIMIT 1;","SELECT max(Horsepower), Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE Cylinders = 3","SELECT max(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3 GROUP BY T2.Make","SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3 GROUP BY car_names.Make ORDER BY MaxHorsepower DESC LIMIT 1","select car_names.make, max(cars_data.horsepower) from cars_data join car_names on cars_data.cylinders = car_names.makeid where cars_data.cylinders = 3","select max(t2.horsepower), t1.make from car_names as t1 join cars_data as t2 on t1.make = t2.id where t2.cylinders = 3","select max(cars_data.horsepower) , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 3  group by car_names.make  order by max(cars_data.horsepower) desc limit 1"
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.mpg DESC LIMIT 1;,"SELECT Model, MAX(MPG) AS MaxMPG FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY Model ORDER BY MaxMPG DESC LIMIT 1;",SELECT model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id ORDER BY MPG DESC LIMIT 1;,SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.MPG = (SELECT max(MPG) FROM cars_data),"SELECT MAX(MPG), car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY car_names.Model ORDER BY MAX(MPG) DESC LIMIT 1",select model_list.model from cars_data join model_list on cars_data.id = model_list.modelid group by model_list.model order by sum(cars_data.mpg) desc limit 1,select t1.model from model_list as t1 join cars_data as t2 on t1.model = t2.id order by t2.mpg desc limit 1,select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1
select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model ORDER BY cars_data.mpg DESC LIMIT 1;,SELECT Model  FROM model_list INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.MPG DESC LIMIT 1;,SELECT model FROM cars_data AS t1 JOIN model_list AS t2 ON t1.Id = t2.ModelId ORDER BY MPG DESC LIMIT 1,SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.MPG DESC LIMIT 1,"SELECT MAX(MPG), Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY Model ORDER BY MAX(MPG) DESC LIMIT 1;",select car_names.model from cars_data join car_names on cars_data.id = car_names.makeid order by cars_data.mpg desc limit 1,select t1.model from model_list as t1 join cars_data as t2 on t1.model = t2.id order by t2.mpg desc limit 1,select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model   order by cars_data.mpg desc limit 1
SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;,SELECT AVG(Horsepower) AS avg_horsepower FROM cars_data WHERE Year < 1980;,SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980,SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980,SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980,select avg(horsepower) from cars_data where year < 1980,select avg(horsepower) from cars_data where year < 1980,select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980
select avg(horsepower) from cars_data where year  <  1980;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT AVG(horsepower) FROM cars_data WHERE year < 1980;,SELECT AVG(Horsepower) AS avg_horsepower FROM cars_data WHERE Year < 1980;,SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980,SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980,SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980,select avg(horsepower) from cars_data where year < 1980,select avg(horsepower) from cars_data where year < 1980,select avg(cars_data.horsepower) from cars_data where  cars_data.year < 1980
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT avg(edispl) FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model WHERE model_list.model = 'volvo';,SELECT AVG(Edispl) AS avg_edispl FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE ml.Model = 'volvo';,SELECT avg(Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Model = 'volvo',SELECT avg(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Model = 'volvo',SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'volvo';,select avg(edispl) from cars_data join model_list on cars_,"select avg(edispl) from cars_data as t1 join model_list as t2 on t1.id = t2.modelid where t2.model = ""Volvo""","select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  model_list.model = ""volvo"""
SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT AVG(cars_data.edispl) FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.maker = 'volvo';,SELECT AVG(Edispl) AS avg_edispl FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'volvo';,SELECT avg(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo',SELECT avg(T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T4.Maker = 'volvo',SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo';,select avg(edispl) from cars_data,select avg(edispl) from cars_data where id = 'Volvo',"select avg(cars_data.edispl) from cars_data join car_names on cars_data.Id = car_names.MakeId where  car_names.model = ""volvo"""
"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT MAX(accelerate), cylinders FROM cars_data GROUP BY cylinders;","SELECT Cylinders, MAX(Accelerate) AS max_accelerate FROM cars_data GROUP BY Cylinders;","SELECT max(Accelerate) , Cylinders FROM cars_data GROUP BY Cylinders","SELECT max(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders","SELECT MAX(Accelerate) AS MaxAccelerate, Cylinders FROM cars_data GROUP BY Cylinders","select max(accelerate), cylinders from cars_data group by cylinders","select max(accelerate), cylinders from cars_data group by cylinders","select max(cars_data.accelerate) , cars_data.cylinders from cars_data  group by cars_data.cylinders"
"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MAX(accelerate) FROM cars_data GROUP BY cylinders;,"SELECT Cylinders, MAX(Accelerate) AS max_accelerate FROM cars_data GROUP BY Cylinders;","SELECT max(Accelerate) , Cylinders FROM cars_data GROUP BY Cylinders","SELECT max(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders","SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders","select max(accelerate), cylinders from cars_data group by cylinders","select max(accelerate), cylinders from cars_data group by cylinders","select max(cars_data.accelerate) , cars_data.cylinders from cars_data  group by cars_data.cylinders"
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.model FROM model_list JOIN car_names ON model_list.model = car_names.model GROUP BY model_list.model ORDER BY COUNT(DISTINCT car_names.make) DESC LIMIT 1;,"SELECT Model, COUNT(*) AS num_makes FROM car_names GROUP BY Model ORDER BY num_makes DESC LIMIT 1;",SELECT Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.MakeId GROUP BY T1.Model ORDER BY COUNT(*) DESC LIMIT 1;,SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY count(T2.Make) DESC LIMIT 1,"SELECT Model, COUNT(Make) AS VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1",select model from car_names group by model order by count(*) desc limit 1,select model from car_names group by model order by count(*) desc limit 1,select model_list.model from car_names join model_list on car_names.Model = model_list.Model  group by car_names.make  order by count(*) desc limit 1
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model FROM model_list GROUP BY model ORDER BY COUNT(DISTINCT modelid) DESC LIMIT 1;,SELECT Model FROM model_list GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Model FROM model_list GROUP BY Model ORDER BY count(*) DESC LIMIT 1,SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model GROUP BY T1.Model ORDER BY count(T2.Model) DESC LIMIT 1,"SELECT Model, COUNT(Make) AS VersionCount FROM car_names GROUP BY Model ORDER BY VersionCount DESC LIMIT 1",select model from model_list group by model order by count(*) desc limit 1,select model from model_list group by model order by count(*) desc limit 1,select model_list.model from model_list  group by model_list.model  order by count(*) desc limit 1
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM cars_data WHERE cylinders > 4;,SELECT COUNT(*)  FROM cars_data WHERE Cylinders > 4;,SELECT count(*) FROM cars_data WHERE Cylinders > 4,SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4,SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;,select count(*) from cars_data where cylinders > 4,select count(*) from cars_data where cylinders > 4,select count(*) from cars_data where  cars_data.cylinders > 4
SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT count(*) FROM cars_data WHERE cylinders > 4;,SELECT COUNT(*)  FROM cars_data WHERE Cylinders > 4;,SELECT count(*) FROM cars_data WHERE Cylinders > 4,SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4,SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;,select count(*) from cars_data where cylinders > 4,select count(*) from cars_data where cylinders > 4,select count(*) from cars_data where  cars_data.cylinders > 4
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT count(*) FROM cars_data WHERE year = 1980;,SELECT COUNT(*)  FROM cars_data WHERE Year = 1980;,SELECT count(*) FROM cars_data WHERE Year = 1980;,SELECT COUNT(*) FROM cars_data WHERE Year = 1980,SELECT COUNT(*) FROM cars_data WHERE Year = 1980,select count(*) from cars_data where year = 1980,select count(*) from cars_data where year = 1980,select count(*) from cars_data where  cars_data.year = 1980
SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM cars_data WHERE year = 1980;,SELECT COUNT(*)  FROM cars_data WHERE Year = 1980;,SELECT count(*) FROM cars_data WHERE Year = 1980,SELECT COUNT(*) FROM cars_data WHERE Year = 1980,SELECT COUNT(Id) FROM cars_data WHERE Year = 1980,select count(*) from cars_data where year = 1980,select count(*) from cars_data where year = 1980,select count(*) from cars_data where  cars_data.year = 1980
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT COUNT(DISTINCT model) FROM model_list JOIN car_makers ON car_makers.id = model_list.maker WHERE car_makers.fullname = ""American Motor Company"";",SELECT COUNT(*)  FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'American Motor Company';,"SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = ""American Motor Company"";",SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company',SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company';,"select count(*) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = ""American motor Company""",select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American Motor Company',"select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = ""American Motor Company"""
SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT COUNT(*) FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id WHERE car_makers.fullname = ""American Motor Company""",SELECT COUNT(*)  FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'American Motor Company';,"SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker WHERE T1.Maker = ""American Motor Company""",SELECT count(T1.Model) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company',SELECT COUNT(model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company';,"select count(*) from car_makers join model_list on car_makers.id = model_list.maker where car_makers.fullname = ""American motor Company""",select count(*) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American Motor Company',"select count(*) from model_list join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = ""American Motor Company"""
"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_makers.id, car_makers.fullname FROM car_makers INNER JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.fullname HAVING COUNT(model_list.model) > 3;","SELECT FullName, car_makers.Id FROM car_makers  INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, FullName HAVING COUNT(model_list.ModelId) > 3;","SELECT T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(*) > 3","SELECT T1.Id, T1.FullName FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName HAVING count(T2.Model) > 3","SELECT COUNT(model_list.Model) AS ModelCount, car_makers.FullName, car_makers.Id FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id, car_makers.FullName HAVING COUNT(model_list.Model) > 3","select car_makers.fullname, car_makers.id from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count(*) > 3","select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3","select car_makers.fullname , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) > 3"
"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT makers.id, makers.maker FROM car_makers AS makers JOIN model_list AS models ON makers.id = models.maker GROUP BY makers.id, makers.maker HAVING COUNT(models.modelid) > 3;","SELECT m.Maker, m.Id FROM car_makers m JOIN model_list l ON m.Id = l.Maker GROUP BY m.Maker, m.Id HAVING COUNT(l.ModelId) > 3;","SELECT T2.Maker, T2.Id FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T1.Maker HAVING count(T1.ModelId) > 3;","SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING count(*) > 3","SELECT COUNT(model_list.Model) AS ModelCount, car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(model_list.Model) > 3","select car_makers.fullname, model_list.maker from car_makers join model_list on car_makers.id = model_list.maker group by model_list.maker having count(*) > 3","select t1.fullname, t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) > 3","select car_makers.maker , car_makers.id from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.maker having  count(*) > 3"
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT DISTINCT car_names.model FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = 'General Motors' OR cars_data.weight > 3500;,SELECT DISTINCT model_list.Model FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500;,SELECT DISTINCT T3.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.FullName = 'General Motors' OR T4.Weight > 3500,SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN car_names AS T3 ON T1.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T2.FullName = 'General Motors' OR T4.Weight > 3500,SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id LEFT JOIN car_names ON model_list.Model = car_names.Model LEFT JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500,select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500,select distinct t2.model from cars_data as t1 join model_list as t2 on t1.id = t2.modelid join car_makers as t3 on t2.maker = t3.id where t3.fullname = 'General Motors' or t1.weight > 3500,"select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = ""General Motors"" or cars_data.weight > 3500"
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT DISTINCT car_names.model FROM model_list INNER JOIN car_makers ON model_list.maker = car_makers.id INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id WHERE car_makers.fullname = ""General Motors"" OR cars_data.weight > 3500;",SELECT Model  FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;,SELECT Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'General Motors' UNION SELECT T3.Model FROM cars_data AS T4 JOIN car_names AS T3 ON T4.Id = T3.MakeId WHERE T4.Weight > 3500,SELECT T3.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = 'General Motors' OR T4.Weight > 3500,SELECT DISTINCT car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' OR cars_data.Weight > 3500,select distinct model_list.model from model_list join car_makers on model_list.maker = car_makers.id join cars_data on cars_data.id = car_makers.id where car_makers.fullname = 'General Motors' or cars_data.weight > 3500,"select distinct t1.model from model_list as t1 join cars_data as t2 on t1.modelid = t2.id join car_makers as t3 on t1.maker = t3.id where t3.fullname = ""General Motors"" or t2.weight > 3500","select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  car_makers.fullname = ""General Motors"" or cars_data.weight > 3500"
select distinct year from cars_data where weight between 3000 and 4000;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT year FROM cars_data WHERE weight >= 3000 AND weight <= 4000;,SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;,SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000,SELECT DISTINCT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000,SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000 GROUP BY Year,select year from cars_data where weight <= 3000 and weight <= 4000,select year from cars_data where weight between 3000 and 4000,select cars_data.year from cars_data where  cars_data.weight between 3000 and 4000
select distinct year from cars_data where weight between 3000 and 4000;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT DISTINCT cars_data.year FROM cars_data WHERE cars_data.weight < 4000 INTERSECT SELECT DISTINCT cars_data.year FROM cars_data WHERE cars_data.weight > 3000;,SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 AND Year IN (   SELECT Year   FROM cars_data   WHERE Weight > 3000 );,SELECT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT Year FROM cars_data WHERE Weight > 3000,SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000,SELECT YEAR FROM cars_data WHERE Weight < 4000 AND Weight > 3000 GROUP BY YEAR,select distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000,select distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000,select distinct cars_data.year from cars_data where  cars_data.weight < 4000 and cars_data.weight > 3000
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MAX(horsepower) FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);,SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);,SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1,SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data),SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1,select horsepower from cars_data order by accelerate desc limit 1,select horsepower from cars_data order by accelerate desc limit 1,select cars_data.horsepower from cars_data   order by cars_data.accelerate desc limit 1
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MAX(horsepower) FROM cars_data WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data);,SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);,SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1,SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data),SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1,select horsepower from cars_data order by accelerate desc limit 1,select horsepower from cars_data order by accelerate desc limit 1,select cars_data.horsepower from cars_data   order by cars_data.accelerate desc limit 1
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MIN(cars_data.cylinders) FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE model_list.model = 'volvo' ORDER BY cars_data.accelerate LIMIT 1;,SELECT Cylinders FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model WHERE ml.Model = 'volvo' ORDER BY cd.Accelerate ASC LIMIT 1;,SELECT Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Model = 'volvo' ORDER BY T1.Accelerate ASC LIMIT 1;,SELECT T3.Cylinders FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model JOIN cars_data AS T3 ON T2.MakeId  =  T3.Id WHERE T3.Accelerate  =  (SELECT min(T3.Accelerate) FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model  =  T2.Model JOIN cars_data AS T3 ON T2.MakeId  =  T3.Id WHERE T1.Model  =  'volvo') AND T1.Model  =  'volvo',"SELECT MIN(Accelerate), Cylinders FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo') GROUP BY Cylinders ORDER BY Accelerate ASC LIMIT 1",select cylinders from cars_data where model = 'Volvo' order by accelerate limit 1;.030 sec,select count(*) from cars_data where model = 'Volvo' and accelerate = (select min(accelerate) from cars_data where model = 'Volvo',"select cars_data.cylinders from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  model_list.model = ""volvo""   order by cars_data.accelerate asc limit 1"
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT cylinders FROM model_list JOIN car_makers ON model_list.maker = car_makers.id JOIN car_names ON car_names.model = model_list.model JOIN cars_data ON cars_data.id = car_names.makeid WHERE model_list.model = 'volvo' ORDER BY cars_data.accelerate ASC LIMIT 1;,SELECT Cylinders FROM cars_data WHERE Id IN (   SELECT MakeId   FROM car_names   WHERE Model = 'volvo' ) ORDER BY Accelerate ASC LIMIT 1;,SELECT Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T3.Maker = (SELECT Id FROM car_makers WHERE Maker = 'volvo') ORDER BY T1.Accelerate ASC LIMIT 1;,SELECT T4.Cylinders FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = 'Volvo' ORDER BY T4.Accelerate ASC LIMIT 1,SELECT Cylinders FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model IN (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Maker = 'volvo'))) ORDER BY Accelerate ASC LIMIT 1,"select cars_data.cylinders from cars_data join model_list on cars_data.id = model_list.modelid where model_list.model = ""Volvo"" order by cars_data.accelerate limit 1","select count(*) from cars_data as t1 join model_list as t2 on t1.id = t2.modelid where t2.model = ""Volvo"" order by t1.accelerate limit 1","select cars_data.cylinders from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model where  model_list.model = ""volvo""   order by cars_data.accelerate asc limit 1"
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data),SELECT COUNT(*)  FROM cars_data c1 WHERE c1.Accelerate > (   SELECT c2.Accelerate   FROM cars_data c2   ORDER BY c2.Horsepower DESC   LIMIT 1 );,SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data ORDER BY Horsepower DESC LIMIT 1),SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT max(Horsepower) FROM cars_data),SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data ORDER BY Horsepower DESC LIMIT 1),select count(*) from cars_data where accelerate > (select max(accelerate) from cars_data),select count(*) from cars_data where accelerate > (select max(accelerate) from cars_data),select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )
SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data);,SELECT COUNT(*)  FROM cars_data WHERE Accelerate > (   SELECT Accelerate   FROM cars_data   ORDER BY Horsepower DESC   LIMIT 1 );,SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data ORDER BY Horsepower DESC LIMIT 1),SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data WHERE Horsepower = (SELECT max(Horsepower) FROM cars_data)),SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate FROM cars_data ORDER BY Horsepower DESC LIMIT 1),select count(*) from cars_data where accelerate > (select max(accelerate) from cars_data),select count(*) from cars_data where accelerate > (select max(accelerate) from cars_data),select count(*) from cars_data where  cars_data.accelerate > (select max(cars_data.accelerate) from cars_data  )
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT count(DISTINCT countries.countryname) FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryname HAVING COUNT(DISTINCT car_makers.id) > 2;,"SELECT COUNT(*) AS num_countries FROM (   SELECT c.CountryName, COUNT(*) AS num_makers   FROM countries c   JOIN car_makers cm ON c.CountryId = cm.Country   GROUP BY c.CountryName   HAVING COUNT(*) > 2 ) t;",SELECT count(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING count(*) > 2),"SELECT COUNT(DISTINCT Id), Country FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Id) > 2",SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2,select count(*) from (select country from car_makers group by country having count(*) > 2),select count(*) from car_makers group by country having count(*) > 2,select count(*) from car_makers  group by car_makers.Id having  count(*) > 2
select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryid HAVING COUNT(car_makers.id) > 2;,"SELECT COUNT(*) AS num_countries FROM (   SELECT c.CountryName, COUNT(cm.Id) AS num_car_makers   FROM countries c   JOIN car_makers cm ON c.CountryId = cm.Country   GROUP BY c.CountryName   HAVING COUNT(cm.Id) > 2 ) t;",SELECT count(*) FROM (SELECT Country FROM car_makers GROUP BY Country HAVING count(*) > 2),"SELECT count(T1.Id) ,  T2.CountryId FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country HAVING count(*)  >  2",SELECT COUNT(DISTINCT countries.CountryId) FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId HAVING COUNT(car_makers.Id) > 2,select count(*) from (select country from car_makers group by country having count(*) > 2),select count(*) from car_makers group by country having count(*) > 2,select count(*) from car_makers  group by car_makers.Id having  count(*) > 2
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;,SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;,SELECT count(*) FROM cars_data WHERE Cylinders > 6,SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6,SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;,select count(*) from cars_data where cylinders > 6,select count(*) from cars_data where cylinders > 6,select count(*) from cars_data where  cars_data.cylinders > 6
SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM cars_data WHERE cylinders > 6;,SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;,SELECT count(*) FROM cars_data WHERE Cylinders > 6;,SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6,SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;,select count(*) from cars_data where cylinders > 6,select count(*) from cars_data where cylinders > 6,select count(*) from cars_data where  cars_data.cylinders > 6
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1;,"SELECT Model, Horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;",SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1;,SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.Horsepower DESC LIMIT 1,"SELECT MAX(Horsepower), Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 4 GROUP BY Model ORDER BY MAX(Horsepower) DESC LIMIT 1",select car_names.model from cars_data join car_names on cars_data.id = car_names.model where cars_data.cylinders = 4 order by cars_data.horsepower desc limit 1,select t1.model from car_names as t1 join cars_data as t2 on t1.model = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1,select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model FROM model_list INNER JOIN cars_data ON model_list.modelid = cars_data.id WHERE cars_data.cylinders = 4 ORDER BY cars_data.horsepower DESC LIMIT 1;,"SELECT Model, Horsepower FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1;",SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Id = T2.ModelId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1;,SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1,"SELECT MAX(Horsepower), Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 4 GROUP BY Model ORDER BY MAX(Horsepower) DESC LIMIT 1",select car_names.model from cars_data join car_names on cars_data.id = car_names.model where cars_data.cylinders = 4 order by horsepower desc limit 1,select t1.model from car_names as t1 join cars_data as t2 on t1.model = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1,select car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders = 4   order by cars_data.horsepower desc limit 1
"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_names.makeid, car_names.make FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND cars_data.cylinders <= 3;","SELECT car_names.MakeId, car_names.Make FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;","SELECT MakeId, Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 3","SELECT T1.MakeId, T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T2.Cylinders <= 3","SELECT MakeId, Make FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 3)","select car_names.makeid, car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.horsepower > (select min(horsepower) from cars_data) and car_names.makeid not in (select id from cars_data where cylinders > 3)","select t1.makeid, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.horsepower > (select min(horsepower) from cars_data)","select car_names.makeid , car_names.make from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.horsepower > (select min(cars_data.Horsepower) from cars_data where  cars_data.cylinders > 3  )"
"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_makers.id, car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.modelid JOIN car_makers ON model_list.maker = car_makers.id WHERE cylinders < 4 AND horsepower > ( SELECT MIN(horsepower) FROM cars_data )","SELECT car_names.MakeId, car_names.Make FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;","SELECT MakeId, Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders < 4 AND Horsepower > (SELECT MIN(Horsepower) FROM cars_data)","SELECT T1.MakeId, T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T2.Cylinders < 4","SELECT MakeId, Model FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Cylinders < 4 AND Horsepower > (SELECT MIN(Horsepower) FROM cars_data))","select car_names.makeid, car_names.make from cars_data join car_names on cars_data.id = car_names.makeid where cars_data.cylinders < 4","select t1.makeid, t1.make from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t2.cylinders < 4","select car_names.make , car_names.model from cars_data join car_names on cars_data.Id = car_names.MakeId where  cars_data.cylinders < 4"
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980;,SELECT MAX(MPG)  FROM cars_data WHERE Cylinders = 8 OR Year < 1980;,SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980,SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980,SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980,select max(mpg) from cars_data where cylinders = 8 or year < 1980,select max(mpg) from cars_data where cylinders = 8 or year < 1980,select max(cars_data.mpg) from cars_data where  cars_data.cylinders = 8 or cars_data.year < 1980
select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980;,SELECT MAX(MPG) AS max_mpg FROM cars_data WHERE Cylinders = 8 OR Year < 1980;,SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980,SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980,SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980,select max(mpg) from cars_data where cylinders = 8 or year < 1980,select max(mpg) from cars_data where cylinders = 8 or year < 1980,select max(cars_data.mpg) from cars_data where  cars_data.cylinders = 8 or cars_data.year < 1980
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT car_names.model FROM model_list JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname <> 'Ford Motor Company';,SELECT Model  FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN cars_data cd ON ml.ModelId = cd.Id WHERE cd.Weight < 3500 AND cm.FullName != 'Ford Motor Company';,SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker != 'Ford Motor Company',SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Weight < 3500 AND T4.FullName != 'Ford Motor Company',SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.FullName <> 'Ford Motor Company',error,select model_list.model from model_list join car_makers as t1 join cars_data as t2 on t1.maker = t2.id where t2.weight < 3500 except select model from model_list as t1 join car_makers as t2 on t1.maker = t2.id where t2.fullname = 'Ford Motor Company',"select model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != ""Ford Motor Company"""
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT car_names.model FROM model_list INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id LEFT JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.fullname != 'Ford Motor Company';,SELECT DISTINCT Model  FROM model_list ml JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Weight < 3500 AND cm.FullName != 'Ford Motor Company',SELECT model FROM model_list WHERE ModelId IN (SELECT MakeId FROM cars_data WHERE Weight < 3500) AND Maker NOT IN (SELECT Id FROM car_makers WHERE Maker = 'Ford'),SELECT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN car_makers AS T4 ON T1.Maker = T4.Id WHERE T3.Weight < 3500 AND T4.Maker != 'Ford Motor Company',SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500 AND car_makers.Maker <> 'ford',"select distinct model_list.model from model_list join cars_data on model_list.modelid = cars_data.id join car_makers on model_list.maker = car_makers.id where car_makers.fullname!= ""Ford Motor Company"" and cars_data.weight < 3500","select distinct t1.model from model_list as t1 join cars_data as t2 on t1.model = t2.id where t2.weight < 3500 except select distinct t1.model from model_list as t1 join car_makers as t2 on t1.maker = t2.id where t2.fullname = ""Ford Motor Company""","select distinct model_list.model from cars_data join car_names on cars_data.Id = car_names.MakeId join model_list on car_names.Model = model_list.Model join car_makers on model_list.Maker = car_makers.Id where  cars_data.weight < 3500 and car_makers.fullname != ""Ford Motor Company"""
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT countries.countryname FROM countries WHERE countries.countryid NOT IN (SELECT car_makers.country FROM car_makers);,SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL;,SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers),SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers),SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL,select countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country,select countryname from countries where countryid not in (select country from car_makers),select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT countryname FROM countries WHERE countryid NOT IN ( SELECT country FROM car_makers );,SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL;,SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers),SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers),SELECT countries.CountryName FROM countries LEFT JOIN car_makers ON countries.CountryId = car_makers.Country WHERE car_makers.Id IS NULL,select countryname from countries except select countries.countryname from countries join car_makers on countries.countryid = car_makers.country,select countryname from countries where countryid not in (select country from car_makers),select countries.countryname from countries where  countries.countryid not in (select car_makers.Country from car_makers  )
"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_makers.id, car_makers.maker FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(model_list.model) >= 2 AND COUNT(DISTINCT car_makers.id) > 3;","SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(DISTINCT cm.Maker) > 3;","SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.CountryId HAVING COUNT(*) > 3","SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING count(*) >= 2 AND count(*) > 3","SELECT COUNT(model_list.Maker) AS ModelCount, car_makers.Id, car_makers.Maker FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.Id, car_makers.Maker HAVING ModelCount >= 2 AND COUNT(DISTINCT car_makers.Id) > 3","select car_makers.id, car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count(*) >= 2 intersect select car_makers.id, car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count(*) > 3","select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 3","select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2"
"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_makers.id, car_makers.maker FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.model = car_names.model INNER JOIN cars_data ON car_names.makeid = cars_data.id GROUP BY car_makers.id, car_makers.maker HAVING COUNT(DISTINCT model_list.model) >= 2 AND COUNT(DISTINCT cars_data.id) > 3;","SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(cn.MakeId) > 3;","SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN cars_data AS T3 ON T2.ModelId = T3.Id GROUP BY T1.Id HAVING COUNT(DISTINCT T2.Model) >= 2 AND COUNT(T3.Id) > 3","SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.Model = T3.Model GROUP BY T1.Id HAVING count(DISTINCT T2.Model) >= 2 AND count(T3.Make) > 3","SELECT car_makers.Id, car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model GROUP BY car_makers.Id HAVING COUNT(DISTINCT model_list.Model) >= 2 AND COUNT(car_names.MakeId) > 3","select car_makers.id, car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count(*) >= 2 intersect select car_makers.id, car_makers.maker from car_makers join model_list on car_makers.id = model_list.maker group by car_makers.id having count(*) > 3","select t1.id, t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count(*) >= 2 intersect select t1.id, t1.maker from car_makers as t1 join car_names as t2 on t1.id = t2.makeid group by t1.id having count(*) >= 3","select car_makers.id , car_makers.maker from model_list join car_makers on model_list.Maker = car_makers.Id  group by car_makers.id having  count(*) >= 2"
"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT countries.countryid, countries.countryname FROM countries WHERE countries.countryid IN ( SELECT car_makers.country FROM car_makers GROUP BY car_makers.country HAVING COUNT(*) > 3 ) OR countries.countryid IN ( SELECT car_makers.country FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model WHERE car_names.make = 'fiat' );","SELECT c.CountryId, c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY c.CountryId, c.CountryName HAVING COUNT(cm.Id) > 3 OR SUM(CASE WHEN ml.Model = 'fiat' THEN 1 ELSE 0 END) > 0;","SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 3) OR CountryId IN (SELECT Country FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE Model = 'fiat'))","SELECT T1.CountryId, T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId, T1.CountryName  HAVING COUNT(*) > 3  UNION  SELECT T1.CountryId, T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  JOIN model_list AS T3 ON T2.Id = T3.Maker  WHERE T3.Model = 'fiat'","SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country LEFT JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Model = 'fiat' OR countries.CountryId IN (   SELECT Country   FROM car_makers   GROUP BY Country   HAVING COUNT(Id) > 3 )","select countries.countryid, countries.countryname from car_makers join countries on car_makers.country = countries.countryid group by countries.countryid having count(*) > 3 union select countries.countryid, countries.countryname from car_makers join countries on car_makers.country = countries.countryid where car_makers.maker = ""Fiat""","select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.maker = ""fiat"" group by t1.countryid having count(*) > 3 union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.maker = ""Fiat""","select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) > 3  union select countries.countryid , countries.countryname from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = ""fiat"""
"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT countryid, countryname FROM countries WHERE countryid IN (SELECT country FROM car_makers GROUP BY country HAVING COUNT(*) > 3) OR countryid IN (SELECT country FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker INNER JOIN car_names ON model_list.modelid = car_names.model WHERE car_names.make = ""fiat"");","SELECT c.CountryId, c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country LEFT JOIN model_list ml ON cm.Id = ml.Maker WHERE ml.Model = 'fiat' OR c.CountryId IN (   SELECT Country   FROM car_makers   GROUP BY Country   HAVING COUNT(*) > 3 );","SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) OR CountryId IN (SELECT Country FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE Model = 'Fiat'))","SELECT T1.CountryId, T1.CountryName  FROM countries AS T1  JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T1.CountryId, T1.CountryName  HAVING COUNT(*) > 3","SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country LEFT JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Model = 'fiat' OR countries.CountryId IN (     SELECT Country     FROM car_makers     GROUP BY Country     HAVING COUNT(Id) > 3 )","select countries.countryid, countries.countryname from countries join car_makers on countries.countryid = car_makers.country where car_makers.maker = ""Fiat"" group by countries.countryid having count(*) > 3 union select countries.countryid, countries.countryname from countries join model_list on countries.countryid = model_list.maker where model_list.model = ""Fiat""","select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.maker = ""Fiat"" union select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.maker = ""Made in Italy""","select countries.countryid , countries.countryname from car_makers join countries on car_makers.Country = countries.CountryId  group by countries.countryid having  count(*) > 3  union select countries.countryid , countries.countryname from model_list join car_makers on model_list.Maker = car_makers.Id join countries on car_makers.Country = countries.CountryId where  model_list.model = ""Fiat"""
"SELECT Country FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT country FROM airlines WHERE airline = ""JetBlue Airways"";",SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';,"SELECT Country FROM airlines WHERE Airline = ""JetBlue Airways""",SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways',SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways',select country from airlines where airline = 'JetBlue Airways',"select country from airlines where airline = ""JetBlue Airways""","select airlines.country from airlines where  airlines.airline = ""JetBlue Airways"""
"SELECT Country FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT country FROM airlines WHERE airline = 'JetBlue Airways';,SELECT Country  FROM airlines WHERE Airline = 'JetBlue Airways';,"SELECT Country FROM airlines WHERE Airline = ""Jetblue Airways"";",SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways',SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';,select country from airlines where airline = 'JetBlue Airways',select country from airlines where airline = 'JetBlue Airways',"select airlines.country from airlines where  airlines.airline = ""JetBlue Airways"""
"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';,SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';,"SELECT Abbreviation FROM airlines WHERE Airline = ""JetBlue Airways""",SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways',SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways',select abbreviation from airlines where airline = 'JetBlue Airways',"select abbreviation from airlines where airline = ""JetBlue Airways""","select airlines.abbreviation from airlines where  airlines.airline = ""JetBlue Airways"""
"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';,SELECT Abbreviation  FROM airlines WHERE Airline = 'JetBlue Airways';,"SELECT Abbreviation FROM airlines WHERE Airline = ""Jetblue Airways"";",SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways',SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';,select abbreviation from airlines where airline = 'JetBlue Airways',"select abbreviation from airlines where airline = ""JetBlue Airways""","select airlines.abbreviation from airlines where  airlines.airline = ""JetBlue Airways"""
"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  ""USA""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT airline, abbreviation FROM airlines WHERE country = ""USA"";","SELECT Airline, Abbreviation  FROM airlines WHERE Country = 'USA';","SELECT Airline, Abbreviation FROM airlines WHERE Country = ""USA""","SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'","SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';","select airline, abbreviation from airlines where country = 'USA'","select airline, abbreviation from airlines where country = 'USA'","select airlines.airline , airlines.abbreviation from airlines where  airlines.country = ""USA"""
"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  ""USA""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT airline, abbreviation FROM airlines WHERE country = 'USA';","SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';","SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'","SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'","SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'","select airline, abbreviation from airlines where country = 'USA'","select airline, abbreviation from airlines where country = 'USA'","select airlines.airline , airlines.abbreviation from airlines where  airlines.country = ""USA"""
"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  ""Anthony""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT airportcode, airportname FROM airports WHERE city = ""Anthony"";","SELECT AirportCode, AirportName  FROM airports WHERE City LIKE 'Anthony%';","SELECT AirportCode, AirportName FROM airports WHERE City = ""Anthony""","SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'","SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';","select airportcode, airportname from airports where city = 'Anthony'","select airportcode, airportname from airports where city = 'Anthony'","select airports.airportcode , airports.airportname from airports where  airports.city = ""Anthony"""
"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  ""Anthony""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';","SELECT AirportCode, AirportName  FROM airports WHERE City LIKE 'Anthony%';","SELECT AirportCode, AirportName FROM airports WHERE City = ""Anthony""","SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'","SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';","select airportcode, airportname from airports where city = 'Anthony'","select airportcode, airportname from airports where city = 'Anthony'","select airports.airportcode , airports.airportname from airports where  airports.city = ""Anthony"""
SELECT count(*) FROM AIRLINES,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM airlines;,SELECT COUNT(*) FROM airlines;,SELECT count(*) FROM airlines,SELECT COUNT(*) FROM airlines,SELECT COUNT(*) FROM airlines,select count(*) from airlines,select count(*) from airlines,select count(*) from airlines
SELECT count(*) FROM AIRLINES,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT count(*) FROM airlines;,SELECT COUNT(*) FROM airlines;,SELECT count(*) FROM airlines,SELECT COUNT(*) FROM airlines,SELECT COUNT(*) FROM airlines,select count(*) from airlines,select count(*) from airlines,select count(*) from airlines
SELECT count(*) FROM AIRPORTS,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM airports;,SELECT COUNT(*) FROM airports;,SELECT count(*) FROM airports,SELECT COUNT(*) FROM airports,SELECT COUNT(*) FROM airports,select count(*) from airports,select count(*) from airports,select count(*) from airports
SELECT count(*) FROM AIRPORTS,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM airports;,SELECT COUNT(*) FROM airports;,SELECT count(*) FROM airports,SELECT COUNT(*) FROM airports,SELECT COUNT(*) FROM airports;,select count(*) from airports,select count(*) from airports,select count(*) from airports
SELECT count(*) FROM FLIGHTS,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights;,SELECT COUNT(*) FROM flights;,SELECT count(*) FROM flights,SELECT COUNT(*) FROM flights,SELECT COUNT(*) FROM flights,select count(*) from flights,select count(*) from flights,select count(*) from flights
SELECT count(*) FROM FLIGHTS,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights;,SELECT COUNT(*) FROM flights,SELECT count(*) FROM flights,SELECT COUNT(*) FROM flights,SELECT COUNT(*) FROM flights;,select count(*) from flights,select count(*) from flights,select count(*) from flights
"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  ""UAL""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airline FROM airlines WHERE abbreviation = 'UAL';,SELECT Airline  FROM airlines WHERE Abbreviation = 'UAL';,SELECT Airline FROM airlines WHERE Abbreviation = 'UAL',SELECT Airline FROM airlines WHERE Abbreviation = 'UAL',SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';,select airline from airlines where abbreviation = 'UAL',select airline from airlines where abbreviation = 'UAL',"select airlines.airline from airlines where  airlines.abbreviation = ""UAL"""
"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  ""UAL""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airline FROM airlines WHERE abbreviation = 'UAL';,SELECT Airline  FROM airlines WHERE Abbreviation = 'UAL';,SELECT Airline FROM airlines WHERE Abbreviation = 'UAL',SELECT Airline FROM airlines WHERE Abbreviation = 'UAL',SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';,select airline from airlines where abbreviation = 'UAL',select airline from airlines where abbreviation = 'UAL',"select airlines.airline from airlines where  airlines.abbreviation = ""UAL"""
"SELECT count(*) FROM AIRLINES WHERE Country  =  ""USA""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT COUNT(*) FROM airlines WHERE country = ""USA"";",SELECT COUNT(*) FROM airlines WHERE Country = 'USA';,SELECT count(*) FROM airlines WHERE Country = 'USA',SELECT COUNT(*) FROM airlines WHERE Country = 'USA',SELECT COUNT(*) FROM airlines WHERE Country = 'USA';,select count(*) from airlines where country = 'USA',select count(*) from airlines where country = 'USA',"select count(*) from airlines where  airlines.country = ""USA"""
"SELECT count(*) FROM AIRLINES WHERE Country  =  ""USA""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM airlines WHERE country = 'USA';,SELECT COUNT(*) FROM airlines WHERE Country = 'USA';,SELECT count(*) FROM airlines WHERE Country = 'USA',SELECT COUNT(*) FROM airlines WHERE Country = 'USA',SELECT COUNT(*) FROM airlines WHERE Country = 'USA';,select count(*) from airlines where country = 'USA',select count(*) from airlines where country = 'USA',"select count(*) from airlines where  airlines.country = ""USA"""
"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  ""Alton""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT city, country FROM airports WHERE airportname = ""Alton"";","SELECT City, Country  FROM airports WHERE AirportName = 'Alton';","SELECT City, Country FROM airports WHERE AirportName = 'Alton'","SELECT City, Country FROM airports WHERE AirportName = 'Alton'","SELECT City, Country FROM airports WHERE AirportName = 'Alton';","select city, country from airports where airportname = 'Alton'","select city, country from airports where airportname = ""Alton""","select airports.city , airports.country from airports where  airports.airportname = ""Alton"""
"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  ""Alton""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT city, country FROM airports WHERE airportname = 'Alton';","SELECT City, Country  FROM airports WHERE AirportName = 'Alton';","SELECT City, Country FROM airports WHERE AirportName = 'Alton'","SELECT City, Country FROM airports WHERE AirportName = 'Alton'","SELECT City, Country FROM airports WHERE AirportName = 'Alton';","select city, country from airports where airportname = 'Alton'","select city, country from airports where airportname = ""Alton""","select airports.city , airports.country from airports where  airports.airportname = ""Alton"""
"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  ""AKO""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airportname FROM airports WHERE airportcode = 'AKO';,SELECT AirportName FROM airports WHERE AirportCode = 'AKO';,"SELECT AirportName FROM airports WHERE AirportCode = ""AKO""",SELECT AirportName FROM airports WHERE AirportCode = 'AKO',SELECT AirportName FROM airports WHERE AirportCode = 'AKO',select airportname from airports where airportcode = 'AKO',select airportname from airports where airportcode = 'AKO',"select airports.airportname from airports where  airports.airportcode = ""AKO"""
"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  ""AKO""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airportname FROM airports WHERE airportcode = 'AKO';,SELECT AirportName FROM airports WHERE AirportCode = 'AKO';,SELECT AirportName FROM airports WHERE AirportCode = 'AKO',SELECT AirportName FROM airports WHERE AirportCode = 'AKO',SELECT AirportName FROM airports WHERE AirportCode = 'AKO',select airportname from airports where airportcode = 'AKO',select airportname from airports where airportcode = 'AKO',"select airports.airportname from airports where  airports.airportcode = ""AKO"""
"SELECT AirportName FROM AIRPORTS WHERE City = ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airportname FROM airports WHERE city = 'Aberdeen';,SELECT AirportName FROM airports WHERE City LIKE 'Aberdeen%';,"SELECT AirportName FROM airports WHERE City = ""Aberdeen""",SELECT AirportName FROM airports WHERE City = 'Aberdeen',SELECT AirportName FROM airports WHERE City = 'Aberdeen';,select airportname from airports where city = 'Aberdeen',select airportname from airports where city = 'Aberdeen',"select airports.airportname from airports where  airports.city = ""Aberdeen"""
"SELECT AirportName FROM AIRPORTS WHERE City = ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airportname FROM airports WHERE city = 'Aberdeen';,SELECT AirportName FROM airports WHERE City = 'Aberdeen';,"SELECT AirportName FROM airports WHERE City = ""Aberdeen""",SELECT AirportName FROM airports WHERE City = 'Aberdeen',SELECT AirportName FROM airports WHERE City = 'Aberdeen';,select airportname from airports where city = 'Aberdeen',select airportname from airports where city = 'Aberdeen',"select airports.airportname from airports where  airports.city = ""Aberdeen"""
"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  ""APG""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';,SELECT COUNT(*)  FROM flights WHERE SourceAirport = 'APG';,SELECT count(*) FROM flights WHERE SourceAirport = 'APG',SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG',SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG',select count(*) from flights where destairport = 'APG',select count(*) from flights where sourceairport = 'APG',"select count(*) from flights where  flights.sourceairport = ""APG"""
"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  ""APG""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';,SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';,SELECT count(*) FROM flights WHERE SourceAirport = 'APG',SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG',SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG',"select count(*) from flights where destairport = ""APG""",select count(*) from flights where sourceairport = 'APG',"select count(*) from flights where  flights.sourceairport = ""APG"""
"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';,SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';,"SELECT count(*) FROM flights WHERE DestAirport = ""ATO""",SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO',SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO',select count(*) from airports join flights on airports.airportcode = flights.destairport where airports.airportcode = 'ATO',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.destairport where t1.airportcode = 'ATO',"select count(*) from flights where  flights.destairport = ""ATO"""
"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';,SELECT COUNT(*) AS num_flights_into_ATO FROM flights WHERE DestAirport = 'ATO';,SELECT count(*) FROM flights WHERE DestAirport = 'ATO',SELECT count(*) FROM flights WHERE DestAirport = 'ATO',SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO',select count(*) from airports join flights on airports.airportcode = flights.sourceairport where airports.airportcode = 'ATO',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.airportcode = 'ATO',"select count(*) from flights where  flights.sourceairport = ""ATO"""
"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';,SELECT COUNT(*)  FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';,SELECT count(*) FROM flights INNER JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen',SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',SELECT COUNT(f.FlightNo) FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';,select count(*) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = 'Aberdeen',"select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"""
"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');,SELECT COUNT(*)  FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');,SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen',SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',SELECT COUNT(*) FROM flights WHERE SourceAirport = 'ABR',select count(*) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = 'Aberdeen',"select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"""
"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen',SELECT COUNT(*)  FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen';,SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'),SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';,select count(*) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = 'Aberdeen',"select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"""
"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';,SELECT COUNT(*)  FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');,SELECT count(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'),SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',SELECT COUNT(*) FROM flights WHERE DestAirport = 'ABR',select count(*) from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = 'Aberdeen',"select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"""
"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  ""Ashley"" AND T3.City  =  ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights f JOIN airports a1 ON f.sourceairport = a1.airportcode JOIN airports a2 ON f.destairport = a2.airportcode WHERE a1.city = 'Aberdeen' AND a2.city = 'Ashley';,SELECT COUNT(*)  FROM flights f JOIN airports a1 ON f.SourceAirport = a1.AirportCode JOIN airports a2 ON f.DestAirport = a2.AirportCode WHERE a1.City = 'Aberdeen' AND a2.City = 'Ashley';,SELECT count(*) FROM flights AS F JOIN airports AS S ON F.SourceAirport = S.AirportCode JOIN airports AS D ON F.DestAirport = D.AirportCode WHERE S.City = 'Aberdeen' AND D.City = 'Ashley',SELECT count(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Ashley'),SELECT COUNT(f.FlightNo) FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.City = 'Ashley',select count(*) from flights where sourceairport = 'Aberdeen' and destairport = 'Ashley',select count(*) from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen' and t2.city = 'Ashley',"select count(*) from flights where  flights.destairport in (select airports.AirportCode from airports where  airports.city = ""Aberdeen""   intersect select airports.AirportCode from airports where  airports.city = ""Ashley""   )"
"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  ""Ashley"" AND T3.City  =  ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = ""Aberdeen"") AND destairport IN (SELECT airportcode FROM airports WHERE city = ""Ashley"");",SELECT COUNT(*)  FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen')   AND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Ashley');,SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley',SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley',SELECT COUNT(*) FROM flights f JOIN airports src ON f.SourceAirport = src.AirportCode JOIN airports dest ON f.DestAirport = dest.AirportCode WHERE src.City = 'Aberdeen' AND dest.AirportName = 'Ashley',select count(*) from flights join airports on flights.sourceairport = airports.airportcode where airports.city = 'Aberdeen' and airports.airportname = 'Ashley',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = 'Aberdeen' and t1.airportname = 'Ashley',"select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"" and airports.airportname = ""Ashley"""
"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = ""JetBlue Airways""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights WHERE airline = 'JetBlue Airways';,SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');,SELECT count(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'JetBlue Airways',SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'JetBlue Airways',SELECT COUNT(f.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways';,"select count(*) from airlines join flights on airlines.uid = flights.airline where airlines.airline = ""JetBlue Airways""",select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t1.airline = 'JetBlue Airways',"select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = ""JetBlue Airways"""
"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = ""JetBlue Airways""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights f JOIN airlines a ON f.airline = a.airline WHERE a.abbreviation = 'JetBlue';,SELECT COUNT(*)  FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways';,"SELECT count(*) FROM flights AS F JOIN airlines AS A ON F.Airline = A.uid WHERE A.Airline = ""Jetblue Airways""",SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'Jetblue Airways',SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'JetBlue Airways',select count(*) from airlines join flights on airlines.uid = flights.airline where airlines.airline = 'JetBlue Airways',"select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t1.airline = ""JetBlue Airways""","select count(*) from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = ""JetBlue Airways"""
"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.DestAirport  =  ""ASY""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT count(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';,SELECT COUNT(*)  FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY';,SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines' AND T1.DestAirport = 'ASY',SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY',SELECT COUNT(f.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY',select count(*) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.airportcode = 'ASY' and airlines.airline = 'United Airlines',select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'ASY' and t1.airline = 'United Airlines',"select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.airportcode = ""ASY"" and airlines.airline = ""United Airlines"""
"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.DestAirport  =  ""ASY""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND destairport = 'ASY';,SELECT COUNT(*)  FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY';,"SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = ""United Airlines"") AND DestAirport = ""ASY""",SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY',SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY',"select count(*) from flights join airports on flights.destairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.airportcode = ""ASY"" and airlines.airline = ""United Airlines""","select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = ""ASY"" and t1.airline = ""United Airlines""","select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""ASY"" and airlines.airline = ""United Airlines"""
"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.SourceAirport  =  ""AHD""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights WHERE airline = 'United Airlines' AND sourceairport = 'AHD';,SELECT COUNT(*)  FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';,SELECT count(*) FROM flights AS t1 JOIN airlines AS t2 ON t1.Airline = t2.uid WHERE t2.Airline = 'United Airlines' AND t1.SourceAirport = 'AHD',SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD',SELECT COUNT(f.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD',select count(*) from flights join airports on flights.sourceairport = airports.airportcode join airlines on flights.airline = airlines.uid where airports.airportcode = 'AHD' and airlines.airline = 'United Airlines',select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'AHD' and t1.airline = 'United Airlines',"select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""AHD"" and airlines.airline = ""United Airlines"""
"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.SourceAirport  =  ""AHD""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT COUNT(*) FROM flights WHERE airline = ""United Airlines"" AND sourceairport = ""AHD"";",SELECT COUNT(*)  FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';,SELECT count(*) FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = 'AHD',SELECT COUNT(FlightNo) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD',SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.SourceAirport = 'AHD',select count(*) from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'AHD' and airlines.airline = 'United Airlines',select count(*) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'AHD' and t1.airline = 'United Airlines',"select count(*) from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""AHD"" and airlines.airline = ""United Airlines"""
"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  ""Aberdeen"" AND T3.Airline  =  ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'United Airlines' AND airports.city = 'Aberdeen';,SELECT COUNT(*)  FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen';,SELECT count(*) FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'),SELECT count(T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.City = 'Aberdeen',SELECT COUNT(f.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen';,select count(*) from airports join flights on airports.airportcode = flights.sourceairport join airlines on flights.airline = airlines.uid where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = 'Aberdeen' and t2.airline = 'United Airlines',"select count(*) from flights join airports on flights.DestAirport = airports.AirportCode join airlines on airports.Country = airlines.Country where  airports.city = ""Aberdeen"" and airlines.airline = ""United Airlines"""
"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  ""Aberdeen"" AND T3.Airline  =  ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = ""Aberdeen"" AND flights.airline = ""United Airlines"";",SELECT COUNT(*)  FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen';,SELECT count(*) FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'),SELECT count(T1.FlightNo) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.Airline = 'United Airlines' AND T2.City = 'Aberdeen',SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';,select count(*) from airports join flights on airports.airportcode = flights.destairport join airlines on flights.airline = airlines.uid where airports.city = 'Aberdeen' and airlines.airline = 'United Airlines',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport join airlines as t3 on t2.airline = t3.uid where t1.city = 'Aberdeen' and t3.airline = 'United Airlines',"select count(*) from airlines join airports on airlines.uid = airports.AirportCode where  airports.city = ""Aberdeen"" and airlines.airline = ""United Airlines"""
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1;,SELECT City FROM airports WHERE AirportCode = (   SELECT DestAirport   FROM flights   GROUP BY DestAirport   ORDER BY COUNT(*) DESC   LIMIT 1 );,SELECT City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY count(*) DESC LIMIT 1;,SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"SELECT COUNT(f.DestAirport) AS NumberOfArrivingFlights, a.City FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode GROUP BY a.City ORDER BY NumberOfArrivingFlights DESC LIMIT 1",select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by airports.city order by count(*) desc limit 1,select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1,select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airports.city FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1;,SELECT City FROM airports WHERE AirportCode = (   SELECT DestAirport   FROM flights   GROUP BY DestAirport   ORDER BY COUNT(*) DESC   LIMIT 1 );,SELECT City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY count(T2.DestAirport) DESC LIMIT 1,"SELECT City, COUNT(DestAirport) AS DestinationCount FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode GROUP BY City ORDER BY DestinationCount DESC LIMIT 1;",select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count(*) desc limit 1,select city from airports group by city order by count(*) desc limit 1,select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT city FROM airports WHERE airportcode IN ( SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1 ),SELECT a.City FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY COUNT(*) DESC LIMIT 1;,SELECT City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY count(*) DESC LIMIT 1,SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"SELECT COUNT(f.FlightNo) AS NumberOfDepartingFlights, a.City FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode GROUP BY a.City ORDER BY NumberOfDepartingFlights DESC LIMIT 1",select airports.city from airports join flights on airports.airportcode = flights.destairport group by airports.city order by count(*) desc limit 1,select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.city order by count(*) desc limit 1,select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airports.city FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(*) DESC LIMIT 1;,SELECT City FROM airports WHERE AirportCode = (   SELECT SourceAirport   FROM flights   GROUP BY SourceAirport   ORDER BY COUNT(*) DESC   LIMIT 1 );,SELECT City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY flights.SourceAirport ORDER BY count(*) DESC LIMIT 1,SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"SELECT City, COUNT(flights.SourceAirport) AS Frequency FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY Frequency DESC LIMIT 1",select airports.city from airports join flights on airports.airportcode = flights.sourceairport group by flights.sourceairport order by count(*) desc limit 1,select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t2.sourceairport order by count(*) desc limit 1,select airports.city from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.city  order by count(*) desc limit 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airports.airportcode FROM airports INNER JOIN flights ON airports.airportcode = flights.destairport GROUP BY airports.airportcode ORDER BY COUNT(flights.flightno) DESC LIMIT 1;,"SELECT AirportCode FROM (   SELECT SourceAirport AS AirportCode, COUNT(*) AS FlightCount   FROM flights   GROUP BY SourceAirport   UNION ALL   SELECT DestAirport AS AirportCode, COUNT(*) AS FlightCount   FROM flights   GROUP BY DestAirport ) AS AirportFlights GROUP BY AirportCode ORDER BY SUM(FlightCount) DESC LIMIT 1;",SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1,SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,"SELECT COUNT(flights.FlightNo) AS FlightCount, flights.DestAirport  FROM flights  GROUP BY flights.DestAirport  ORDER BY FlightCount DESC  LIMIT 1",select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by flights.sourceairport order by count(*) desc limit 1,select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) desc limit 1,select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT AirportCode FROM (   SELECT SourceAirport AS AirportCode, COUNT(*) AS FlightCount   FROM flights   GROUP BY SourceAirport   UNION ALL   SELECT DestAirport AS AirportCode, COUNT(*) AS FlightCount   FROM flights   GROUP BY DestAirport ) AS AirportFlights ORDER BY FlightCount DESC LIMIT 1;",SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1,SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON (T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport) GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,"SELECT COUNT(flights.FlightNo) AS FlightCount, flights.SourceAirport FROM flights GROUP BY flights.SourceAirport ORDER BY FlightCount DESC LIMIT 1;",select airports.airportcode from airports join flights on airports.airportcode = flights.sourceairport group by flights.sourceairport order by count(*) desc limit 1,select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t1.airportcode order by count(*) desc limit 1,select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) desc limit 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airportcode FROM airports ORDER BY (SELECT COUNT(*) FROM flights WHERE destairport = airports.airportcode OR sourceairport = airports.airportcode) ASC LIMIT 1;,SELECT a.AirportCode FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport GROUP BY a.AirportCode ORDER BY COUNT(f.FlightNo) ASC LIMIT 1;,SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) ASC LIMIT 1,SELECT T1.AirportCode FROM airports AS T1 LEFT JOIN flights AS T2 ON T1.AirportCode  =  T2.SourceAirport OR T1.AirportCode  =  T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) ASC LIMIT 1,"SELECT AirportCode, COUNT(*) AS FlightCount FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport GROUP BY AirportCode ORDER BY FlightCount ASC LIMIT 1",select airportcode from airports group by airportcode order by count(*) limit 1,select airportcode from airports group by airportcode order by count(*) limit 1,select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1
SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airportname FROM airports WHERE airportcode IN ( SELECT sourceairport FROM flights GROUP BY sourceairport HAVING COUNT(*) = ( SELECT MIN(count) FROM ( SELECT COUNT(*) as count FROM flights GROUP BY sourceairport ) ) ) LIMIT 1;,SELECT AirportCode FROM airports WHERE AirportCode = (   SELECT DestAirport   FROM flights   GROUP BY DestAirport   ORDER BY COUNT(*) ASC   LIMIT 1 );,SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) ASC LIMIT 1,"SELECT AirportCode FROM (SELECT AirportCode, count(*) as num_flights FROM (SELECT SourceAirport as AirportCode FROM flights UNION ALL SELECT DestAirport as AirportCode FROM flights) AS T1 GROUP BY AirportCode) AS T2 ORDER BY num_flights ASC LIMIT 1","SELECT MIN(COUNT(f.DestAirport)) AS MinimumFlights, a.AirportCode FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode OR f.SourceAirport = a.AirportCode GROUP BY a.AirportCode ORDER BY MinimumFlights ASC LIMIT 1",select airportcode from airports group by airportcode order by count(*) limit 1,select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport group by t2.sourceairport order by count(*) limit 1,select airports.airportcode from flights join airports on flights.DestAirport = airports.AirportCode  group by airports.airportcode  order by count(*) asc limit 1
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;",SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1,SELECT Airline FROM flights GROUP BY Airline ORDER BY count(FlightNo) DESC LIMIT 1,"SELECT COUNT(f.FlightNo) AS NumberOfFlights, a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline ORDER BY NumberOfFlights DESC LIMIT 1",select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count(*) desc limit 1,select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1,select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT flights.airline FROM flights GROUP BY flights.airline ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT Airline, COUNT(*) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount DESC LIMIT 1;",SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) DESC LIMIT 1,SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1,"SELECT COUNT(f.FlightNo) AS FlightCount, a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline ORDER BY FlightCount DESC LIMIT 1",select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline order by count(*) desc limit 1,select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline order by count(*) desc limit 1,select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline  order by count(*) desc limit 1
"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT abbreviation, country FROM airlines WHERE uid IN ( SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1 )","SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country ORDER BY COUNT(*) ASC LIMIT 1;","SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline ORDER BY count(*) ASC LIMIT 1","SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid HAVING COUNT(*) = (SELECT COUNT(*) as flight_count FROM airlines AS T3 JOIN flights AS T4 ON T3.uid = T4.Airline GROUP BY T3.uid ORDER BY flight_count ASC LIMIT 1)","SELECT Airline, COUNT(FlightNo) AS FlightCount FROM flights GROUP BY Airline ORDER BY FlightCount ASC LIMIT 1;","select airlines.abbreviation, airlines.country from airlines join flights on airlines.uid = flights.airline group by flights.airline order by count(*) limit 1","select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t2.airline order by count(*) limit 1","select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.abbreviation  order by count(*) asc limit 1"
"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT abbreviation, country FROM airlines WHERE uid = ( SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(*) ASC LIMIT 1 );","SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country ORDER BY COUNT(f.FlightNo) ASC LIMIT 1;","SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T2.Airline ORDER BY count(*) ASC LIMIT 1","SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.uid, T1.Abbreviation, T1.Country HAVING COUNT(*) = (SELECT COUNT(*) as flight_count FROM airlines AS T3 JOIN flights AS T4 ON T3.uid = T4.Airline GROUP BY T3.uid ORDER BY flight_count ASC LIMIT 1)","SELECT Airline, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 )","select airlines.abbreviation, airlines.country from airlines join flights on airlines.uid = flights.airline group by airlines.uid order by count(*) limit 1","select t1.abbreviation, t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.country order by count(*) limit 1","select airlines.abbreviation , airlines.country from airlines join flights on airlines.uid = flights.Airline  group by airlines.country  order by count(*) asc limit 1"
"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""AHD""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';,SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';,SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'AHD'),SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD',SELECT Airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD' GROUP BY Airlines.Airline,select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD',select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'AHD',"select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""AHD"""
"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""AHD""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';,SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';,"SELECT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.SourceAirport = ""AHD""",SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.SourceAirport = 'AHD',SELECT Airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD',select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'AHD',select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'AHD',"select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""AHD"""
"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  ""AHD""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.airline = flights.airline INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'AHD';,SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';,SELECT Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD',SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD',SELECT Airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD',select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD',select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'AHD',"select airlines.airline from airlines join airports on airlines.uid = airports.AirportCode where  airports.airportcode = ""AHD"""
"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  ""AHD""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airlines.airline FROM flights JOIN airlines ON flights.airline = airlines.airline WHERE flights.destairport = 'AHD';,SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';,"SELECT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.DestAirport = ""AHD""",SELECT DISTINCT airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD',SELECT Airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE flights.DestAirport = 'AHD',select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'AHD',select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = 'AHD',"select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.destairport = ""AHD"""
"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG"" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights WHERE destairport = 'APG' ) AND airline IN ( SELECT airline FROM flights WHERE destairport = 'CVO' );,"SELECT DISTINCT Airline FROM flights WHERE SourceAirport IN ('APG', 'CVO') AND Airline IN (   SELECT Airline   FROM flights   WHERE SourceAirport = 'APG'   INTERSECT   SELECT Airline   FROM flights   WHERE SourceAirport = 'CVO' );","SELECT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.SourceAirport IN ('APG', 'CVO') GROUP BY a.Airline HAVING COUNT(DISTINCT f.SourceAirport) = 2",SELECT Airline FROM flights WHERE SourceAirport  =  'APG' INTERSECT SELECT Airline FROM flights WHERE SourceAirport  =  'CVO',SELECT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN airports ap1 ON f1.SourceAirport = ap1.AirportCode AND ap1.AirportCode = 'APG' JOIN flights f2 ON a.uid = f2.Airline JOIN airports ap2 ON f2.SourceAirport = ap2.AirportCode AND ap2.AirportCode = 'CVO' GROUP BY a.Airline,select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO',select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG' intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO',"select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""APG""   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""CVO"""
"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG"" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT airline FROM flights WHERE sourceairport IN ('APG', 'CVO') GROUP BY airline HAVING COUNT(DISTINCT sourceairport) = 2;","SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport IN ('APG', 'CVO');","SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = ""APG"" INTERSECT SELECT Airline FROM flights WHERE SourceAirport = ""CVO"")",SELECT Airline FROM flights WHERE SourceAirport  =  'APG' INTERSECT SELECT Airline FROM flights WHERE SourceAirport  =  'CVO',SELECT DISTINCT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN airports ap1 ON f1.SourceAirport = ap1.AirportCode AND ap1.AirportCode = 'APG' JOIN flights f2 ON a.uid = f2.Airline JOIN airports ap2 ON f2.SourceAirport = ap2.AirportCode AND ap2.AirportCode = 'CVO' WHERE f1.SourceAirport <> f2.SourceAirport,select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'APG' intersect select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO',select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG' intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO',"select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""APG""   intersect select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""CVO"""
"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO"" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airlines.airline FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.airportcode = 'CVO' AND airlines.airline NOT IN ( SELECT DISTINCT flights.airline FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'APG' );,SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO'   AND a.uid NOT IN (     SELECT Airline      FROM flights     WHERE SourceAirport = 'APG'   );,SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG'),SELECT Airline FROM flights WHERE SourceAirport  =  'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport  =  'APG',SELECT Airlines.Airline FROM Airlines JOIN Flights ON Airlines.uid = Flights.Airline WHERE Flights.SourceAirport = 'CVO' AND Airlines.uid NOT IN (   SELECT Airlines.uid   FROM Airlines   JOIN Flights ON Airlines.uid = Flights.Airline   WHERE Flights.SourceAirport = 'APG' ),"select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = ""CVO"" except select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = ""APG""",select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO' except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG',"select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""CVO""   except select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""APG"""
"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO"" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'CVO' AND airlines.airline NOT IN ( SELECT airlines.airline FROM airlines JOIN flights ON airlines.airline = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'APG' );,SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO'   AND a.uid NOT IN (     SELECT Airline      FROM flights     WHERE SourceAirport = 'APG'   );,SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.uid NOT IN ( SELECT Airline FROM flights WHERE SourceAirport = 'APG' ),SELECT Airline FROM flights WHERE SourceAirport = 'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport = 'APG',SELECT Airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO' AND flights.Airline NOT IN (   SELECT flights.Airline   FROM flights   WHERE flights.SourceAirport = 'APG' ),select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.sourceairport = 'CVO' except select airlines.airline from airlines join flights on airlines.uid = flights.airline where flights.destairport = 'APG',select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'CVO' except select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.sourceairport = 'APG',"select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""CVO""   except select airlines.airline from airlines join flights on airlines.uid = flights.Airline where  flights.sourceairport = ""APG"""
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10 );,SELECT Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY Airline HAVING COUNT(*) >= 10;,SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10,SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(T2.FlightNo) >= 10,"SELECT COUNT(f.FlightNo), a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY a.Airline HAVING COUNT(f.FlightNo) >= 10",select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count(*) >= 10,select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) >= 10,select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) >= 10;,SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;,SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10,SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) >= 10,"SELECT COUNT(f.FlightNo), a.Airline FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY f.Airline HAVING COUNT(f.FlightNo) >= 10",select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count(*) >= 10,select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) >= 10,select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) >= 10
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airline FROM airlines WHERE airline IN ( SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200 );,SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200;,SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200),SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING count(T2.FlightNo) < 200,"SELECT COUNT(f.FlightNo), a.Airline FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200",select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.uid having count(*) < 200,select airline from flights group by airline having count(*) < 200,select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airline FROM flights GROUP BY airline HAVING COUNT(*) < 200;,SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200;,SELECT T2.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid GROUP BY T1.Airline HAVING count(T1.FlightNo) < 200;,SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200,"SELECT COUNT(f.FlightNo), a.Airline FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200",select airlines.airline from airlines join flights on airlines.uid = flights.airline group by airlines.airline having count(*) < 200,select t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t1.airline having count(*) < 200,select airlines.airline from airlines join flights on airlines.uid = flights.Airline  group by airlines.airline having  count(*) < 200
"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT flightno FROM flights WHERE airline = ""United Airlines"";",SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');,"SELECT FlightNo FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = ""United Airlines"")",SELECT FlightNo FROM flights WHERE Airline = 'United Airlines',SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines',"select flights.flightno from airlines join flights on airlines.uid = flights.airline where airlines.airline = ""United Airlines""","select t1.flightno from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = ""United Airlines""","select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = ""United Airlines"""
"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT flightno FROM flights WHERE airline = 'United Airlines';,SELECT FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';,"SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = ""United Airlines""",SELECT FlightNo FROM flights WHERE Airline = 'United Airlines',SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';,select flights.flightno from airlines join flights on airlines.uid = flights.airline where airlines.airline = 'United Airlines',select t1.flightno from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = 'United Airlines',"select flights.flightno from airlines join flights on airlines.uid = flights.Airline where  airlines.airline = ""United Airlines"""
"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  ""APG""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT flightno FROM flights WHERE sourceairport = 'APG';,SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';,"SELECT FlightNo FROM flights WHERE SourceAirport = ""APG""",SELECT FlightNo FROM flights WHERE SourceAirport = 'APG',SELECT FlightNo FROM flights WHERE SourceAirport = 'APG',select flightno from flights where destairport = 'APG',"select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.airportcode = ""APG""","select flights.flightno from flights where  flights.destairport = ""APG"""
"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  ""APG""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT flightno FROM flights WHERE sourceairport = 'APG';,SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';,"SELECT FlightNo FROM flights WHERE SourceAirport = ""APG"";",SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportCode = 'APG',SELECT FlightNo FROM flights WHERE SourceAirport = 'APG',select flightno from flights where sourceairport = 'APG',"select flightno from flights where sourceairport = ""APG""","select flights.flightno from flights where  flights.sourceairport = ""APG"""
"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  ""APG""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT flightno FROM flights WHERE destairport = ""APG"";",SELECT FlightNo FROM flights WHERE DestAirport = 'APG';,"SELECT FlightNo FROM flights WHERE DestAirport = ""APG""",SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'APG',SELECT FlightNo FROM flights WHERE DestAirport = 'APG',select flightno from flights where destairport = 'APG',"select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.airportcode = ""APG""","select flights.flightno from flights where  flights.destairport = ""APG"""
"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  ""APG""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT flightno FROM flights WHERE destairport = 'APG';,SELECT FlightNo FROM flights WHERE DestAirport = 'APG';,SELECT FlightNo FROM flights WHERE DestAirport = 'APG',SELECT FlightNo FROM flights WHERE DestAirport = 'APG',SELECT FlightNo FROM flights WHERE DestAirport = 'APG',select flightno from flights where destairport = 'APG',select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.airportcode = 'APG',"select flights.flightno from flights where  flights.destairport = ""APG"""
"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = ""Aberdeen"";",SELECT FlightNo FROM flights WHERE SourceAirport = (   SELECT AirportCode   FROM airports   WHERE City LIKE 'Aberdeen %' );,"SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = ""Aberdeen""",SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';,select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen',"select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = ""Aberdeen""","select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"""
"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = 'Aberdeen');,SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');,"SELECT FlightNo FROM flights WHERE SourceAirport = ""Aberdeen"";",SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',SELECT FlightNo FROM flights WHERE SourceAirport = 'ABR',select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen',select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen',"select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"""
"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = ""Aberdeen"";",SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City LIKE 'Aberdeen%';,"SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = ""Aberdeen""",SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen',select flights.flightno from airports join flights on airports.airportcode = flights.destairport where airports.city = 'Aberdeen',"select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = ""Aberdeen""","select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"""
"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE city = ""Aberdeen"");",SELECT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');,SELECT FlightNo FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen'),SELECT FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';,select flights.flightno from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen',select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.city = 'Aberdeen',"select flights.flightno from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"""
"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  ""Aberdeen"" OR T2.city  =  ""Abilene""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city IN ('Aberdeen', 'Abilene');","SELECT COUNT(*)  FROM flights WHERE DestAirport IN (   SELECT AirportCode   FROM airports   WHERE City IN ('Aberdeen', 'Abilene') );","SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City IN ('Aberdeen', 'Abilene')",SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene',"SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');",select count(*) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = 'Aberdeen' or t1.city = 'Abilene',"select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"" or airports.city = ""Abilene"""
"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  ""Aberdeen"" OR T2.city  =  ""Abilene""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city IN (""Aberdeen"", ""Abilene""));","SELECT COUNT(*)  FROM flights WHERE DestAirport IN (   SELECT AirportCode   FROM airports   WHERE City IN ('Aberdeen', 'Abilene') );","SELECT count(*) FROM flights WHERE DestAirport IN ('ABZ', 'ABI')",SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene',"SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');",select count(*) from airports join flights on airports.airportcode = flights.sourceairport where airports.city = 'Aberdeen' or airports.city = 'Abilene',select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = 'Aberdeen' or t1.city = 'Abilene',"select count(*) from flights join airports on flights.DestAirport = airports.AirportCode where  airports.city = ""Aberdeen"" or airports.city = ""Abilene"""
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT DISTINCT destairport FROM flights) AND airportcode NOT IN (SELECT DISTINCT sourceairport FROM flights);,SELECT AirportName FROM airports WHERE AirportCode NOT IN (   SELECT SourceAirport FROM flights   UNION   SELECT DestAirport FROM flights );,SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights),SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights),SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights),select airportname from airports where airportcode not in (select sourceairport from flights),select airportname from airports where airportcode not in (select sourceairport from flights),select airports.airportname from airports where  airports.airportcode not in (select flights.DestAirport from flights  )
SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT airportcode, airportname, city, country FROM airports WHERE airportcode NOT IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights);",SELECT a.AirportCode FROM airports a LEFT JOIN flights f ON a.AirportCode = f.SourceAirport OR a.AirportCode = f.DestAirport WHERE f.SourceAirport IS NULL AND f.DestAirport IS NULL;,SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights),SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights),SELECT AirportCode FROM airports WHERE AirportCode NOT IN (   SELECT SourceAirport FROM flights   UNION   SELECT DestAirport FROM flights ),select airportname from airports except select airports.airportname from airports join flights on airports.airportcode = flights.sourceairport or flights.destairport = flights.destairport,select airportname from airports except select t1.airportname from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport,select airports.airportname from airports where  airports.airportcode not in (select flights.DestAirport from flights  )
SELECT count(*) FROM employee,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT COUNT(*) FROM employee;,SELECT COUNT(*) FROM employee;,SELECT count(*) FROM employee,SELECT COUNT(*) FROM employee,SELECT COUNT(Employee_ID) FROM employee,select count(*) from employee,select count(*) from employee,select count(*) from employee
SELECT count(*) FROM employee,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT COUNT(*) FROM employee;,SELECT COUNT(*) FROM employee;,SELECT count(*) FROM employee,SELECT COUNT(*) FROM employee,SELECT COUNT(Employee_ID) FROM employee,select count(*) from employee,select count(*) from employee,select count(*) from employee
SELECT name FROM employee ORDER BY age,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT name FROM employee ORDER BY age ASC;,SELECT Name FROM employee ORDER BY Age ASC;,SELECT Name FROM employee ORDER BY Age ASC,SELECT Name FROM employee ORDER BY Age ASC,SELECT Name FROM employee ORDER BY Age ASC,select name from employee order by age asc,select name from employee order by age asc,select employee.name from employee   order by employee.age asc
SELECT name FROM employee ORDER BY age,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT employee.name FROM employee ORDER BY employee.age ASC;,SELECT Name FROM employee ORDER BY Age ASC;,SELECT Name FROM employee ORDER BY Age ASC,SELECT Name FROM employee ORDER BY Age ASC,SELECT Name FROM employee ORDER BY Age ASC;,select name from employee order by age asc,select name from employee order by age asc,select employee.name from employee   order by employee.age asc
"SELECT count(*) ,  city FROM employee GROUP BY city",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT city, COUNT(employee_id) AS employee_count FROM employee GROUP BY city;","SELECT City, COUNT(*) AS Number_of_employees FROM employee GROUP BY City;","SELECT City , COUNT(*) FROM employee GROUP BY City","SELECT COUNT(*) ,  City FROM employee GROUP BY City","SELECT COUNT(Employee_ID) AS Number_of_Employees, City FROM employee GROUP BY City","select city, count(*) from employee group by city","select city, count(*) from employee group by city","select employee.city , count(*) from employee  group by employee.city"
"SELECT count(*) ,  city FROM employee GROUP BY city",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT city, COUNT(employee_id) AS employee_count FROM employee GROUP BY city;","SELECT City, COUNT(*) AS num_employees FROM employee GROUP BY City;","SELECT City , count(*) FROM employee GROUP BY City","SELECT COUNT(Employee_ID), City FROM employee GROUP BY City","SELECT COUNT(Employee_ID) AS NumberOfEmployees, City FROM employee GROUP BY City","select count(*), city from employee group by city","select count(*), city from employee group by city","select employee.city , count(*) from employee  group by employee.city"
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT employee.city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;,SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;,SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(*) > 1,SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(Employee_ID) > 1,SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1,select city from employee where age < 30 group by city having count(*) > 1,select city from employee where age < 30 group by city having count(*) > 1,select employee.city from employee where  employee.age > 30  group by employee.city having  count(*) > 1
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;,SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;,SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1,SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING count(*) > 1,"SELECT COUNT(employee.City) AS NumberOfEmployees, employee.City FROM employee WHERE employee.Age < 30 GROUP BY employee.City HAVING COUNT(employee.City) > 1",select city from employee where age < 30 group by city having count(*) > 1,select city from employee where age < 30 group by city having count(*) > 1,select employee.city from employee where  employee.age > 30  group by employee.city having  count(*) > 1
"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT location, COUNT(*) AS shop_count FROM shop GROUP BY location;","SELECT Location, COUNT(*) AS Number_of_shops FROM shop GROUP BY Location;","SELECT count(*) , Location FROM shop GROUP BY Location","SELECT count(*) ,  Location FROM shop GROUP BY Location","SELECT COUNT(Shop_ID) AS Number_of_Shops, Location FROM shop GROUP BY Location","select location, count(*) from shop group by location","select location, count(*) from shop group by location","select count(*) , shop.location from shop  group by shop.location"
"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT shop.location, COUNT(shop.shop_id) AS number_of_shops FROM shop GROUP BY shop.location;","SELECT Location, COUNT(*) AS Number_of_Shops FROM shop GROUP BY Location;","SELECT count(*) , Location FROM shop GROUP BY Location","SELECT COUNT(*) ,  Location FROM shop GROUP BY Location","SELECT COUNT(Shop_ID) AS NumberOfShops, Location FROM shop GROUP BY Location","select location, count(*) from shop group by location","select location, count(*) from shop group by location","select shop.location , count(*) from shop  group by shop.location"
"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = ( SELECT MAX(number_products) FROM shop );","SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);","SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1","SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT max(Number_products) FROM shop)","SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1","select manager_name, district from shop order by number_products desc limit 1","select manager_name, district from shop order by number_products desc limit 1","select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = ( SELECT MAX(number_products) FROM shop)","SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);","SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1","SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1","SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1","select manager_name, district from shop order by number_products desc limit 1","select manager_name, district from shop order by number_products desc limit 1","select shop.manager_name , shop.district from shop   order by shop.number_products desc limit 1"
"SELECT min(Number_products) ,  max(Number_products) FROM shop",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT MIN(number_products) AS min_number_products, MAX(number_products) AS max_number_products FROM shop;","SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;","SELECT min(Number_products) , max(Number_products) FROM shop","SELECT MIN(Number_products), MAX(Number_products) FROM shop","SELECT MIN(Number_products) AS Min_Products, MAX(Number_products) AS Max_Products FROM shop;","select min(number_products), max(number_products) from shop","select min(number_products), max(number_products) from shop","select min(shop.number_products) , max(shop.number_products) from shop"
"SELECT min(Number_products) ,  max(Number_products) FROM shop",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT MIN(number_products), MAX(number_products) FROM shop;","SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;","SELECT min(Number_products) , max(Number_products) FROM shop","SELECT MIN(Number_products), MAX(Number_products) FROM shop","SELECT MIN(Number_products), MAX(Number_products) FROM shop","select min(number_products), max(number_products) from shop","select min(number_products), max(number_products) from shop","select min(shop.number_products) , max(shop.number_products) from shop"
"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT name, location, district FROM shop ORDER BY number_products DESC;","SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;","SELECT Name, Location, District FROM shop ORDER BY Number_products DESC","SELECT Name, Location, District FROM shop ORDER BY Number_products DESC","SELECT Name, Location, District FROM shop ORDER BY Number_products DESC","select name, location, district from shop order by number_products desc","select name, location, district from shop order by number_products desc","select shop.name , shop.location , shop.district from shop   order by shop.number_products desc"
"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.number_products DESC;","SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;","SELECT Name, Location, District FROM shop ORDER BY Number_products DESC","SELECT Name, Location, District FROM shop ORDER BY Number_products DESC","SELECT Name, Location, District FROM shop ORDER BY Number_products DESC","select name, location, district from shop order by number_products desc","select name, location, district from shop order by number_products desc","select shop.name , shop.location , shop.district from shop   order by shop.number_products desc"
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);,SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);,SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop),SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop),SELECT AVG(Number_products) FROM shop) AS avg_products WHERE Number_products > avg_products;,select name from shop where number_products > (select avg(number_products) from shop),select name from shop where number_products > (select avg(number_products) from shop),select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )
SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT shop.name FROM shop WHERE shop.number_products > (SELECT AVG(number_products) FROM shop);,SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);,SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop),SELECT Name FROM shop WHERE Number_products > (SELECT avg(Number_products) FROM shop),SELECT AVG(Number_products) FROM shop) AS avg_products WHERE Number_products > avg_products;,select name from shop where number_products > (select avg(number_products) from shop),select name from shop where number_products > (select avg(number_products) from shop),select shop.name from shop where  shop.number_products > (select avg(shop.number_products) from shop  )
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name HAVING count(*) = (SELECT max(count_eval) FROM (SELECT count(*) as count_eval FROM evaluation GROUP BY Employee_ID) AS subquery),"SELECT Employee_ID, COUNT(Employee_ID) AS Award_Count FROM evaluation GROUP BY Employee_ID ORDER BY Award_Count DESC LIMIT 1;",select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.employee_id order by count(*) desc limit 1,select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t2.employee_id order by count(*) desc limit 1,select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(*) DESC LIMIT 1;,SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT T2.Name FROM evaluation AS T1 JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Name HAVING count(*) = (SELECT max(awards) FROM (SELECT count(*) as awards FROM evaluation GROUP BY Employee_ID) as subquery),"SELECT Employee_ID, COUNT(*) AS Awards FROM evaluation GROUP BY Employee_ID ORDER BY Awards DESC LIMIT 1;",select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id group by employee.employee_id order by sum(evaluation.year_awarded) desc limit 1,select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id group by t2.employee_id order by count(*) desc limit 1,select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID  group by evaluation.employee_id  order by count(*) desc limit 1
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.bonus = (SELECT MAX(bonus) FROM evaluation);,SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);,SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1,SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID  =  T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1,SELECT Employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1,select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1,select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1,select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT employee.name FROM evaluation INNER JOIN employee ON evaluation.employee_id = employee.employee_id WHERE evaluation.bonus = (SELECT MAX(bonus) FROM evaluation);,SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;,SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1,SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Bonus = (SELECT max(Bonus) FROM evaluation),SELECT employee.Name FROM evaluation JOIN employee ON evaluation.Employee_ID = employee.Employee_ID ORDER BY evaluation.Bonus DESC LIMIT 1,select employee.name from employee join evaluation on employee.employee_id = evaluation.employee_id order by evaluation.bonus desc limit 1,select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1,select employee.name from evaluation join employee on evaluation.Employee_ID = employee.Employee_ID   order by evaluation.bonus desc limit 1
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation),SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;,SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),SELECT Employee.Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL,select name from employee where employee_id not in (select employee_id from evaluation),select name from employee where employee_id not in (select employee_id from evaluation),select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )
SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT employee.name FROM employee WHERE employee.employee_id NOT IN (SELECT evaluation.employee_id FROM evaluation);,SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;,SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),SELECT employee.Name FROM employee LEFT JOIN evaluation ON employee.Employee_ID = evaluation.Employee_ID WHERE evaluation.Employee_ID IS NULL,select name from employee where employee_id not in (select employee_id from evaluation),select name from employee where employee_id not in (select employee_id from evaluation),select employee.name from employee where  employee.employee_id not in (select evaluation.Employee_ID from evaluation  )
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;,SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;,SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name HAVING count(T2.Employee_ID) = (SELECT max(count_employee) FROM (SELECT count(Employee_ID) as count_employee FROM hiring GROUP BY Shop_ID) as subquery),"SELECT COUNT(Employee_ID) AS NumberOfEmployees, Shop_ID FROM hiring GROUP BY Shop_ID ORDER BY NumberOfEmployees DESC LIMIT 1;",select shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by hiring.shop_id order by count(*) desc limit 1,select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1,select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY hiring.shop_id ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;,SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;,SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1,"SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID, T2.Name HAVING count(T1.Employee_ID)  =  (SELECT max(counted) FROM (SELECT count(Employee_ID) AS counted FROM hiring GROUP BY Shop_ID) AS subquery)","SELECT COUNT(hiring.Employee_ID) AS Employee_Count, shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY hiring.Shop_ID ORDER BY Employee_Count DESC LIMIT 1",select shop.name from shop join hiring on shop.shop_id = hiring.shop_id group by hiring.shop_id order by count(*) desc limit 1,select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count(*) desc limit 1,select shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id  order by count(*) desc limit 1
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT shop.name FROM shop WHERE shop.shop_id NOT IN (SELECT shop_id FROM hiring),SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;,SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring),SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring),SELECT Shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL,select name from shop where shop_id not in (select shop_id from hiring),select name from shop where shop_id not in (select shop_id from hiring),select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT shop.name FROM shop WHERE shop.shop_id NOT IN (SELECT shop_id FROM hiring);,SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;,SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring),SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring),SELECT shop.Name FROM shop LEFT JOIN hiring ON shop.Shop_ID = hiring.Shop_ID WHERE hiring.Employee_ID IS NULL,select name from shop where shop_id not in (select shop_id from hiring),select name from shop where shop_id not in (select shop_id from hiring),select shop.name from shop where  shop.shop_id not in (select hiring.Shop_ID from hiring  )
"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT shop.name, COUNT(employee.employee_id) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name;","SELECT s.Name, COUNT(h.Employee_ID) AS num_employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;","SELECT t1.Name, count(*) FROM shop AS t1 JOIN hiring AS t2 ON t1.Shop_ID = t2.Shop_ID GROUP BY t1.Name","SELECT count(T1.Employee_ID), T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID, T2.Name","SELECT COUNT(hiring.Employee_ID) AS Number_of_Employees, shop.Name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name","select shop.name, count(*) from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name","select count(*), t3.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id join employee as t3 on t1.employee_id = t3.employee_id group by t2.shop_id","select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT shop.name, COUNT(employee.employee_id) AS number_of_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.shop_id, shop.name;","SELECT s.Name, COUNT(h.Employee_ID) AS num_employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;","SELECT T1.Name , COUNT(*) FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name","SELECT count(T1.Employee_ID), T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID, T2.Name","SELECT COUNT(employee.Employee_ID) AS Number_of_Employees, shop.Name AS Shop_Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name","select shop.name, count(*) from hiring join shop on hiring.shop_id = shop.shop_id group by shop.name","select count(*), t3.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id join employee as t3 on t1.employee_id = t3.employee_id group by t2.shop_id","select count(*) , shop.name from hiring join shop on hiring.Shop_ID = shop.Shop_ID  group by hiring.shop_id"
SELECT sum(bonus) FROM evaluation,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT SUM(bonus) FROM evaluation;,SELECT SUM(Bonus) AS total_bonus FROM evaluation;,SELECT sum(Bonus) FROM evaluation,SELECT SUM(Bonus) FROM evaluation,SELECT SUM(Bonus) FROM evaluation,select sum(bonus) from evaluation,select sum(bonus) from evaluation,select sum(evaluation.bonus) from evaluation
SELECT sum(bonus) FROM evaluation,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT SUM(bonus) FROM evaluation;,SELECT SUM(Bonus) AS total_bonus FROM evaluation;,SELECT sum(Bonus) FROM evaluation,SELECT sum(Bonus) FROM evaluation,SELECT SUM(Bonus) FROM evaluation,select sum(bonus) from evaluation,select sum(bonus) from evaluation,select sum(evaluation.bonus) from evaluation
SELECT * FROM hiring,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT hiring.* FROM hiring;,"SELECT Shop_ID, Employee_ID, Start_from, Is_full_time FROM hiring;",SELECT * FROM hiring,SELECT * FROM hiring,SELECT * FROM hiring;,select * from hiring,select * from hiring,select * from hiring
SELECT * FROM hiring,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT shop_id, employee_id, start_from, is_full_time FROM hiring;","SELECT Shop_ID, Employee_ID, Start_from, Is_full_time FROM hiring;",SELECT * FROM hiring,SELECT * FROM hiring,SELECT * FROM hiring;,select * from hiring,select * from hiring,select * from hiring
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT shop.district FROM shop WHERE (number_products < 3000 AND shop_id IN (SELECT shop_id FROM shop WHERE number_products > 10000)),SELECT District FROM shop WHERE District IN (   SELECT District   FROM shop   WHERE Number_products < 3000   INTERSECT   SELECT District   FROM shop   WHERE Number_products > 10000 );,SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000,SELECT District FROM shop WHERE District IN (SELECT District FROM shop WHERE Number_products < 3000) AND District IN (SELECT District FROM shop WHERE Number_products > 10000),SELECT DISTINCT District FROM shop WHERE District IN (   SELECT District FROM shop WHERE Number_products < 3000 ) AND District IN (   SELECT District FROM shop WHERE Number_products > 10000 );,select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000,select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000,select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000
SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT shop.district FROM shop INNER JOIN ( SELECT district FROM shop WHERE number_products < 3000 GROUP BY district ) AS low_product_shops ON shop.district = low_product_shops.district INNER JOIN ( SELECT district FROM shop WHERE number_products > 10000 GROUP BY district ) AS high_product_shops ON shop.district = high_product_shops.district;,SELECT District FROM shop WHERE District IN (   SELECT District   FROM shop   WHERE Number_products < 3000   INTERSECT   SELECT District   FROM shop   WHERE Number_products > 10000 );,SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000,SELECT T1.District FROM shop AS T1 WHERE T1.Number_products < 3000 INTERSECT SELECT T2.District FROM shop AS T2 WHERE T2.Number_products > 10000,SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000,select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000,select district from shop where number_products < 3000 intersect select district from shop where number_products > 10000,select shop.district from shop where  shop.number_products < 3000   intersect select shop.district from shop where  shop.number_products > 10000
SELECT count(DISTINCT LOCATION) FROM shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT COUNT(DISTINCT location) FROM shop;,SELECT COUNT(DISTINCT Location) FROM shop;,SELECT count(DISTINCT Location) FROM shop,SELECT COUNT(DISTINCT Location) FROM shop,SELECT COUNT(DISTINCT Location) FROM shop,select count(distinct location) from shop,select count(distinct location) from shop,select count( distinct shop.location) from shop
SELECT count(DISTINCT LOCATION) FROM shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT COUNT(DISTINCT location) FROM shop;,SELECT COUNT(DISTINCT Location) FROM shop;,SELECT count(DISTINCT Location) FROM shop,SELECT COUNT(DISTINCT Location) FROM shop,SELECT COUNT(DISTINCT Location) FROM shop,select count(distinct location) from shop,select count(distinct location) from shop,select count( distinct shop.location) from shop
SELECT count(*) FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM documents;,SELECT COUNT(*) FROM Documents;,SELECT count(*) FROM Documents,SELECT COUNT(*) FROM Documents,SELECT COUNT(Document_ID) FROM Documents,select count(*) from documents,select count(*) from documents,select count(*) from Documents
SELECT count(*) FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM documents;,SELECT COUNT(*) FROM Documents;,SELECT count(*) FROM Documents,SELECT COUNT(*) FROM Documents,SELECT COUNT(Document_ID) FROM Documents,select count(*) from documents,select count(*) from documents,select count(*) from Documents
"SELECT document_id ,  document_name ,  document_description FROM Documents",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id, documents.document_name, documents.document_description FROM documents;","SELECT Document_ID, Document_Name, Document_Description FROM Documents;","SELECT Document_ID , Document_Name , Document_Description FROM Documents","SELECT Document_ID, Document_Name, Document_Description FROM Documents","SELECT Document_ID, Document_Name, Document_Description FROM Documents","select document_id, document_name, document_description from documents","select document_id, document_name, document_description from documents","select documents.document_id , documents.document_name , documents.document_description from Documents"
"SELECT document_id ,  document_name ,  document_description FROM Documents",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id, documents.document_name, documents.document_description FROM documents;","SELECT Document_ID, Document_Name, Document_Description FROM Documents;","SELECT Document_ID, Document_Name, Document_Description FROM Documents","SELECT Document_ID, Document_Name, Document_Description FROM Documents","SELECT Document_ID, Document_Name, Document_Description FROM Documents","select document_id, document_name, document_description from documents","select document_id, document_name, document_description from documents","select documents.document_id , documents.document_name , documents.document_description from Documents"
"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE ""%w%""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%';","SELECT Document_Name, Template_ID  FROM Documents WHERE Document_Description LIKE '%w%';","SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'","SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'","SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'","select document_name, template_id from documents where document_description like '%w%'","select document_name, template_id from documents where document_description like '%w%'","select documents.document_name , documents.template_id from Documents where  documents.document_description like ""%w%"""
"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE ""%w%""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_description LIKE '%w%';","SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';","SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE ""%w%""","SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'","SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'","select document_name, template_id from documents where document_description like '%w%'","select document_name, template_id from documents where document_description like '%w%'","select documents.document_name , documents.template_id from Documents where  documents.document_description like ""%w%"""
"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  ""Robbin CV""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = ""Robbin CV"";","SELECT Document_ID, Template_ID, Document_Description  FROM Documents WHERE Document_Name = 'Robbin CV';","SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = ""Robbin CV""","SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'","SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'","select document_id, template_id, document_description from documents where document_name = ""Robbin CV""","select document_id, template_id, document_description from documents where document_name = ""Robbin CV""","select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = ""Robbin CV"""
"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  ""Robbin CV""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_name = 'Robbin CV';","SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';","SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = ""Robbin CV""","SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'","SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'","select document_id, template_id, document_description from documents where document_name = ""Robbin CV""","select document_id, template_id, document_description from documents where document_name = ""Robbin CV""","select documents.document_id , documents.template_id , documents.document_description from Documents where  documents.document_name = ""Robbin CV"""
SELECT count(DISTINCT template_id) FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(DISTINCT templates.template_id) FROM documents JOIN templates ON documents.template_id = templates.template_id;,SELECT COUNT(DISTINCT Template_ID)  FROM Documents;,SELECT count(DISTINCT Template_ID) FROM Documents,SELECT count(DISTINCT T1.Template_ID) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID,SELECT COUNT(DISTINCT Template_ID) FROM Documents,select count(distinct template_id) from documents,select count(distinct template_id) from documents,select count( distinct documents.template_id) from Documents
SELECT count(DISTINCT template_id) FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(DISTINCT templates.template_id) as template_count FROM templates JOIN documents ON templates.template_id = documents.template_id;,SELECT COUNT(DISTINCT Template_ID) FROM Documents;,SELECT count(DISTINCT Template_ID) FROM Documents,SELECT count(DISTINCT Template_ID) FROM Documents,SELECT COUNT(DISTINCT Template_ID) FROM Documents,select count(distinct template_id) from documents,select count(distinct template_id) from documents,select count( distinct documents.template_id) from Documents
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(DISTINCT documents.document_id) AS document_count FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'PPT';,SELECT COUNT(*)  FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';,SELECT count(*) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT'),SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT',SELECT COUNT(Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT',"select count(*) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = ""PPT""",select count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = 'PPT',"select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = ""PPT"""
SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(DISTINCT documents.document_id) FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'PPT';,SELECT COUNT(*)  FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';,"SELECT count(*) FROM Documents AS D JOIN Templates AS T ON D.Template_ID = T.Template_ID JOIN Ref_Template_Types AS RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Description = ""PPT""",SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT',SELECT COUNT(Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT',"select count(*) from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = ""PPT""","select count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t1.template_type_code = ""PPT""","select count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = ""PPT"""
"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.template_id, COUNT(documents.document_id) FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;","SELECT t.Template_ID, COUNT(d.Document_ID) AS num_documents FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID;","SELECT Template_ID , count(*) FROM Documents GROUP BY Template_ID;","SELECT T1.Template_ID, COUNT(T2.Document_ID)  FROM Templates AS T1  JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_ID","SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS NumberOfDocuments FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID","select template_id, count(*) from documents group by template_id","select template_id, count(*) from documents group by template_id","select documents.template_id , count(*) from Documents  group by documents.template_id"
"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.template_id, COUNT(*) AS usage_count FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id;","SELECT Template_ID, COUNT(*) AS Usage_Count FROM Documents GROUP BY Template_ID;","SELECT Template_ID , count(*) FROM Documents GROUP BY Template_ID","SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID","SELECT COUNT(Documents.Template_ID), Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID","select template_id, count(*) from documents group by template_id","select template_id, count(*) from documents group by template_id","select documents.template_id , count(*) from Documents  group by documents.template_id"
"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;","SELECT t.Template_ID, t.Template_Type_Code FROM Templates t INNER JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;","SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY COUNT(*) DESC LIMIT 1","SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1","SELECT Template_ID, Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID, Templates.Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1","select documents.template_id, templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by documents.template_id order by count(*) desc limit 1","select t1.template_id, t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1","select templates.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_id  order by count(*) desc limit 1"
"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON templates.template_id = documents.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;","SELECT t.Template_ID, t.Template_Type_Code FROM Templates t INNER JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;","SELECT T1.Template_ID , T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID ORDER BY count(*) DESC LIMIT 1","SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code HAVING COUNT(*) = (     SELECT MAX(COUNT(*))     FROM Documents     GROUP BY Template_ID )","SELECT MAX(d.count), t.Template_ID, t.Template_Type_Code FROM (SELECT Template_ID, COUNT(Document_ID) as count FROM Documents GROUP BY Template_ID) d JOIN Templates t ON d.Template_ID = t.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY d.count DESC LIMIT 1","select documents.template_id, templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by documents.template_id order by count(*) desc limit 1","select t1.template_id, t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_id order by count(*) desc limit 1","select documents.template_id , templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by documents.template_id  order by count(*) desc limit 1"
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT templates.template_id FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id HAVING COUNT(DISTINCT documents.document_id) > 1,SELECT Template_ID FROM Templates WHERE Template_ID IN (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   HAVING COUNT(*) > 1 );,SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING count(*) > 1,SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING count(T2.Document_ID) > 1,SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1,select template_id from documents group by template_id having count(*) > 1,select template_id from documents group by template_id having count(*) > 1,select documents.template_id from Documents  group by documents.template_id having  count(*) > 1
SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT templates.template_id FROM templates WHERE templates.template_id IN (SELECT documents.template_id FROM documents GROUP BY documents.template_id HAVING COUNT(*) > 1);,SELECT Template_ID FROM Templates WHERE Template_ID IN (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   HAVING COUNT(*) > 1 );,SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1,SELECT T1.Template_ID FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING count(*) > 1,SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1,select template_id from documents group by template_id having count(*) > 1,select template_id from documents group by template_id having count(*) > 1,select documents.template_id from Documents  group by documents.template_id having  count(*) > 1
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL;,SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (   SELECT DISTINCT Template_ID   FROM Documents   WHERE Template_ID IS NOT NULL );,SELECT Template_ID FROM Templates EXCEPT SELECT Template_ID FROM Documents,SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents),SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents),select template_id from templates except select template_id from documents,select template_id from templates except select template_id from documents,select templates.template_id from Templates   except select documents.template_id from Documents
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.document_id IS NULL;,SELECT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Template_ID IS NULL;,SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents),SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents),SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);,select template_id from templates except select template_id from documents,select template_id from templates except select template_id from documents,select templates.template_id from Templates   except select documents.template_id from Documents
SELECT count(*) FROM Templates,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM templates;,SELECT COUNT(*) FROM Templates;,SELECT count(*) FROM Templates,SELECT COUNT(*) FROM Templates,SELECT COUNT(Template_ID) FROM Templates,select count(*) from templates,select count(*) from templates,select count(*) from Templates
SELECT count(*) FROM Templates,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM templates;,SELECT COUNT(*) FROM Templates;,SELECT count(*) FROM Templates,SELECT COUNT(*) FROM Templates,SELECT COUNT(Template_ID) FROM Templates,select count(*) from templates,select count(*) from templates,select count(*) from Templates
"SELECT template_id ,  version_number ,  template_type_code FROM Templates",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;","SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;","SELECT Template_ID , Version_Number , Template_Type_Code FROM Templates","SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates","SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates","select template_id, version_number, template_type_code from templates","select template_id, version_number, template_type_code from templates","select templates.template_id , templates.version_number , templates.template_type_code from Templates"
"SELECT template_id ,  version_number ,  template_type_code FROM Templates",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates;","SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;","SELECT Template_ID , Version_Number , Template_Type_Code FROM Templates","SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates","SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates","select template_id, version_number, template_type_code from templates","select template_id, version_number, template_type_code from templates","select templates.template_id , templates.version_number , templates.template_type_code from Templates"
SELECT DISTINCT template_type_code FROM Templates,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT DISTINCT template_type_code FROM templates;,SELECT DISTINCT Template_Type_Code FROM Templates;,SELECT distinct(Template_Type_Code) FROM Templates,SELECT DISTINCT Template_Type_Code FROM Templates,SELECT DISTINCT Template_Type_Code FROM Templates,select distinct template_type_code from templates,select distinct template_type_code from templates,select distinct templates.template_type_code from Templates
SELECT DISTINCT template_type_code FROM Templates,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT template_type_code FROM templates;,SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;,SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types,SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types,SELECT Template_Type_Code FROM Ref_Template_Types,select distinct template_type_code from templates,select distinct template_type_code from templates,select distinct templates.template_type_code from Templates
"SELECT template_id FROM Templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.template_id FROM templates WHERE templates.template_type_code IN ('PP', 'PPT');","SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');","SELECT Template_ID FROM Templates WHERE Template_Type_Code = ""PP"" OR Template_Type_Code = ""PPT""",SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT',"SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');","select template_id from templates where template_type_code = ""PP"" or template_type_code = ""PPT""","select template_id from templates where template_type_code = ""PP"" or template_type_code = ""PPT""","select templates.template_id from Templates where  templates.template_type_code = ""PP"" or templates.template_type_code = ""PPT"""
"SELECT template_id FROM Templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT templates.template_id FROM templates WHERE templates.template_type_code = 'PP' OR templates.template_type_code = 'PPT';,"SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');","SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')",SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT',"SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT');","select template_id from templates where template_type_code = ""PP"" or template_type_code = ""PPT""","select template_id from templates where template_type_code = ""PP"" or template_type_code = ""PPT""","select templates.template_id from Templates where  templates.template_type_code = ""PP"" or templates.template_type_code = ""PPT"""
"SELECT count(*) FROM Templates WHERE template_type_code  =  ""CV""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';,SELECT COUNT(*)  FROM Templates WHERE Template_Type_Code = 'CV';,SELECT count(*) FROM Templates WHERE Template_Type_Code = 'CV',SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV',SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';,"select count(*) from templates where template_type_code = ""CV""","select count(*) from templates where template_type_code = ""CV""","select count(*) from Templates where  templates.template_type_code = ""CV"""
"SELECT count(*) FROM Templates WHERE template_type_code  =  ""CV""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';,SELECT COUNT(*)  FROM Templates WHERE Template_Type_Code = 'CV';,"SELECT count(*) FROM Templates AS t1 JOIN Ref_Template_Types AS t2 ON t1.Template_Type_Code = t2.Template_Type_Code WHERE t2.Template_Type_Description = ""CV""",SELECT count(*) FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'CV',SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';,"select count(*) from templates where template_type_code = ""CV""","select count(*) from templates where template_type_code = ""CV""","select count(*) from Templates where  templates.template_type_code = ""CV"""
"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;","SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;","SELECT Version_Number , Template_Type_Code FROM Templates WHERE Version_Number > 5","SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5","SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5","select version_number, template_type_code from templates where version_number > 5","select version_number, template_type_code from templates where version_number > 5","select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number > 5;","SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;","SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5","SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5","SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5","select version_number, template_type_code from templates where version_number > 5","select version_number, template_type_code from templates where version_number > 5","select templates.version_number , templates.template_type_code from Templates where  templates.version_number > 5"
"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT ref_template_types.template_type_code, COUNT(templates.template_id) FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;","SELECT t.Template_Type_Code, COUNT(*) AS num_templates FROM Templates t GROUP BY t.Template_Type_Code;","SELECT Template_Type_Code , count(*) FROM Templates GROUP BY Template_Type_Code","SELECT T1.Template_Type_Code, count(T2.Template_ID) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code","SELECT Template_Type_Code, COUNT(Template_ID) AS NumberOfTemplates FROM Templates GROUP BY Template_Type_Code","select template_type_code, count(*) from templates group by template_type_code","select template_type_code, count(*) from templates group by template_type_code","select templates.template_type_code , count(*) from Templates  group by templates.template_type_code"
"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code;","SELECT rt.Template_Type_Code, rt.Template_Type_Description, COUNT(t.Template_ID) AS num_templates FROM Ref_Template_Types rt LEFT JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code GROUP BY rt.Template_Type_Code, rt.Template_Type_Description;","SELECT Template_Type_Code , count(*) FROM Templates GROUP BY Template_Type_Code","SELECT T1.Template_Type_Code, COUNT(T2.Template_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code  GROUP BY T1.Template_Type_Code","SELECT Template_Type_Code, COUNT(Template_ID) AS NumberOfTemplates FROM Templates GROUP BY Template_Type_Code","select template_type_code, count(*) from templates group by template_type_code","select template_type_code, count(*) from templates group by template_type_code","select templates.template_type_code , count(*) from Templates  group by templates.template_type_code"
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1,SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1,SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1,select template_type_code from templates group by template_type_code order by count(*) desc limit 1,select template_type_code from templates group by template_type_code order by count(*) desc limit 1,select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1
SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(template_id) DESC LIMIT 1;,SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1,SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code  =  T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY count(T2.Template_ID) DESC LIMIT 1,"SELECT MAX(Template_Count), Template_Type_Code FROM (   SELECT COUNT(*) AS Template_Count, Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code ) AS TemplateCount ORDER BY Template_Count DESC LIMIT 1",select template_type_code from templates group by template_type_code order by count(*) desc limit 1,select template_type_code from templates group by template_type_code order by count(*) desc limit 1,select templates.template_type_code from Templates  group by templates.template_type_code  order by count(*) desc limit 1
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code HAVING COUNT(templates.template_id) < 3;,SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   HAVING COUNT(*) >= 3 );,SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3,SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3,SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (     SELECT Template_Type_Code     FROM Templates     GROUP BY Template_Type_Code     HAVING COUNT(Template_ID) >= 3 ),select template_type_code from templates group by template_type_code having count(*) < 3,select template_type_code from templates group by template_type_code having count(*) < 3,select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3
SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT template_type_code FROM templates GROUP BY template_type_code HAVING COUNT(template_id) < 3;,SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   HAVING COUNT(*) >= 3 );,SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count(*) < 3,SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING count(T2.Template_ID) < 3,SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   HAVING COUNT(Template_ID) >= 3 ),select template_type_code from templates group by template_type_code having count(*) < 3,select template_type_code from templates group by template_type_code having count(*) < 3,select templates.template_type_code from Templates  group by templates.template_type_code having  count(*) < 3
"SELECT min(Version_Number) ,  template_type_code FROM Templates",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT MIN(version_number), template_type_code FROM templates;","SELECT MIN(Version_Number) AS Smallest_Version_Number, Template_Type_Code FROM Templates;","SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY MIN(Version_Number) ASC LIMIT 1;","SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Version_Number ASC LIMIT 1","SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY MIN(Version_Number) LIMIT 1","select version_number, template_type_code from templates order by version_number asc limit 1","select version_number, template_type_code from templates order by version_number asc limit 1","select min(templates.version_number) , templates.template_type_code from Templates  group by templates.template_type_code"
"SELECT min(Version_Number) ,  template_type_code FROM Templates",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number = (SELECT MIN(version_number) FROM templates)","SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates;","SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code","SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY Lowest_Version_Number ASC","SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code","select version_number, template_type_code from templates order by version_number asc limit 1","select template_type_code, version_number from templates order by version_number asc limit 1","select templates.version_number , templates.template_type_code from Templates   order by templates.version_number asc limit 1"
"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  ""Data base""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT ref_template_types.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE documents.document_name = ""Data base"";",SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Data base';,"SELECT T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = ""Data base""",SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base',SELECT Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Document_Name = 'Data base';,"select templates.template_type_code from documents join templates on documents.template_id = templates.template_id where documents.document_name = ""Data base""","select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = ""Data base""","select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = ""Data base"""
"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  ""Data base""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT templates.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE documents.document_name = 'Data base';,SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_Name = 'Data base';,"SELECT T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = ""Data base""",SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base',SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Document_Name = 'Data base';,"select templates.template_type_code from documents join templates on documents.template_id = templates.template_id where documents.document_name = ""Data base""","select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id where t2.document_name = ""Data base""","select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  documents.document_name = ""Data base"""
"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""BK""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_name FROM documents JOIN templates ON templates.template_id = documents.template_id JOIN ref_template_types ON ref_template_types.template_type_code = templates.template_type_code WHERE ref_template_types.template_type_code = ""BK"";",SELECT Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';,"SELECT T2.Document_Name FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = ""BK""",SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK',SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK',"select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = ""BK""","select t1.document_name from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = ""BK""","select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = ""BK"""
"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""BK""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT documents.document_name FROM documents JOIN templates ON documents.template_id = templates.template_id WHERE templates.template_type_code = 'BK';,SELECT Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';,"SELECT Document_Name FROM Documents AS D JOIN Templates AS T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = ""BK""",SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK',SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK',"select documents.document_name from documents join templates on documents.template_id = templates.template_id where templates.template_type_code = ""BK""","select t1.document_name from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = ""BK""","select documents.document_name from Documents join Templates on Documents.Template_ID = Templates.Template_ID where  templates.template_type_code = ""BK"""
"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT ref_template_types.template_type_code, COUNT(documents.document_id) FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code INNER JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code;","SELECT t.Template_Type_Code, COUNT(d.Document_ID) AS num_documents FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code;","SELECT t.Template_Type_Code, COUNT(d.Document_ID) FROM Ref_Template_Types t LEFT JOIN Templates te ON t.Template_Type_Code = te.Template_Type_Code LEFT JOIN Documents d ON te.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code","SELECT T1.Template_Type_Code, COUNT(T2.Document_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code  JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code","SELECT Template_Type_Code, COUNT(Documents.Document_ID) AS NumberOfDocuments FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code","select templates.template_type_code, count(*) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code","select t1.template_type_code, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code","select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code"
"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT ref_template_types.template_type_code, COUNT(DISTINCT documents.document_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code;","SELECT rt.Template_Type_Code, rt.Template_Type_Description, COUNT(d.Document_ID) AS num_documents FROM Ref_Template_Types rt LEFT JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code   LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rt.Template_Type_Code, rt.Template_Type_Description","SELECT T1.Template_Type_Code , count(*) FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code","SELECT T1.Template_Type_Code, COUNT(T2.Document_ID)  FROM Ref_Template_Types AS T1  JOIN Templates AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code  JOIN Documents AS T2 ON T3.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code","SELECT Template_Type_Code, COUNT(Documents.Document_ID) AS Document_Count FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code","select templates.template_type_code, count(*) from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code","select t1.template_type_code, count(*) from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code","select templates.template_type_code , count(*) from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code"
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT ref_template_types.template_type_code FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;,SELECT t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;,SELECT t2.Template_Type_Code FROM Documents AS t1 JOIN Templates AS t2 ON t1.Template_ID = t2.Template_ID GROUP BY t2.Template_Type_Code ORDER BY count(*) DESC LIMIT 1,SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1,"SELECT COUNT(Documents.Document_ID) AS Document_Count, Templates.Template_Type_Code FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code ORDER BY Document_Count DESC LIMIT 1",select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count(*) desc limit 1,select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1,select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1
SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT ref_template_types.template_type_code FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) DESC LIMIT 1,SELECT Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1,select templates.template_type_code from templates join documents on templates.template_id = documents.template_id group by templates.template_type_code order by count(*) desc limit 1,select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id group by t1.template_type_code order by count(*) desc limit 1,select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID  group by templates.template_type_code  order by count(*) desc limit 1
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT ref_template_types.template_type_code FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code WHERE templates.template_type_code IS NULL;,SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT DISTINCT t.Template_Type_Code   FROM Templates t   JOIN Documents d ON t.Template_ID = d.Template_ID );,SELECT Template_Type_Code FROM Ref_Template_Types EXCEPT SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID,SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID),SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT DISTINCT T.Template_Type_Code   FROM Templates T   JOIN Documents D ON T.Template_ID = D.Template_ID ),select template_type_code from ref_template_types except select template_type_code from templates,select template_type_code from templates except select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id,select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_code NOT IN (SELECT templates.template_type_code FROM templates INNER JOIN documents ON templates.template_id = documents.template_id),SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT DISTINCT Template_Type_Code   FROM Templates   WHERE Template_ID IN (     SELECT Template_ID      FROM Documents   ) );,SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents)),SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID),SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT DISTINCT T.Template_Type_Code   FROM Templates T   JOIN Documents D ON T.Template_ID = D.Template_ID ),select template_type_code from templates except select templates.template_type_code from templates join documents on templates.template_id = documents.template_id,select template_type_code from templates except select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id,select templates.template_type_code from Templates   except select templates.template_type_code from Documents join Templates on Documents.Template_ID = Templates.Template_ID
"SELECT template_type_code ,  template_type_description FROM Ref_template_types",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT template_type_code, template_type_description FROM ref_template_types;","SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;","SELECT Template_Type_Code , Template_Type_Description FROM Ref_Template_Types","SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types","SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types","select template_type_code, template_type_description from ref_template_types","select template_type_code, template_type_description from ref_template_types","select ref_template_types.template_type_code , ref_template_types.template_type_description from Ref_Template_Types"
"SELECT template_type_code ,  template_type_description FROM Ref_template_types",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT ref_template_types.template_type_code, ref_template_types.template_type_description FROM ref_template_types;","SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;","SELECT Template_Type_Code , Template_Type_Description FROM Ref_Template_Types","SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types","SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types","select template_type_code, template_type_description from ref_template_types","select template_type_code, template_type_description from ref_template_types","select ref_template_types.template_type_code , ref_template_types.template_type_description from Ref_Template_Types"
"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  ""AD""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';,SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';,"SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = ""AD""",SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD',SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD',"select template_type_description from ref_template_types where template_type_code = ""AD""","select template_type_description from ref_template_types where template_type_code = ""AD""","select ref_template_types.template_type_description from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.template_type_code = ""AD"""
"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  ""AD""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT ref_template_types.template_type_description FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE templates.template_type_code = 'AD';,SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';,"SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = ""AD""",SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD',SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';,"select template_type_description from ref_template_types where template_type_code = ""AD""","select template_type_description from ref_template_types where template_type_code = ""AD""","select ref_template_types.template_type_description from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  templates.template_type_code = ""AD"""
"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';,SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';,"SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = ""Book""",SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book',SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';,"select template_type_code from ref_template_types where template_type_description = ""Book""","select template_type_code from ref_template_types where template_type_description = ""Book""","select ref_template_types.template_type_code from Ref_Template_Types where  ref_template_types.template_type_description = ""Book"""
"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT ref_template_types.template_type_code FROM ref_template_types WHERE ref_template_types.template_type_description = ""Book"";",SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';,"SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = ""Book""",SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book',SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book',"select template_type_code from ref_template_types where template_type_description = ""Book""","select template_type_code from ref_template_types where template_type_description = ""Book""","select ref_template_types.template_type_code from Ref_Template_Types where  ref_template_types.template_type_description = ""Book"""
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT DISTINCT ref_template_types.template_type_description FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id;,SELECT DISTINCT rtt.Template_Type_Description FROM Ref_Template_Types rtt JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID;,SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents)),SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID,SELECT DISTINCT rtt.Template_Type_Description FROM Ref_Template_Types rtt JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID,select distinct ref_template_types.template_type_description from ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on documents.template_id = templates.template_id,select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id,select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT ref_template_types.template_type_description FROM templates JOIN documents ON documents.template_id = templates.template_id JOIN ref_template_types ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_description;,SELECT DISTINCT rt.Template_Type_Description FROM Ref_Template_Types rt JOIN Templates t ON rt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID;,SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID,SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID,SELECT DISTINCT rtt.Template_Type_Description FROM Ref_Template_Types rtt JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID,select distinct ref_template_types.template_type_description from ref_template_types join documents on ref_template_types.template_type_code = documents.template_id,select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id,select distinct ref_template_types.template_type_description from Documents join Templates on Documents.Template_ID = Templates.Template_ID join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  ""Presentation""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT templates.template_id FROM templates JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = ""Presentation"";",SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Description = 'Presentation';,"SELECT Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = ""Presentation""",SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation',SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';,"select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = ""Presentation""","select t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code where t2.template_type_description = ""Presentation""","select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = ""Presentation"""
"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  ""Presentation""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT templates.template_id FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_description = 'Presentation';,SELECT Template_ID FROM Templates WHERE Template_Type_Code = (   SELECT Template_Type_Code   FROM Ref_Template_Types   WHERE Template_Type_Description = 'Presentation' );,SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation',SELECT T1.Template_ID FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation',SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation',"select templates.template_id from templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code where ref_template_types.template_type_description = ""Presentation""",select t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code where t2.template_type_description = 'Presentation',"select templates.template_id from Templates join Ref_Template_Types on Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code where  ref_template_types.template_type_description = ""Presentation"""
SELECT count(*) FROM Paragraphs,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM paragraphs;,SELECT COUNT(*) AS total_paragraphs FROM Paragraphs;,SELECT count(*) FROM Paragraphs;,SELECT COUNT(*) FROM Paragraphs,SELECT COUNT(Paragraph_ID) FROM Paragraphs,select count(*) from paragraphs,select count(*) from paragraphs,select count(*) from Paragraphs
SELECT count(*) FROM Paragraphs,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM paragraphs;,SELECT COUNT(*) FROM Paragraphs;,SELECT count(*) FROM Paragraphs,SELECT COUNT(*) FROM Paragraphs,SELECT COUNT(Paragraph_ID) FROM Paragraphs,select count(*) from paragraphs,select count(*) from paragraphs,select count(*) from Paragraphs
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM paragraphs p JOIN documents d ON p.document_id = d.document_id WHERE d.document_name = 'Summer Show';,SELECT COUNT(*) AS paragraph_count FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show',SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show',SELECT COUNT(Paragraphs.Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show',"select count(*) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = ""Summer Show""","select count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.document_name = ""Summer Show""","select count(*) from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = ""Summer Show"""
SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');,SELECT COUNT(*) AS paragraph_count FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';,"SELECT count(*) FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.Document_ID = t2.Document_ID WHERE t1.Document_Name = ""Summer Show""",SELECT count(*) FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Summer Show',SELECT COUNT(Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Summer Show';,"select count(*) from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = ""Summer Show""","select count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.document_name = ""Summer Show""","select count(*) from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = ""Summer Show"""
select other_details from paragraphs where paragraph_text like 'korea',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT paragraph_text, paragraph_id, document_id, other_details FROM paragraphs WHERE paragraph_text = 'Korea';","SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea';","SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = ""Korea""",SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea',"SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraphs.Paragraph_Text = 'Korea';","select other_details from paragraphs where paragraph_text = ""Korea""","select other_details from paragraphs where paragraph_text = ""Korea""","select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text = ""Korea"""
select other_details from paragraphs where paragraph_text like 'korea',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT paragraph_text, other_details FROM paragraphs WHERE paragraph_text = 'Korea';","SELECT Paragraph_ID, Document_ID, Paragraph_Text, Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';",SELECT Paragraph_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%',SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%',"SELECT Paragraphs.Paragraph_ID, Paragraphs.Document_ID, Paragraphs.Paragraph_Text, Paragraphs.Other_Details FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%';","select other_details from paragraphs where paragraph_text like ""%korea%""",select other_details from paragraphs where paragraph_text like '%korea%',"select paragraphs.other_details from Paragraphs where  paragraphs.paragraph_text like ""%Korea%"""
"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT paragraph_id, paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = 'Welcome to NY' );","SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Welcome to NY' );","SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')","SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'","SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'","select paragraphs.paragraph_id, paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = ""Welcome to NY""","select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'","select paragraphs.paragraph_id , paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = ""Welcome to NY"""
"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT paragraph_id, paragraph_text FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'Welcome to NY';","SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Welcome to NY' );","SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')","SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'","SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Welcome to NY'","select paragraphs.paragraph_id, paragraphs.paragraph_text from paragraphs join documents on paragraphs.document_id = documents.document_id where documents.document_name = ""Welcome to NY""","select t1.paragraph_id, t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY'","select paragraphs.paragraph_id , paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = ""Welcome to NY"""
"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Customer reviews""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = 'Customer reviews' );,SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Customer reviews' );,"SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = ""Customer reviews""",SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews',SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews',"select paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = ""Customer reviews""","select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = ""Customer reviews""","select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = ""Customer reviews"""
"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Customer reviews""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT paragraph_text FROM paragraphs WHERE document_id = ( SELECT document_id FROM documents WHERE document_name = 'Customer reviews' );,SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Customer reviews' );,SELECT Paragraph_Text FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Customer reviews',SELECT Paragraph_Text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews',SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews',"select paragraphs.paragraph_text from documents join paragraphs on documents.document_id = paragraphs.document_id where documents.document_name = ""Customer reviews""",select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Customer reviews',"select paragraphs.paragraph_text from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID where  documents.document_name = ""Customer reviews"""
"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id, COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;","SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;","SELECT Document_ID , count(*) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID","SELECT Documents.Document_ID, count(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID","SELECT Document_ID, COUNT(Paragraph_ID) AS NumberOfParagraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID","select document_id, count(*) from paragraphs group by document_id order by document_id","select document_id, count(*) from paragraphs group by document_id order by count(*) desc","select paragraphs.document_id , count(*) from Paragraphs  group by paragraphs.document_id  order by count(*) asc"
"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS paragraph_count FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY documents.document_id;","SELECT Document_ID, COUNT(Paragraph_ID) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;","SELECT Document_ID, COUNT(*) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID","SELECT Documents.Document_ID, count(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID","SELECT Document_ID, COUNT(Paragraph_ID) AS NumberOfParagraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID","select document_id, count(*) from paragraphs group by document_id order by document_id","select document_id, count(*) from paragraphs group by document_id order by count(*) asc","select paragraphs.document_id , count(*) from Paragraphs  group by paragraphs.document_id  order by count(*) asc"
"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) as paragraph_count FROM documents INNER JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name;","SELECT      d.Document_ID,     d.Document_Name,     COUNT(p.Paragraph_ID) AS Paragraph_Count FROM      Documents d     LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY     d.Document_ID, d.Document_Name;","SELECT T1.Document_ID, T1.Document_Name, COUNT(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name","SELECT T1.Document_ID, T1.Document_Name, count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name","SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS NumberOfParagraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name","select documents.document_id, documents.document_name, count(*) from paragraphs join documents on paragraphs.document_id = documents.document_id group by documents.document_id","select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id","select documents.document_id , documents.document_name , count(*) from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id"
"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) AS number_of_paragraphs FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name;","SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name","SELECT T1.Document_ID , T1.Document_Name , count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID","SELECT T1.Document_ID, T1.Document_Name, count(T2.Paragraph_ID) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name","SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) AS NumberOfParagraphs FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name","select documents.document_id, documents.document_name, count(*) from paragraphs join documents on paragraphs.document_id = documents.document_id group by documents.document_id","select t1.document_id, t1.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id","select documents.document_id , documents.document_name , count(*) from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id"
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT documents.document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;,SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;,SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2,SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID  =  T2.Document_ID GROUP BY T1.Document_ID HAVING count(*)  >=  2,SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2,select document_id from paragraphs group by document_id having count(*) >= 2,select document_id from paragraphs group by document_id having count(*) >= 2,select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT documents.document_id FROM documents INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;,SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;,SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING count(*) >= 2,SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING count(*) >= 2,SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2,select document_id from paragraphs group by document_id having count(*) >= 2,select document_id from paragraphs group by document_id having count(*) >= 2,select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) >= 2
"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;","SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;","SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY count(*) DESC LIMIT 1","SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY count(T2.Paragraph_ID) DESC LIMIT 1","SELECT Document_ID, Document_Name FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) DESC LIMIT 1","select documents.document_id, documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count(*) desc limit 1","select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1","select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1;","SELECT d.Document_ID, d.Document_Name FROM Documents d INNER JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;","SELECT T1.Document_ID , T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY count(*) DESC LIMIT 1","SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY COUNT(*) DESC LIMIT 1","SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID = (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   ORDER BY COUNT(Paragraph_ID) DESC   LIMIT 1 )","select documents.document_id, documents.document_name from documents join paragraphs on documents.document_id = paragraphs.document_id group by documents.document_id order by count(*) desc limit 1","select t1.document_id, t1.document_name from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id order by count(*) desc limit 1","select documents.document_id , documents.document_name from Paragraphs join Documents on Paragraphs.Document_ID = Documents.Document_ID  group by paragraphs.document_id  order by count(*) desc limit 1"
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) LIMIT 1;,SELECT d.Document_ID FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) ASC LIMIT 1;,SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY count(*) LIMIT 1;,"SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) as paragraph_count FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY paragraph_count ASC LIMIT 1","SELECT Document_ID, COUNT(Paragraph_ID) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID ORDER BY ParagraphCount ASC LIMIT 1",select document_id from paragraphs group by document_id order by count(*) asc limit 1,select document_id from paragraphs group by document_id order by count(*) asc limit 1,select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) ASC LIMIT 1;,SELECT d.Document_ID FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) ASC LIMIT 1;,SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY count(*) ASC LIMIT 1,"SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) as paragraph_count FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY paragraph_count ASC LIMIT 1",SELECT Document_ID FROM Documents LEFT JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY COUNT(Paragraphs.Paragraph_ID) ASC LIMIT 1,select document_id from paragraphs group by document_id order by count(*) asc limit 1,select document_id from paragraphs group by document_id order by count(*) asc limit 1,select paragraphs.document_id from Paragraphs  group by paragraphs.document_id  order by count(*) asc limit 1
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2;,SELECT Document_ID FROM Documents d WHERE (SELECT COUNT(*) FROM Paragraphs p WHERE p.Document_ID = d.Document_ID) BETWEEN 1 AND 2;,SELECT Document_ID FROM Documents WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2),SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING count(T2.Paragraph_ID) BETWEEN 1 AND 2,SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2 ),select document_id from paragraphs group by document_id having count(*) between 1 and 2,select document_id from paragraphs group by document_id having count(*) between 1 and 2,select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) between 1 and 2
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) BETWEEN 1 AND 2;,SELECT Document_ID FROM Documents d WHERE (SELECT COUNT(*) FROM Paragraphs p WHERE p.Document_ID = d.Document_ID) BETWEEN 1 AND 2;,SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;,SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING count(T2.Paragraph_ID) BETWEEN 1 AND 2,SELECT Document_ID FROM Documents WHERE Document_ID IN (   SELECT Document_ID   FROM Paragraphs   GROUP BY Document_ID   HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2 ),select document_id from paragraphs group by document_id having count(*) between 1 and 2,select document_id from paragraphs group by document_id having count(*) between 1 and 2,select paragraphs.document_id from Paragraphs  group by paragraphs.document_id having  count(*) between 1 and 2
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');","SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY Document_ID HAVING COUNT(DISTINCT Paragraph_Text) = 2;","SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland')",SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE '%Brazil%' OR T2.Paragraph_Text LIKE '%Ireland%',"SELECT Documents.Document_ID FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Paragraphs.Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY Documents.Document_ID HAVING COUNT(DISTINCT Paragraphs.Paragraph_Text) = 2","select document_id from paragraphs where paragraph_text = ""Brazil"" intersect select document_id from paragraphs where paragraph_text = ""Ireland""",select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland',"select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = ""Brazil""   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = ""Ireland"""
SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT documents.document_id FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id WHERE paragraphs.paragraph_text IN ('Brazil', 'Ireland');","SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland');",SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%',SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' INTERSECT SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Ireland%',"SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text IN ('Brazil', 'Ireland') GROUP BY Document_ID HAVING COUNT(DISTINCT Paragraph_Text) = 2","select document_id from paragraphs where paragraph_text = ""Brazil"" intersect select document_id from paragraphs where paragraph_text = ""Ireland""",select document_id from paragraphs where paragraph_text = 'Brazil' intersect select document_id from paragraphs where paragraph_text = 'Ireland',"select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = ""Brazil""   intersect select paragraphs.document_id from Paragraphs where  paragraphs.paragraph_text = ""Ireland"""
SELECT count(*) FROM teacher,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT COUNT(*) FROM teacher;,SELECT COUNT(*) FROM teacher;,SELECT count(*) FROM teacher,SELECT COUNT(*) FROM teacher,SELECT COUNT(*) FROM teacher,select count(*) from teacher,select count(*) from teacher,select count(*) from teacher
SELECT count(*) FROM teacher,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT COUNT(*) FROM teacher;,SELECT COUNT(*) AS total_teachers FROM teacher;,SELECT count(*) FROM teacher,SELECT COUNT(*) FROM teacher,SELECT COUNT(Teacher_ID) FROM teacher;,select count(*) from teacher,select count(*) from teacher,select count(*) from teacher
SELECT Name FROM teacher ORDER BY Age ASC,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT name FROM teacher ORDER BY age ASC;,SELECT Name FROM teacher ORDER BY Age ASC;,SELECT Name FROM teacher ORDER BY Age ASC,SELECT Name FROM teacher ORDER BY Age ASC,SELECT Name FROM teacher ORDER BY Age ASC,select name from teacher order by age asc,select name from teacher order by age asc,select teacher.name from teacher   order by teacher.age asc
SELECT Name FROM teacher ORDER BY Age ASC,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT name FROM teacher ORDER BY age ASC;,SELECT Name FROM teacher ORDER BY Age ASC;,SELECT Name FROM teacher ORDER BY Age ASC,SELECT Name FROM teacher ORDER BY Age ASC,SELECT Name FROM teacher ORDER BY Age ASC,select name from teacher order by age asc,select name from teacher order by age asc,select teacher.name from teacher   order by teacher.age asc
"SELECT Age ,  Hometown FROM teacher",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT age, hometown FROM teacher;","SELECT Name, Age, Hometown FROM teacher;","SELECT Age , Hometown FROM teacher","SELECT Age, Hometown FROM teacher","SELECT Age, Hometown FROM teacher","select age, hometown from teacher","select age, hometown from teacher","select teacher.age , teacher.hometown from teacher"
"SELECT Age ,  Hometown FROM teacher",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT teacher.age, teacher.hometown FROM teacher;","SELECT Name, Age, Hometown FROM teacher;","SELECT Age , Hometown FROM teacher","SELECT Age, Hometown FROM teacher","SELECT Age, Hometown FROM teacher","select age, hometown from teacher","select age, hometown from teacher","select teacher.age , teacher.hometown from teacher"
"select name from teacher where hometown != ""little lever urban district""",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT teacher.name FROM teacher WHERE teacher.hometown != 'Little Lever Urban District';,SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';,"SELECT Name FROM teacher WHERE Hometown != ""Little Lever Urban District""",SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District',SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';,"select name from teacher where hometown!= ""Little lever Urban District""","select name from teacher where hometown!= ""Little Lever Urban District""","select teacher.name from teacher where  teacher.hometown != ""Little Lever Urban District"""
"select name from teacher where hometown != ""little lever urban district""",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';,SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';,"SELECT Name FROM teacher WHERE Hometown != ""Little Lever Urban District""",SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District',SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District',"select name from teacher where hometown!= ""Little lever Urban District""","select name from teacher where hometown!= ""Little Lever Urban District""","select teacher.name from teacher where  teacher.hometown != ""Little Lever Urban District"""
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT name FROM teacher WHERE age IN (32, 33);","SELECT Name FROM teacher WHERE Age IN (32, 33);","SELECT Name FROM teacher WHERE Age = ""32"" OR Age = ""33""",SELECT Name FROM teacher WHERE Age = 32 OR Age = 33,"SELECT Name FROM teacher WHERE Age IN (32, 33);",select name from teacher where age = 32 or age = 33,select name from teacher where age = 32 or age = 33,select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33
SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT name FROM teacher WHERE age IN (32, 33)","SELECT Name FROM teacher WHERE Age IN (32, 33);",SELECT Name FROM teacher WHERE Age = '32' OR Age = '33',SELECT Name FROM teacher WHERE Age = 32 OR Age = 33,"SELECT Name FROM teacher WHERE Age IN (32, 33);",select name from teacher where age = 32 or age = 33,select name from teacher where age = 32 or age = 33,select teacher.name from teacher where  teacher.age = 32 or teacher.age = 33
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher),SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,select hometown from teacher order by age asc limit 1,select hometown from teacher order by age asc limit 1,select teacher.hometown from teacher   order by teacher.age asc limit 1
SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,select hometown from teacher order by age asc limit 1,select hometown from teacher order by age asc limit 1,select teacher.hometown from teacher   order by teacher.age asc limit 1
"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT teacher.hometown, COUNT(*) as num_teachers FROM teacher GROUP BY teacher.hometown;","SELECT Hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY Hometown;","SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown","SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown","SELECT Hometown, COUNT(Teacher_ID) AS NumberOfTeachers FROM teacher GROUP BY Hometown","select hometown, count(*) from teacher group by hometown","select hometown, count(*) from teacher group by hometown","select teacher.hometown , count(*) from teacher  group by teacher.hometown"
"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT teacher.hometown, count(*) FROM teacher GROUP BY teacher.hometown;","SELECT Hometown, COUNT(*) AS num_teachers FROM teacher GROUP BY Hometown;","SELECT Hometown , COUNT(*) FROM teacher GROUP BY Hometown","SELECT COUNT(Teacher_ID), Hometown FROM teacher GROUP BY Hometown","SELECT COUNT(Teacher_ID) AS NumberOfTeachers, Hometown FROM teacher GROUP BY Hometown","select hometown, count(*) from teacher group by hometown","select hometown, count(*) from teacher group by hometown","select teacher.hometown , count(*) from teacher  group by teacher.hometown"
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,SELECT MAX(COUNT(Hometown)) FROM teacher GROUP BY Hometown;,select hometown from teacher group by hometown order by count(*) desc limit 1,select hometown from teacher group by hometown order by count(*) desc limit 1,select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,"SELECT Hometown, COUNT(*) as count FROM teacher GROUP BY Hometown ORDER BY count DESC LIMIT 1","SELECT COUNT(Hometown), Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1",select hometown from teacher group by hometown order by count(*) desc limit 1,select hometown from teacher group by hometown order by count(*) desc limit 1,select teacher.hometown from teacher  group by teacher.hometown  order by count(*) desc limit 1
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT DISTINCT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) > 1;,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2,SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(*) > 1,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2,select hometown from teacher group by hometown having count(*) >= 2,select hometown from teacher group by hometown having count(*) >= 2,select teacher.hometown from teacher  group by teacher.hometown having  count(*) >= 2
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT teacher.hometown FROM teacher GROUP BY teacher.hometown HAVING COUNT(DISTINCT teacher.teacher_id) >= 2;,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2,SELECT Hometown FROM teacher GROUP BY Hometown HAVING count(Teacher_ID) >= 2,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;,select hometown from teacher group by hometown having count(*) >= 2,select hometown from teacher group by hometown having count(*) >= 2,select teacher.hometown from teacher  group by teacher.hometown having  count(*) >= 2
"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT teacher.name, course.course FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id;","SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;","SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID","SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID","SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID","select teacher.name, course.course_id from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id","select t2.name, t3.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id","select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID"
"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;","SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;","SELECT T2.Name , T1.Course FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID","SELECT T1.Name, T2.Course  FROM teacher AS T1  JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID  JOIN course AS T2 ON T3.Course_ID = T2.Course_ID","SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID","select teacher.name, course.course from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id","select t2.name, t3.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id","select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID"
"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT teacher.name, course.course FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;","SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;","SELECT T2.Name, T1.Course FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T1.Course_ID = T3.Course_ID ORDER BY T2.Name ASC","SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC","SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC","select teacher.name, course.course from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id order by teacher.name asc","select t2.name, t3.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id order by t2.name asc","select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc"
"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;","SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;","SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC","SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID ORDER BY T1.Name ASC","SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC","select teacher.name, course.course from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id join course on course_arrange.course_id = course.course_id order by teacher.name","select t2.name, t3.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id order by t2.name asc","select teacher.name , course.course from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID   order by teacher.name asc"
"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  ""Math""",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT teacher.name FROM course_arrange JOIN teacher ON course_arrange.teacher_id = teacher.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = ""Math"";",SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';,SELECT T2.Name FROM course AS T1 JOIN course_arrange AS T3 ON T1.Course_ID = T3.Course_ID JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID WHERE T1.Course = 'Math',SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'math',SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'Math';,select teacher.name from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math',"select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t3.course = ""Math""","select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = ""Math"""
"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  ""Math""",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math';,SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';,"SELECT T.Name FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID JOIN course AS C ON CA.Course_ID = C.Course_ID WHERE C.Course = ""Math""",SELECT DISTINCT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course = 'math',SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'Math',select teacher.name from course join course_arrange on course.course_id = course_arrange.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id where course.course = 'Math',select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t3.course = 'Math',"select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID join course on course_arrange.Course_ID = course.Course_ID where  course.course = ""Math"""
"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT teacher.name, COUNT(course_arrange.course_id) FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;","SELECT t.Name, COUNT(ca.Course_ID) AS num_courses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;","SELECT T1.Name , COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name","SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name","SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS NumberOfCourses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name","select teacher.name, count(*) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name","select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name","select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id"
"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT teacher.name, COUNT(course_arrange.course_id) FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;","SELECT t.Name, COUNT(ca.Course_ID) AS num_courses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;","SELECT T2.Name , COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name","SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name","SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS NumberOfCourses FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name","select teacher.name, count(*) from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by teacher.name","select t2.name, count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name","select teacher.name , count(*) from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by teacher.name"
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2);,SELECT Name FROM teacher WHERE Teacher_ID IN (   SELECT Teacher_ID   FROM course_arrange   GROUP BY Teacher_ID   HAVING COUNT(DISTINCT Course_ID) >= 2 );,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(*) >= 2,SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING count(*)  >=  2,SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name HAVING COUNT(course_arrange.Course_ID) >= 2,select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count(*) >= 2,select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name having count(*) >= 2,select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT name FROM teacher WHERE teacher_id IN ( SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(DISTINCT course_id) >= 2 );,SELECT Name FROM teacher WHERE Teacher_ID IN (   SELECT Teacher_ID   FROM course_arrange   GROUP BY Teacher_ID   HAVING COUNT(DISTINCT Course_ID) >= 2 );,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(*) >= 2,"SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T1.Teacher_ID, T1.Name HAVING count(*)  >=  2",SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Teacher_ID HAVING COUNT(course_arrange.Course_ID) >= 2,select teacher.name from course_arrange join teacher on course_arrange.teacher_id = teacher.teacher_id group by course_arrange.teacher_id having count(*) >= 2,select t1.name from teacher as t1 join course_arrange as t2 on t1.teacher_id = t2.teacher_id group by t2.teacher_id having count(*) >= 2,select teacher.name from course_arrange join teacher on course_arrange.Teacher_ID = teacher.Teacher_ID  group by course_arrange.teacher_id having  count(*) >= 2
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT name FROM teacher WHERE teacher_id NOT IN ( SELECT teacher_id FROM course_arrange ),SELECT Name FROM teacher WHERE Teacher_ID NOT IN (   SELECT Teacher_ID   FROM course_arrange );,SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange),SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange),SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);,select name from teacher where teacher_id not in (select teacher_id from course_arrange),select name from teacher where teacher_id not in (select teacher_id from course_arrange),select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )
SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL;,SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Teacher_ID IS NULL;,SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange),SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange),SELECT teacher.Name FROM teacher LEFT JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID WHERE course_arrange.Course_ID IS NULL,select name from teacher where teacher_id not in (select teacher_id from course_arrange),select name from teacher where teacher_id not in (select teacher_id from course_arrange),select teacher.name from teacher where  teacher.teacher_id not in (select course_arrange.Teacher_ID from course_arrange  )
SELECT count(*) FROM visitor WHERE age  <  30,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(*) FROM visitor WHERE age < 30;,SELECT COUNT(*)  FROM visitor WHERE Age < 30;,SELECT count(*) FROM visitor WHERE Age < 30;,SELECT COUNT(*) FROM visitor WHERE Age < 30,SELECT COUNT(*) FROM visitor WHERE Age < 30,select count(*) from visitor where age < 30,select count(*) from visitor where age < 30,select count(*) from visitor where  visitor.age < 30
SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT name FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC;,"SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;",SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC,SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC,SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC,select name from visitor where level_of_membership > 4 order by level_of_membership,select name from visitor where level_of_membership > 4 order by level_of_membership desc,select visitor.name from visitor where  visitor.level_of_membership > 4   order by visitor.level_of_membership desc
SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;,SELECT AVG(Age) AS avg_age FROM visitor WHERE Level_of_membership <= 4;,SELECT avg(Age) FROM visitor WHERE Level_of_membership <= 4,SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4,SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4,select avg(age) from visitor where level_of_membership!= 4,select avg(age) from visitor where level_of_membership!= 4,select avg(visitor.age) from visitor where  visitor.level_of_membership > 4
"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.level_of_membership > 4 ORDER BY visitor.age DESC;","SELECT Name, Level_of_membership, Age FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;","SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC","SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC","SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC","select name, level_of_membership from visitor where level_of_membership > 4 order by age desc","select name, level_of_membership from visitor where level_of_membership > 4 order by age desc","select visitor.name , visitor.level_of_membership from visitor where  visitor.level_of_membership > 4   order by visitor.age desc"
"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;","SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);","SELECT Museum_ID , Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1","SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1","SELECT MAX(Num_of_Staff), Name FROM museum GROUP BY Museum_ID ORDER BY Num_of_Staff DESC LIMIT 1","select museum_id, name from museum order by num_of_staff desc limit 1","select museum_id, name from museum order by num_of_staff desc limit 1","select museum.museum_id , museum.name from museum   order by museum.num_of_staff desc limit 1"
SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT avg(num_of_staff) FROM museum WHERE open_year < 2009;,SELECT AVG(Num_of_Staff) AS avg_staff FROM museum WHERE Open_Year < 2009;,SELECT avg(Num_of_Staff) FROM museum WHERE Open_Year < '2009',SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009,SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < 2009,select avg(num_of_staff) from museum where open_year < 2009,select avg(num_of_staff) from museum where open_year < 2009,select avg(museum.num_of_staff) from museum where  museum.open_year < 2009
"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT open_year, num_of_staff FROM museum WHERE name = ""Plaza Museum"";","SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';","SELECT Open_Year , Num_of_Staff FROM museum WHERE Name = ""Plaza Museum""","SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'","SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'","select open_year, num_of_staff from museum where name = 'Plaza Museum'","select open_year, num_of_staff from museum where name = ""Plaza Museum""","select museum.open_year , museum.num_of_staff from museum where  museum.name = ""Plaza Museum"""
SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010),museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT museum.name FROM museum WHERE museum.num_of_staff > ( SELECT MIN(num_of_staff) FROM museum WHERE museum.open_year > 2010 );,SELECT Name FROM museum WHERE Num_of_Staff > (   SELECT MIN(Num_of_Staff)   FROM museum   WHERE Open_Year > 2010 );,SELECT Name FROM museum WHERE Num_of_Staff > (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year > '2010'),SELECT Name FROM museum WHERE Num_of_Staff > (SELECT min(Num_of_Staff) FROM museum WHERE Open_Year > 2010),SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > 2010) AS MinStaffAfter2010 FROM museum WHERE Num_of_Staff > (   SELECT MIN(Num_of_Staff)   FROM museum   WHERE Open_Year > 2010 );,select name from museum where num_of_staff > (select min(num_of_staff) from museum where open_year > 2010),select name from museum where num_of_staff > (select min(num_of_staff) from museum where open_year > 2010),select museum.name from museum where  museum.num_of_staff > (select min(museum.num_of_staff) from museum where  museum.open_year > 2010  )
"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.age HAVING COUNT(DISTINCT visit.museum_id) > 1;","SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Age HAVING COUNT(vi.Museum_ID) > 1;","SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T2.visitor_ID HAVING COUNT(*) > 1","SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 WHERE T1.ID IN (SELECT visitor_ID FROM visit GROUP BY visitor_ID, Museum_ID HAVING count(*) > 1)","SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID HAVING COUNT(visit.Museum_ID) > 1","select visitor.id, visitor.name, visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id having count(*) > 1","select t1.id, t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id having count(*) > 1","select visit.visitor_id , visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id having  count(*) > 1"
"SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;","SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Level_of_membership ORDER BY SUM(vi.Total_spent) DESC LIMIT 1;","SELECT T2.ID, T2.Name, T2.Level_of_membership FROM visitor AS T2 JOIN visit AS T1 ON T2.ID = T1.visitor_ID GROUP BY T2.ID ORDER BY SUM(T1.Total_spent) DESC LIMIT 1","SELECT T1.ID, T1.Name, T1.Level_of_membership FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.Total_spent = (SELECT max(Total_spent) FROM visit)","SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID ORDER BY SUM(visit.Total_spent) DESC LIMIT 1","select visitor.id, visitor.name, visitor.level_of_membership from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum(total_spent) desc limit 1","select t1.id, t1.name, t1.level_of_membership from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t1.id order by sum(total_spent) desc limit 1","select visitor.id , visitor.name , visitor.level_of_membership from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.total_spent) desc limit 1"
"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT visit.museum_id, museum.name FROM visit JOIN museum ON visit.museum_id = museum.museum_id GROUP BY visit.museum_id, museum.name ORDER BY COUNT(*) DESC LIMIT 1;","SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY COUNT(*) DESC LIMIT 1;","SELECT T1.Museum_ID , T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY count(*) DESC LIMIT 1","SELECT T1.Museum_ID, T1.Name FROM museum AS T1 JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID, T1.Name HAVING COUNT(*) = (     SELECT MAX(count)     FROM (         SELECT COUNT(*) AS count         FROM visit         GROUP BY Museum_ID     ) AS T3 )","SELECT Museum_ID, Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY Museum_ID, Name ORDER BY COUNT(visit.Museum_ID) DESC LIMIT 1","select museum.museum_id, museum.name from museum join visit on museum.museum_id = visit.museum_id group by visit.museum_id order by count(*) desc limit 1","select t1.museum_id, t1.name from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id group by t2.museum_id order by count(*) desc limit 1","select museum.museum_id , museum.name from visit join museum on visit.Museum_ID = museum.Museum_ID  group by visit.museum_id  order by count(*) desc limit 1"
SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit),museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT museum.name FROM museum WHERE museum.museum_id NOT IN (SELECT visit.museum_id FROM visit),SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.Museum_ID IS NULL;,SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit),SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit),SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.visitor_ID IS NULL,select name from museum where museum_id not in (select museum_id from visit),select name from museum where museum_id not in (select museum_id from visit),select museum.name from museum where  museum.museum_id not in (select visit.Museum_ID from visit  )
"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visit.visitor_id ORDER BY MAX(visit.num_of_ticket) DESC LIMIT 1;","SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID WHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);","SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID ORDER BY T2.Num_of_Ticket DESC LIMIT 1","SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T2.Num_of_Ticket = (SELECT max(Num_of_Ticket) FROM visit)","SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1","select visitor.name, visitor.age from visitor join visit on visitor.id = visit.visitor_id group by visit.visitor_id order by sum(visit.num_of_ticket) desc limit 1","select t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id order by sum(t2.num_of_ticket) desc limit 1","select visitor.name , visitor.age from visit join visitor on visit.visitor_ID = visitor.ID  group by visit.visitor_id  order by sum(visit.num_of_ticket) desc limit 1"
"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;","SELECT AVG(Num_of_Ticket) AS avg_tickets, MAX(Num_of_Ticket) AS max_tickets FROM visit;","SELECT avg(Num_of_Ticket) , max(Num_of_Ticket) FROM visit","SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit","SELECT AVG(Num_of_Ticket) AS Average_Tickets, MAX(Num_of_Ticket) AS Maximum_Tickets FROM visit","select avg(num_of_ticket), max(num_of_ticket) from visit","select avg(num_of_ticket), max(num_of_ticket) from visit","select avg(visit.num_of_ticket) , max(visit.num_of_ticket) from visit"
SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1);,SELECT SUM(v.Num_of_Ticket) AS total_ticket_expense FROM visit v JOIN visitor vi ON v.visitor_ID = vi.ID WHERE vi.Level_of_membership = 1;,SELECT sum(Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1,SELECT sum(T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID  =  T2.ID WHERE T2.Level_of_membership  =  1,SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1,select sum(visit.total_spent) from visit join visitor on visit.visitor_id = visitor.id where visitor.level_of_membership = 1,select sum(t1.total_spent) from visit as t1 join visitor as t2 on t1.visitor_id = t2.id where t2.level_of_membership = 1,select sum(visit.total_spent) from visit join visitor on visit.visitor_ID = visitor.ID where  visitor.level_of_membership = 1
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year < 2009 INTERSECT SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2011;,SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 OR m.Open_Year > 2011 GROUP BY v.Name HAVING COUNT(DISTINCT CASE WHEN m.Open_Year < 2009 THEN m.Museum_ID END) > 0    AND COUNT(DISTINCT CASE WHEN m.Open_Year > 2011 THEN m.Museum_ID END) > 0;,SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 JOIN museum AS T3 ON T1.ID = T2.visitor_ID AND T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < '2009' INTERSECT SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 JOIN museum AS T3 ON T1.ID = T2.visitor_ID AND T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year > '2011',SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.Open_Year  <  2009 INTERSECT SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID  =  T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID  =  T3.Museum_ID WHERE T3.Open_Year  >  2011,SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 OR museum.Open_Year > 2011 GROUP BY visitor.Name HAVING COUNT(DISTINCT museum.Museum_ID) > 1,select visitor.name from visit join museum on visit.museum_id = museum.museum_id join visitor on visit.visitor_id = visitor.id where museum.open_year < 2009 intersect select visitor.name from visit join museum on visit.museum_id = museum.museum_id join visitor on visit.visitor_id = visitor.id where museum.open_year > 2011,select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id join museum as t3 on t2.museum_id = t3.museum_id where t3.open_year < 2009 intersect select t1.name from visitor as t1 join visit as t2 on t1.id = t2.visitor_id join museum as t3 on t2.museum_id = t3.museum_id where t3.open_year > 2011,select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year < 2009   intersect select visitor.name from visit join visitor on visit.visitor_ID = visitor.ID join museum on visit.Museum_ID = museum.Museum_ID where  museum.open_year > 2011
SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010),museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(DISTINCT visitor_id) FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year <= 2010),SELECT COUNT(*) AS num_visitors_not_visiting_new_museums FROM visitor v WHERE NOT EXISTS (   SELECT 1   FROM visit vi   JOIN museum m ON vi.museum_id = m.museum_id   WHERE vi.visitor_id = v.id AND m.open_year > 2010 );,SELECT count(*) FROM visitor WHERE ID NOT IN ( SELECT visitor_ID FROM visit WHERE Museum_ID IN (SELECT Museum_ID FROM museum WHERE Open_Year > '2010')),SELECT count(ID) FROM visitor WHERE ID NOT IN (SELECT visitor_ID FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Open_Year > 2010),SELECT COUNT(DISTINCT visitor.ID) FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year <= 2010 OR museum.Open_Year IS NULL,select count(*) from visitor where id not in (select visit.visitor_id from visit join museum on visit.museum_id = museum.museum_id where museum.open_year > 2010),select count(*) from visitor where id not in ( select visitor_id from visit as t1 join museum as t2 on t1.museum_id = t2.museum_id where t2.open_year > 2010 ),select count(*) from visit where  visit.museum_id not in (select museum.Museum_ID from museum where  museum.open_year > 2010  )
SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008;,SELECT COUNT(*)  FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008;,SELECT count(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008',SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008,SELECT COUNT(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008,select count(*) from museum where open_year > 2013 or open_year < 2008,select count(*) from museum where open_year > 2013 or open_year < 2008,select count(*) from museum where  museum.open_year > 2013 or museum.open_year < 2008
SELECT count(*) FROM players,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) FROM players;,SELECT COUNT(*) AS total_players FROM players;,SELECT count(*) FROM players,SELECT COUNT(*) FROM players,SELECT COUNT(DISTINCT player_id) FROM players,select count(*) from players,select count(*) from players,select count(*) from players
SELECT count(*) FROM players,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) FROM players;,SELECT COUNT(*) FROM players;,SELECT count(*) FROM players,SELECT COUNT(*) FROM players,SELECT COUNT(player_id) FROM players,select count(*) from players,select count(*) from players,select count(*) from players
SELECT count(*) FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) FROM matches;,SELECT COUNT(*) FROM matches;,SELECT count(*) FROM matches,SELECT COUNT(*) FROM matches,SELECT COUNT(*) FROM matches;,select count(*) from matches,select count(*) from matches,select count(*) from matches
SELECT count(*) FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) FROM matches;,SELECT COUNT(*) FROM matches;,SELECT count(*) FROM matches,SELECT COUNT(*) FROM matches,SELECT COUNT(*) FROM matches;,select count(*) from matches,select count(*) from matches,select count(*) from matches
"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.birth_date FROM players WHERE players.country_code = ""USA"";","SELECT first_name, birth_date FROM players WHERE country_code = 'USA';","SELECT first_name, birth_date FROM players WHERE country_code = ""USA""","SELECT first_name, birth_date FROM players WHERE country_code = 'USA'","SELECT first_name, birth_date FROM players WHERE country_code = 'USA'","select first_name, birth_date from players where country_code = 'USA'","select first_name, birth_date from players where country_code = 'USA'","select players.first_name , players.birth_date from players where  players.country_code = ""USA"""
"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.birth_date FROM players WHERE players.player_id IN (SELECT player_id FROM rankings WHERE player_id IN (SELECT winner_id FROM matches WHERE winner_ioc = ""USA"") OR player_id IN (SELECT loser_id FROM matches WHERE winner_ioc = ""USA""));","SELECT first_name, birth_date FROM players WHERE country_code = 'USA';","SELECT first_name, birth_date FROM players WHERE country_code = 'USA'","SELECT first_name, birth_date FROM players WHERE country_code = 'USA'","SELECT first_name, birth_date FROM players WHERE country_code = 'USA'","select first_name, birth_date from players where country_code = 'USA'","select first_name, birth_date from players where country_code = 'USA'","select players.first_name , players.birth_date from players where  players.country_code = ""USA"""
"SELECT avg(loser_age) ,  avg(winner_age) FROM matches",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT (SELECT AVG(loser_age) FROM matches) AS average_loser_age, (SELECT AVG(winner_age) FROM matches) AS average_winner_age;","SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;","SELECT avg(loser_age) , avg(winner_age) FROM matches","SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches","SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;","select avg(loser_age), avg(winner_age) from matches","select avg(loser_age), avg(winner_age) from matches","select avg(matches.loser_age) , avg(matches.winner_age) from matches"
"SELECT avg(loser_age) ,  avg(winner_age) FROM matches",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;","SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;","SELECT avg(loser_age) , avg(winner_age) FROM matches","SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches","SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;","select avg(loser_age), avg(winner_age) from matches","select avg(loser_age), avg(winner_age) from matches","select avg(matches.loser_age) , avg(matches.winner_age) from matches"
SELECT avg(winner_rank) FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT AVG(rankings.ranking) as average_rank FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id;,SELECT AVG(winner_rank) AS avg_winner_rank FROM matches;,SELECT avg(winner_rank) FROM matches,SELECT AVG(winner_rank) FROM matches,SELECT AVG(winner_rank) FROM matches,select avg(winner_rank) from matches,select avg(winner_rank) from matches,select avg(matches.winner_rank) from matches
SELECT avg(winner_rank) FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT AVG(winner_rank) FROM matches;,SELECT AVG(winner_rank) AS avg_winner_rank FROM matches;,SELECT avg(winner_rank) FROM matches,SELECT AVG(winner_rank) FROM matches,SELECT AVG(winner_rank) FROM matches,select avg(winner_rank) from matches,select avg(winner_rank) from matches,select avg(matches.winner_rank) from matches
SELECT min(loser_rank) FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT MAX(loser_rank) FROM matches;,SELECT MAX(loser_rank) FROM matches;,SELECT max(loser_rank) FROM matches,SELECT MAX(loser_rank) FROM matches,SELECT MIN(loser_rank) FROM matches;,select min(loser_rank) from matches,select loser_rank from matches order by loser_rank_points desc limit 1,select min(matches.loser_rank) from matches
SELECT min(loser_rank) FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT MAX(loser_rank) FROM matches;,SELECT MIN(loser_rank) AS best_loser_rank FROM matches;,SELECT min(loser_rank) FROM matches,SELECT MIN(loser_rank) FROM matches,SELECT MIN(loser_rank) FROM matches;,select min(loser_rank) from matches,select loser_rank from matches group by loser_rank order by sum(loser_rank) desc limit 1,select matches.loser_rank from matches   order by matches.loser_rank desc limit 1
SELECT count(DISTINCT country_code) FROM players,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(DISTINCT country_code) FROM players;,SELECT COUNT(DISTINCT country_code) FROM players;,SELECT count(DISTINCT country_code) FROM players,SELECT COUNT(DISTINCT country_code) FROM players,SELECT COUNT(DISTINCT country_code) FROM players,select count(distinct country_code) from players,select count(distinct country_code) from players,select count( distinct players.country_code) from players
SELECT count(DISTINCT country_code) FROM players,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(DISTINCT country_code) FROM players;,SELECT COUNT(DISTINCT country_code) FROM players;,SELECT COUNT(DISTINCT country_code) FROM players,SELECT COUNT(DISTINCT country_code) FROM players,SELECT COUNT(DISTINCT country_code) FROM players,select count(distinct country_code) from players,select count(distinct country_code) from players,select count( distinct players.country_code) from players
SELECT count(DISTINCT loser_name) FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(DISTINCT loser_name) FROM matches;,SELECT COUNT(DISTINCT loser_name) FROM matches;,SELECT count(DISTINCT loser_name) FROM matches,SELECT COUNT(DISTINCT loser_name) FROM matches,SELECT COUNT(DISTINCT loser_name) FROM matches;,select count(distinct loser_name) from matches,select count(distinct loser_name) from matches,select count( distinct matches.loser_name) from matches
SELECT count(DISTINCT loser_name) FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(DISTINCT loser_name) FROM matches;,SELECT COUNT(DISTINCT loser_name) FROM matches;,SELECT count(DISTINCT loser_name) FROM matches,SELECT COUNT(DISTINCT loser_name) FROM matches,SELECT COUNT(DISTINCT loser_name) FROM matches,select count(distinct loser_name) from matches,select count(distinct loser_name) from matches,select count( distinct matches.loser_name) from matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10;,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10,select tourney_name from matches group by tourney_name having count(*) > 10,select tourney_name from matches group by tourney_name having count(*) > 10,select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(match_num) > 10,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10,select tourney_name from matches group by tourney_name having count(*) > 10,select tourney_name from matches group by tourney_name having count(*) > 10,select matches.tourney_name from matches  group by matches.tourney_name having  count(*) > 10
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT DISTINCT first_name, last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 INTERSECT SELECT DISTINCT first_name, last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2016;","SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016);",SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016,"SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.year = 2013","SELECT winner_name FROM matches WHERE year IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT year) = 2",select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016,select winner_name from matches where year = 2013 intersect select winner_name from matches where year = 2016,select matches.winner_name from matches where  matches.year = 2013   intersect select matches.winner_name from matches where  matches.year = 2016
SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2013 INTERSECT SELECT players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = 2016;","SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.year IN (2013, 2016) GROUP BY p.player_id HAVING COUNT(DISTINCT m.year) = 2;","SELECT first_name, last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013 INTERSECT SELECT winner_id FROM matches WHERE year = 2016)","SELECT T1.first_name, T1.last_name  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.year = 2013",SELECT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT winner_name FROM matches WHERE year = 2016,"select players.first_name, players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2013 intersect select players.first_name, players.last_name from players join matches on players.player_id = matches.winner_id where matches.year = 2016","select t1.first_name, t1.last_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.year = 2013 intersect select t1.first_name, t1.last_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.year = 2016","select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2013   intersect select players.first_name , players.last_name from matches join players on matches.winner_id = players.player_id where  matches.year = 2016"
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;,"SELECT COUNT(*) AS num_matches FROM matches WHERE year IN (2013, 2016);","SELECT count(*) FROM matches WHERE year IN (2013, 2016);",SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016,"SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);",select count(*) from matches where year = 2013 or year = 2016,select count(*) from matches where year = 2013 or year = 2016,select count(*) from matches where  matches.year = 2013 or matches.year = 2016
SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;,"SELECT COUNT(*)  FROM matches WHERE year IN (2013, 2016);","SELECT count(*) FROM matches WHERE year IN (2013, 2016);",SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016,"SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016);",select count(*) from matches where year = 2013 or year = 2016,select count(*) from matches where year = 2013 or year = 2016,select count(*) from matches where  matches.year = 2013 or matches.year = 2016
"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' INTERSECT SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open';","SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name IN ('WTA Championships', 'Australian Open') GROUP BY p.country_code, p.first_name HAVING COUNT(DISTINCT m.tourney_name) = 2;","SELECT T2.country_code , T2.first_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = ""WTA Championships"" INTERSECT SELECT T2.country_code , T2.first_name FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = ""Australian Open""","SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'","SELECT country_code, first_name FROM players WHERE player_id IN (   SELECT winner_id   FROM matches   WHERE tourney_name = 'WTA Championships'   INTERSECT   SELECT winner_id   FROM matches   WHERE tourney_name = 'Australian Open' )","select players.country_code, players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = ""WTA Championships"" intersect select players.country_code, players.first_name from players join matches on players.player_id = matches.winner_id where matches.tourney_name = ""Australian Open""","select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = ""WTA Championships"" intersect select t1.country_code, t1.first_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = ""Australian Open""","select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = ""WTA Championships""   intersect select players.country_code , players.first_name from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = ""Australian Open"""
"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.country_code FROM players INNER JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'WTA Championships' AND players.player_id IN ( SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' );","SELECT p.first_name, p.country_code FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships'   AND p.player_id IN (     SELECT winner_id     FROM matches     WHERE tourney_name LIKE '%Australian Open%'   ) GROUP BY p.first_name, p.country_code","SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'","SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'WTA Championships'  INTERSECT  SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  WHERE T2.tourney_name = 'Australian Open'","SELECT first_name, country_code FROM players WHERE player_id IN (   SELECT winner_id   FROM matches   WHERE tourney_name = 'WTA Championships'   INTERSECT   SELECT winner_id   FROM matches   WHERE tourney_name = 'Australian Open' );","select players.first_name, players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = ""WTA Championships"" intersect select players.first_name, players.country_code from players join matches on players.player_id = matches.winner_id where matches.tourney_name = ""Australian Open""","select t1.first_name, t1.country_code from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = ""WTA Championships"" intersect select t1.first_name, t1.country_code from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.tourney_name = ""Australian Open""","select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = ""WTA Championships""   intersect select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = ""Australian Open"""
"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.country_code FROM players WHERE players.birth_date = (SELECT MIN(birth_date) FROM players) ;","SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;","SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1","SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1","SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1","select first_name, country_code from players order by birth_date desc limit 1","select first_name, country_code from players order by birth_date desc limit 1","select players.first_name , players.country_code from players   order by players.birth_date desc limit 1"
"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;","SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;","SELECT first_name , country_code FROM players ORDER BY birth_date LIMIT 1","SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1","SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1","select first_name, country_code from players order by birth_date desc limit 1","select first_name, country_code from players order by birth_date desc limit 1","select players.first_name , players.country_code from matches join players on matches.winner_id = players.player_id   order by matches.winner_age desc limit 1"
"SELECT first_name ,  last_name FROM players ORDER BY birth_date",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;","SELECT first_name, last_name FROM players ORDER BY birth_date;","SELECT first_name, last_name FROM players ORDER BY birth_date ASC","SELECT first_name, last_name FROM players ORDER BY birth_date","SELECT first_name, last_name FROM players ORDER BY birth_date","select first_name, last_name from players order by birth_date","select first_name, last_name from players order by birth_date","select players.first_name , players.last_name from players   order by players.birth_date asc"
"SELECT first_name ,  last_name FROM players ORDER BY birth_date",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT players.first_name || ' ' || players.last_name FROM players ORDER BY players.birth_date;,"SELECT first_name, last_name FROM players ORDER BY birth_date;","SELECT first_name, last_name FROM players ORDER BY birth_date","SELECT first_name, last_name FROM players ORDER BY birth_date","SELECT first_name, last_name FROM players ORDER BY birth_date;","select first_name, last_name from players order by birth_date","select first_name, last_name from players order by birth_date","select players.first_name , players.last_name from players   order by players.birth_date asc"
"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;","SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;","SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date","SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date","SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC","select first_name, last_name from players where hand = ""left"" or hand = ""right"" order by birth_date","select first_name, last_name from players where hand = ""left"" or hand = ""right"" order by birth_date","select players.first_name , players.last_name from players where  players.hand = ""left""   order by players.birth_date asc"
"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT players.first_name || ' ' || players.last_name FROM players WHERE players.hand = 'Left' ORDER BY players.birth_date;,"SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;","SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date","SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date","SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC","select first_name, last_name from players where hand = ""left"" order by birth_date","select first_name, last_name from players where hand = ""left"" order by birth_date","select players.first_name , players.last_name from players where  players.hand = ""left""   order by players.birth_date asc"
"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.country_code FROM players WHERE players.player_id = ( SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(tours) DESC LIMIT 1 );","SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1;","SELECT T1.first_name , T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY sum(T2.tours) DESC LIMIT 1","SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.tours = (SELECT max(tours) FROM rankings)","SELECT first_name, country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY tours DESC LIMIT 1","select players.first_name, players.country_code from players join rankings on players.player_id = rankings.player_id group by rankings.player_id order by count(*) desc limit 1","select t1.first_name, t1.country_code from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t2.player_id order by count(*) desc limit 1","select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1"
"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.country_code FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(rankings.tours) DESC LIMIT 1;","SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id ORDER BY r.tours DESC LIMIT 1;","SELECT first_name, country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY sum(T2.tours) DESC LIMIT 1","SELECT T1.first_name, T1.country_code  FROM players AS T1  JOIN rankings AS T2 ON T1.player_id = T2.player_id  WHERE T2.tours = (SELECT max(tours) FROM rankings)","SELECT first_name, country_code FROM players JOIN rankings ON players.player_id = rankings.player_id ORDER BY tours DESC LIMIT 1","select players.first_name, players.country_code from players join rankings on players.player_id = rankings.player_id group by rankings.player_id order by count(*) desc limit 1","select t1.first_name, t1.country_code from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t2.player_id order by count(*) desc limit 1","select players.first_name , players.country_code from rankings join players on rankings.player_id = players.player_id  group by rankings.player_id  order by count(*) desc limit 1"
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;,SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;,SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1,SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1,"SELECT YEAR(tourney_date) AS Year, COUNT(*) AS NumberOfMatches FROM matches GROUP BY YEAR(tourney_date) ORDER BY NumberOfMatches DESC LIMIT 1",select year from matches group by year order by count(*) desc limit 1,select year from matches group by year order by count(*) desc limit 1,select matches.year from matches  group by matches.year  order by count(*) desc limit 1
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;",SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1,SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1,"SELECT YEAR(tourney_date) AS Year, COUNT(*) AS Matches FROM matches GROUP BY YEAR(tourney_date) ORDER BY Matches DESC LIMIT 1;",select year from matches group by year order by count(*) desc limit 1,select year from matches group by year order by count(*) desc limit 1,select matches.year from matches  group by matches.year  order by count(*) desc limit 1
"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.last_name, SUM(matches.winner_rank_points) AS total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY players.first_name, players.last_name ORDER BY total_rank_points DESC LIMIT 1;","SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1;","SELECT T1.first_name, T1.last_name, T3.ranking_points FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T2.winner_id ORDER BY count(*) DESC, T3.ranking_points DESC LIMIT 1","SELECT T1.first_name, T1.last_name, T2.rank_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.player_id = (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )","SELECT winner_name, MAX(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY COUNT(winner_id) DESC LIMIT 1","select matches.winner_name, matches.winner_rank_points from matches join rankings on matches.winner_id = rankings.player_id group by matches.winner_id order by count(*) desc limit 1","select t1.winner_name, t1.winner_rank_points from matches as t1 join rankings as t2 on t1.winner_id = t2.player_id group by t1.winner_id order by count(*) desc limit 1","select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1"
"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT matches.winner_name, SUM(matches.winner_rank_points) AS total_rank_points FROM matches GROUP BY matches.winner_name ORDER BY COUNT(matches.winner_name) DESC LIMIT 1;","SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_id ORDER BY COUNT(*) DESC LIMIT 1;","SELECT players.first_name, players.last_name, rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY COUNT(matches.winner_id) DESC, rankings.ranking_points DESC LIMIT 1","SELECT T1.first_name, T1.last_name, T2.ranking_points FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.player_id = (     SELECT winner_id     FROM matches     GROUP BY winner_id     ORDER BY COUNT(*) DESC     LIMIT 1 )","SELECT winner_name, MAX(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY COUNT(winner_id) DESC LIMIT 1","select winner_name, winner_rank_points from matches group by winner_name order by count(*) desc limit 1","select t1.winner_name, t2.ranking_points from matches as t1 join rankings as t2 on t1.winner_id = t2.player_id group by t1.winner_id order by count(*) desc limit 1","select matches.winner_name , matches.winner_rank_points from matches  group by matches.winner_name  order by count(*) desc limit 1"
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT matches.winner_name FROM matches JOIN players ON players.player_id = matches.winner_id JOIN rankings ON rankings.player_id = players.player_id WHERE matches.tourney_name = 'Australian Open' ORDER BY rankings.ranking_points DESC LIMIT 1;,SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;,SELECT winner_name FROM matches WHERE winner_rank_points = (SELECT max(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open'),"SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id JOIN matches AS T3 ON T1.player_id = T3.winner_id WHERE T3.tourney_name = 'Australian Open' ORDER BY T2.rank_points DESC LIMIT 1",SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,"select matches.winner_name from matches join rankings on matches.winner_id = rankings.player_id where matches.tourney_name = ""Australian Open"" order by rankings.ranking_points desc limit 1","select winner_name from matches where tourney_name = ""Australian Open"" order by winner_rank_points desc limit 1","select matches.winner_name from matches where  matches.tourney_name = ""Australian Open""   order by matches.winner_rank_points desc limit 1"
SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT matches.winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = ""Australian Open"" ORDER BY matches.winner_rank_points DESC LIMIT 1;",SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;,"SELECT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1","SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id JOIN matches AS T3 ON T1.player_id = T3.winner_id WHERE T3.tourney_name = 'Australian Open' ORDER BY T2.rank_points DESC LIMIT 1","SELECT winner_name, MAX(winner_rank_points) FROM matches WHERE tourney_name = 'Australian Open' GROUP BY winner_name ORDER BY MAX(winner_rank_points) DESC LIMIT 1","select matches.winner_name from matches join rankings on matches.winner_id = rankings.player_id where matches.tourney_name = ""Australian Open"" order by rankings.ranking_points desc limit 1","select winner_name from matches where tourney_name = ""Australian Open"" order by winner_rank_points desc limit 1","select matches.winner_name from matches where  matches.tourney_name = ""Australian Open""   order by matches.winner_rank_points desc limit 1"
"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT loser_name, winner_name FROM matches WHERE minutes = ( SELECT MAX(minutes) FROM matches );","SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);","SELECT p1.first_name AS loser_first_name, p1.last_name AS loser_last_name, p2.first_name AS winner_first_name, p2.last_name AS winner_last_name FROM matches m JOIN players p1 ON m.loser_id = p1.player_id JOIN players p2 ON m.winner_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches);","SELECT T1.first_name, T1.last_name FROM players AS T1 JOIN matches AS T2 ON (T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id) WHERE T2.minutes = (SELECT MAX(minutes) FROM matches) ORDER BY T2.minutes DESC LIMIT 2","SELECT loser_name, winner_name FROM matches ORDER BY minutes DESC LIMIT 1","select loser_name, winner_name from matches order by minutes desc limit 1","select loser_name, winner_name from matches order by minutes desc limit 1","select matches.loser_name , matches.winner_name from matches   order by matches.minutes desc limit 1"
"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT matches.winner_name, matches.loser_name FROM matches WHERE minutes = ( SELECT MAX(minutes) FROM matches );","SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;","SELECT T1.winner_name, T1.loser_name FROM matches AS T1 ORDER BY T1.minutes DESC LIMIT 1","SELECT T1.first_name, T1.last_name, T2.first_name, T2.last_name FROM players AS T1 JOIN matches ON T1.player_id = matches.winner_id JOIN players AS T2 ON T2.player_id = matches.loser_id WHERE matches.minutes = (SELECT max(minutes) FROM matches)","SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1","select winner_name, loser_name from matches order by minutes desc limit 1","select t1.winner_name, t1.loser_name from matches as t1 join players as t2 on t1.winner_id = t2.player_id order by t1.minutes desc limit 1","select matches.winner_name , matches.loser_name from matches   order by matches.minutes desc limit 1"
"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;","SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;","SELECT players.first_name, avg(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;","SELECT avg(T1.ranking), T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name, T1.player_id","SELECT AVG(rankings.ranking) AS average_ranking, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.player_id, players.first_name","select avg(ranking), players.first_name from players join rankings on players.player_id = rankings.player_id group by players.player_id","select avg(t2.ranking), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name","select players.first_name , avg(rankings.ranking) from rankings join players on rankings.player_id = players.player_id  group by players.first_name"
"SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;","SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;","SELECT players.first_name, AVG(rankings.ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name","SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name","SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name","select players.first_name, avg(rankings.ranking) from rankings join players on rankings.player_id = players.player_id group by players.first_name","select t1.first_name, avg(t2.ranking_points) from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.player_id","select players.first_name , avg(rankings.ranking) from rankings join players on rankings.player_id = players.player_id  group by players.first_name"
"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, SUM(rankings.ranking_points) as total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;","SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;","SELECT sum(ranking_points) , first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name","SELECT sum(T1.ranking_points), T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id, T2.first_name","SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name","select sum(ranking_points), players.first_name from players join rankings on players.player_id = rankings.player_id group by players.player_id","select sum(t2.ranking_points), t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name","select sum(rankings.ranking_points) , players.first_name from rankings join players on rankings.player_id = players.player_id  group by players.first_name"
"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, SUM(rankings.ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;","SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;","SELECT sum(rankings.ranking_points) , players.first_name FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name","SELECT T1.first_name, sum(T2.ranking_points) FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name","SELECT first_name, SUM(ranking_points) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name","select players.first_name, sum(rankings.ranking_points) from rankings join players on rankings.player_id = players.player_id group by players.first_name","select t1.first_name, sum(t2.ranking_points) from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.player_id","select players.first_name , sum(rankings.ranking_points) from rankings join players on rankings.player_id = players.player_id  group by players.first_name"
"SELECT count(*) ,  country_code FROM players GROUP BY country_code",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code;","SELECT country_code, COUNT(*) as num_players FROM players GROUP BY country_code;","SELECT count(*) , country_code FROM players GROUP BY country_code","SELECT COUNT(player_id), country_code FROM players GROUP BY country_code","SELECT COUNT(player_id) AS number_of_players, country_code FROM players GROUP BY country_code","select country_code, count(*) from players group by country_code","select country_code, count(*) from players group by country_code","select players.country_code , count(*) from players  group by players.country_code"
"SELECT count(*) ,  country_code FROM players GROUP BY country_code",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code;","SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code;","SELECT country_code , COUNT(*) FROM players GROUP BY country_code","SELECT count(*) ,  country_code FROM players GROUP BY country_code","SELECT COUNT(player_id) AS number_of_players, country_code FROM players GROUP BY country_code","select country_code, count(*) from players group by country_code","select country_code, count(*) from players group by country_code","select players.country_code , count(*) from players  group by players.country_code"
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;,SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;,SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1,SELECT country_code FROM players GROUP BY country_code ORDER BY count(player_id) DESC LIMIT 1,"SELECT COUNT(player_id) AS player_count, country_code FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1",select country_code from players group by country_code order by count(*) desc limit 1,select country_code from players group by country_code order by count(*) desc limit 1,select players.country_code from players  group by players.country_code  order by count(*) desc limit 1
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1;,SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;,SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1,SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1,"SELECT country_code, COUNT(player_id) AS player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1",select country_code from players group by country_code order by count(*) desc limit 1,select country_code from players group by country_code order by count(*) desc limit 1,select players.country_code from players  group by players.country_code  order by count(*) desc limit 1
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;,SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;,SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50,SELECT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50,"SELECT COUNT(player_id) AS player_count, country_code FROM players GROUP BY country_code HAVING player_count > 50;",select country_code from players group by country_code having count(*) > 50,select country_code from players group by country_code having count(*) > 50,select players.country_code from players  group by players.country_code having  count(*) > 50
SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(players.player_id) > 50;,SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;,SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50;,SELECT country_code FROM players GROUP BY country_code HAVING count(player_id) > 50,"SELECT COUNT(player_id) AS player_count, country_code FROM players GROUP BY country_code HAVING player_count > 50",select country_code from players group by country_code having count(*) > 50,select country_code from players group by country_code having count(*) > 50,select players.country_code from players  group by players.country_code having  count(*) > 50
"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT ranking_date, COUNT(DISTINCT tours) FROM rankings GROUP BY ranking_date;","SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;","SELECT ranking_date, count(tours) FROM rankings GROUP BY ranking_date;","SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date","SELECT SUM(tours) AS total_tours, ranking_date FROM rankings GROUP BY ranking_date","select ranking_date, sum(tours) from rankings group by ranking_date","select ranking_date, count(*) from rankings group by ranking_date","select sum(rankings.tours) , rankings.ranking_date from rankings  group by rankings.ranking_date"
"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT ranking_date, COUNT(DISTINCT tours) AS total_tours FROM rankings GROUP BY ranking_date;","SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;","SELECT ranking_date , sum(tours) FROM rankings GROUP BY ranking_date","SELECT ranking_date, SUM(tours) FROM rankings GROUP BY ranking_date","SELECT SUM(tours) AS total_tours, ranking_date FROM rankings GROUP BY ranking_date","select ranking_date, sum(tours) from rankings group by ranking_date","select ranking_date, count(*) from rankings group by ranking_date","select rankings.ranking_date , sum(rankings.tours) from rankings  group by rankings.ranking_date"
"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year;","SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year;","SELECT year, COUNT(*) FROM matches GROUP BY year","SELECT count(*) ,  year FROM matches GROUP BY year","SELECT COUNT(*) AS match_count, year FROM matches GROUP BY year","select count(*), year from matches group by year","select count(*), year from matches group by year","select matches.year , count(*) from matches  group by matches.year"
"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;","SELECT year, COUNT(*) as num_matches FROM matches GROUP BY year;","SELECT year , COUNT(*) FROM matches GROUP BY year","SELECT count(*) ,  year FROM matches GROUP BY year","SELECT COUNT(match_num) AS matches_played, year FROM matches GROUP BY year","select count(*), year from matches group by year","select year, count(*) from matches group by year","select matches.year , count(*) from matches  group by matches.year"
"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age LIMIT 3;","SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;","SELECT p.first_name, p.last_name, r.ranking FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON p.player_id = m.winner_id ORDER BY p.birth_date DESC LIMIT 3","SELECT T1.first_name, T1.last_name, T3.winner_rank FROM players AS T1 JOIN matches AS T3 ON T1.player_id = T3.winner_id ORDER BY T3.winner_age ASC LIMIT 3","SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3","select winner_name, winner_rank from matches order by winner_age asc limit 3","select winner_name, winner_rank from matches order by winner_age asc limit 3","select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3;","SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;","SELECT players.first_name, players.last_name, rankings.ranking FROM players JOIN rankings ON players.player_id = rankings.player_id JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date DESC LIMIT 3;","SELECT T1.first_name, T1.last_name, T2.winner_rank FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_age ASC LIMIT 3","SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3","select winner_name, winner_rank from matches order by winner_age asc limit 3","select winner_name, winner_rank from matches order by winner_age asc limit 3","select matches.winner_name , matches.winner_rank from matches   order by matches.winner_age asc limit 3"
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L',wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'WTA Championships' AND hand = 'left';,SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships'   AND winner_hand = 'L';,"SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = ""WTA Championships"" AND winner_hand = ""L""",SELECT count(DISTINCT winner_id) FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'WTA Championships' AND T2.hand = 'L',SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L',"select count(*) from players join matches on players.player_id = matches.winner_id where matches.tourney_name = ""WTA Championships"" and players.hand = ""left""","select count(*) from matches where tourney_name = ""WTA Championships"" and winner_hand = ""left""","select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = ""WTA Championships"" and players.hand = ""left"""
SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L',wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.winner_hand = 'L' AND matches.tourney_name = 'WTA Championships';,SELECT COUNT(*)  FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'L',SELECT count(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships',SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships',SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships',"select count(*) from players join matches on players.player_id = matches.winner_id where players.hand = ""left"" and matches.tourney_name = ""WTA Championships""","select count(*) from matches as t1 join players as t2 on t1.winner_id = t2.player_id where t2.hand = ""left"" and t1.tourney_name = ""WTA Championships""","select count(*) from matches join players on matches.winner_id = players.player_id where  matches.tourney_name = ""WTA Championships"" and players.hand = ""left"""
"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.country_code, players.birth_date FROM players INNER JOIN matches ON matches.winner_id = players.player_id WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);","SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) LIMIT 1;","SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1)","SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches JOIN rankings ON matches.winner_id = rankings.player_id ORDER BY rankings.ranking_points DESC LIMIT 1)","select players.first_name, players.country_code, players.birth_date from players join matches on players.player_id = matches.winner_id order by matches.winner_rank_points desc limit 1","select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t2.winner_rank_points desc limit 1","select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id   order by matches.winner_rank_points desc limit 1"
"SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id ORDER BY SUM(matches.winner_rank_points) DESC LIMIT 1;","SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_rank_points DESC LIMIT 1;","SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches ORDER BY winner_rank_points DESC LIMIT 1)","SELECT T1.first_name, T1.country_code, T1.birth_date  FROM players AS T1  JOIN matches AS T2 ON T1.player_id = T2.winner_id  ORDER BY T2.winner_rank_points DESC  LIMIT 1","SELECT first_name, country_code, birth_date FROM players WHERE player_id = (   SELECT winner_id   FROM matches   ORDER BY winner_rank_points DESC   LIMIT 1 )","select players.first_name, players.country_code, players.birth_date from players join matches on players.player_id = matches.winner_id group by matches.winner_id order by sum(matches.winner_rank_points) desc limit 1","select t1.first_name, t1.country_code, t1.birth_date from players as t1 join matches as t2 on t1.player_id = t2.winner_id group by t2.winner_id order by sum(t2.winner_rank_points) desc limit 1","select players.first_name , players.country_code , players.birth_date from matches join players on matches.winner_id = players.player_id  group by players.player_id  order by sum(matches.winner_rank_points) desc limit 1"
"SELECT count(*) ,  hand FROM players GROUP BY hand",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT players.hand, COUNT(*) AS count FROM players GROUP BY players.hand;","SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand;","SELECT hand , count(*) FROM players GROUP BY hand","SELECT count(*) , hand FROM players GROUP BY hand","SELECT COUNT(player_id) AS number_of_players, hand FROM players GROUP BY hand","select count(*), hand from players group by hand","select hand, count(*) from players group by hand","select players.hand , count(*) from players  group by players.hand"
"SELECT count(*) ,  hand FROM players GROUP BY hand",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT hand, COUNT(*) AS count FROM players GROUP BY hand;","SELECT hand, COUNT(*) as player_count FROM players GROUP BY hand;","SELECT hand , count(*) FROM players GROUP BY hand","SELECT count(*) , hand FROM players GROUP BY hand","SELECT COUNT(player_id) AS player_count, hand FROM players GROUP BY hand","select count(*), hand from players group by hand","select hand, count(*) from players group by hand","select players.hand , count(*) from players  group by players.hand"
SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured',battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';,SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';,SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured';,SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured',SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured',select count(*) from ship where disposition_of_ship = 'Captured',select count(*) from ship where disposition_of_ship = 'Captured',"select count(*) from ship where  ship.disposition_of_ship = ""Captured"""
"SELECT name ,  tonnage FROM ship ORDER BY name DESC",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT ship.name, ship.tonnage FROM ship ORDER BY ship.name DESC;","SELECT name, tonnage FROM ship ORDER BY name DESC;","SELECT name, tonnage FROM ship ORDER BY name DESC","SELECT name, tonnage FROM ship ORDER BY name DESC","SELECT name, tonnage FROM ship ORDER BY name DESC","select name, tonnage from ship order by name desc","select name, tonnage from ship order by name desc","select ship.name , ship.tonnage from ship   order by ship.name desc"
"SELECT name ,  date FROM battle",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT name, date, result FROM battle;","SELECT name, date, result FROM battle;","SELECT name , date , result FROM battle","SELECT name, date, result FROM battle","SELECT name, date, result FROM battle","select name, date, result from battle","select name, date, result from battle","select battle.name , battle.date , battle.result from battle"
"SELECT max(killed) ,  min(killed) FROM death",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT MIN(killed) AS minimum_death_toll, MAX(killed) AS maximum_death_toll FROM death;","SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;","SELECT max(killed) , min(killed) FROM death","SELECT max(killed), min(killed), caused_by_ship_id FROM death GROUP BY caused_by_ship_id","SELECT MAX(killed) AS Maximum_Death_Toll, MIN(killed) AS Minimum_Death_Toll FROM death","select max(killed), min(killed) from death group by caused_by_ship_id","select max(t1.killed), min(t1.killed), t1.caused_by_ship_id from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id group by t1.caused_by_ship_id","select max(death.caused_by_ship_id) , min(death.caused_by_ship_id) from death  group by death.caused_by_ship_id"
SELECT avg(injured) FROM death,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT AVG(injured) FROM death;,SELECT AVG(injured) AS average_injuries FROM death;,SELECT avg(injured) FROM death,SELECT AVG(injured) FROM death,SELECT AVG(injured) FROM death;,"select avg(injured), caused_by_ship_id from death group by caused_by_ship_id","select avg(injured), caused_by_ship_id from death group by caused_by_ship_id","select death.id , avg(death.injured) from death  group by death.id"
"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT death.note, death.killed FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';","SELECT death.killed, death.injured FROM death  JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';","SELECT T3.killed, T3.injured FROM ship AS T1 JOIN death AS T3 ON T1.id = T3.caused_by_ship_id WHERE T1.tonnage = 't'","SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'","SELECT killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')","select death.killed, death.injured from death join ship on death.caused_by_ship_id = ship.id where ship.tonnage = ""t""","select t1.killed, t1.injured from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id where t2.tonnage = 't'","select death.injured , death.killed from death join ship on death.caused_by_ship_id = ship.id where  ship.tonnage = ""t"""
"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril';","SELECT name, result  FROM battle WHERE bulgarian_commander != 'Boril';","SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'","SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'","SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'","select name, result from battle where bulgarian_commander!= ""Boril""","select name, result from battle where bulgarian_commander!= 'Boril'","select battle.name , battle.result from battle where  battle.bulgarian_commander != ""Boril"""
"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT battle.id, battle.name FROM battle WHERE battle.id IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.ship_type = 'Brig' )","SELECT battle.id, battle.name FROM battle  JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig';","SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'","SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'","SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'","select distinct battle.id, battle.name from battle join ship on battle.id = ship.lost_in_battle where ship.ship_type = ""Brig""","select distinct t1.id, t1.name from battle as t1 join ship as t2 on t1.id = t2.id where t2.ship_type = 'Brig'","select distinct battle.id , battle.name from ship join battle on ship.lost_in_battle = battle.id where  ship.ship_type = ""Brig"""
"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT battle.id, battle.name FROM battle JOIN ship ON ship.lost_in_battle = battle.id JOIN death ON death.caused_by_ship_id = ship.id GROUP BY battle.id, battle.name HAVING SUM(death.killed) > 10;","SELECT b.id, b.name FROM battle b JOIN death d ON d.caused_by_ship_id = s.id JOIN ship s ON s.lost_in_battle = b.id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10","SELECT T1.id , T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING SUM(T3.killed) > 10","SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id, T1.name HAVING sum(T3.killed) > 10","SELECT SUM(death.killed) AS total_killed, battle.id, battle.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id JOIN battle ON ship.lost_in_battle = battle.id GROUP BY battle.id, battle.name HAVING total_killed > 10","select battle.id, battle.name from battle join death on battle.id = death.caused_by_ship_id group by battle.id having sum(death.killed) > 10","select t1.id, t1.name from battle as t1 join death as t2 on t1.id = t2.caused_by_ship_id group by t1.id having sum(t2.killed) > 10","select battle.id , battle.name from death join ship on death.caused_by_ship_id = ship.id join battle on ship.lost_in_battle = battle.id  group by battle.id having  sum(death.killed) > 10"
"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT ship.id, ship.name FROM death JOIN ship ON death.caused_by_ship_id = ship.id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1;","SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.killed + d.injured) DESC LIMIT 1;","SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id ORDER BY sum(T2.injured) DESC LIMIT 1","SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name HAVING sum(T2.injured) = (SELECT max(sum_injured) FROM (SELECT sum(T3.injured) AS sum_injured FROM death AS T3 GROUP BY T3.caused_by_ship_id) AS T4)","SELECT caused_by_ship_id, name FROM ship JOIN death ON ship.id = death.caused_by_ship_id ORDER BY injured DESC LIMIT 1","select ship.id, ship.name from ship join death on ship.id = death.caused_by_ship_id group by death.caused_by_ship_id order by sum(injured) desc limit 1","select t1.id, t1.name from ship as t1 join death as t2 on t1.id = t2.caused_by_ship_id group by t1.id order by sum(t2.injured) desc limit 1","select ship.id , ship.name from death join ship on death.caused_by_ship_id = ship.id  group by ship.id  order by sum(death.injured) desc limit 1"
SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I',battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT DISTINCT battle.name FROM battle WHERE battle.bulgarian_commander = 'Kaloyan' AND battle.latin_commander = 'Baldwin I';,SELECT DISTINCT name  FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';,SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I',SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I',SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I',"select distinct name from battle where bulgarian_commander = ""Kaloyan"" and latin_commander = ""Baldwin I""",select distinct name from battle where bulgarian_commander = 'Kaloyan' intersect select distinct name from battle where latin_commander = 'Baldwin I',"select distinct battle.name from battle where  battle.bulgarian_commander = ""Kaloyan"" and battle.latin_commander = ""Baldwin I"""
SELECT count(DISTINCT RESULT) FROM battle,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT COUNT(DISTINCT result) FROM battle;,SELECT COUNT(DISTINCT result) FROM battle;,SELECT count(DISTINCT result) FROM battle,SELECT COUNT(DISTINCT result) FROM battle,SELECT COUNT(DISTINCT result) FROM battle,select count(distinct result) from battle,select count(distinct result) from battle,select count( distinct battle.result) from battle
SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT COUNT(DISTINCT battle.id) FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = '225' ),SELECT COUNT(*)  FROM battle b WHERE NOT EXISTS (   SELECT 1    FROM ship s   WHERE s.lost_in_battle = b.id     AND s.tonnage = 225 );,SELECT count(DISTINCT id) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225'),SELECT COUNT(id) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = 225),SELECT COUNT(DISTINCT b.id) FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle AND s.tonnage = 225 WHERE s.id IS NULL,select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage = 225 ),select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage = '225' ),"select count(*) from battle where  battle.id not in (select ship.lost_in_battle from ship where  ship.tonnage = ""225""  )"
"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT battle.name, battle.date FROM battle INNER JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.name IN ('Lettice', 'HMS Atalanta');","SELECT b.name, b.date FROM battle b JOIN ship s ON s.lost_in_battle = b.id WHERE s.name IN ('Lettice', 'HMS Atalanta')","SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' OR T2.name = 'HMS Atalanta'","SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' OR T2.name = 'HMS Atalanta'","SELECT battle.name, battle.date FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.name IN ('Lettice', 'HMS Atalanta')","select battle.name, battle.date from ship join battle on ship.id = battle.id where ship.name = 'Lettice' and ship.name = 'HMS Atalanta'","select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.name = 'Lettice' intersect select t1.name, t1.date from battle as t1 join ship as t2 on t1.id = t2.ship","select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = ""Lettice""   intersect select battle.name , battle.date from ship join battle on ship.lost_in_battle = battle.id where  ship.name = ""HMS Atalanta"""
"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel');","SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location != 'English Channel' OR ship.location IS NULL;","SELECT b.name, b.result, b.bulgarian_commander FROM battle AS b LEFT JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.location != 'English Channel' OR s.location IS NULL","SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE location = 'English Channel')","SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location != 'English Channel' OR ship.id IS NULL","select name, result, bulgarian_commander from battle except select battle.name, battle.result, battle.bulgarian_commander from battle join ship on battle.id = ship.lost_in_battle where ship.location = 'English Channel'","select name, result, bulgarian_commander from battle where id not in (select lost_in_battle from ship where location = 'English Channel')","select battle.name , battle.result , battle.bulgarian_commander from battle   except select battle.name , battle.result , battle.bulgarian_commander from ship join battle on ship.lost_in_battle = battle.id where  ship.location = ""English Channel"""
SELECT note FROM death WHERE note LIKE '%East%',battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT note FROM death WHERE note LIKE '%East%';,SELECT note FROM death WHERE note LIKE '%East%';,"SELECT note FROM death WHERE note LIKE ""%East%""",SELECT note FROM death WHERE note LIKE '%East%',SELECT note FROM death WHERE note LIKE '%East%';,"select note from death where note like ""%east%""",select note from death where note like '%east%',"select death.note from death where  death.note like ""%East%"""
"SELECT line_1 ,  line_2 FROM addresses",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT addresses.line_1, addresses.line_2 FROM addresses;","SELECT line_1, line_2 FROM Addresses;","SELECT line_1 , line_2 FROM Addresses","SELECT line_1, line_2 FROM Addresses","SELECT line_1, line_2 FROM Addresses","select line_1, line_2 from addresses",select other_address_details from addresses where line_1,"select * from Addresses where  addresses.line_1 = ""1"" and addresses.line_2 = ""2"""
"SELECT line_1 ,  line_2 FROM addresses",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT addresses.line_1, addresses.line_2 FROM addresses;","SELECT line_1, line_2 FROM Addresses;","SELECT line_1 , line_2 FROM Addresses;","SELECT line_1, line_2 FROM Addresses","SELECT line_1, line_2 FROM Addresses;","select line_1, line_2 from addresses","select line_1, line_2 from addresses","select addresses.line_1 , addresses.line_2 from Addresses"
SELECT count(*) FROM Courses,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) FROM courses;,SELECT COUNT(*) FROM Courses;,SELECT count(*) FROM Courses,SELECT COUNT(*) FROM Courses,SELECT COUNT(course_id) FROM Courses,select count(*) from courses,select count(*) from courses,select count(*) from Courses
SELECT count(*) FROM Courses,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) FROM courses;,SELECT COUNT(*) FROM Courses;,SELECT count(*) FROM Courses,SELECT COUNT(*) FROM Courses,SELECT COUNT(course_id) FROM Courses,select count(*) from courses,select count(*) from courses,select count(*) from Courses
SELECT course_description FROM Courses WHERE course_name  =  'math',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT course_description FROM courses WHERE course_name = 'math';,SELECT course_description  FROM Courses WHERE course_name = 'math';,"SELECT course_description FROM Courses WHERE course_name = ""Math""",SELECT course_description FROM Courses WHERE course_name = 'math',SELECT course_description FROM Courses WHERE course_name = 'math';,"select course_description from courses where course_name = ""math""","select course_description from courses where course_name = ""math""","select courses.course_description from Courses where  courses.course_name = ""math"""
SELECT course_description FROM Courses WHERE course_name  =  'math',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT course_description FROM courses WHERE course_name = ""math"";",SELECT course_description FROM Courses WHERE course_name = 'math';,"SELECT course_description FROM Courses WHERE course_name LIKE ""%math%""",SELECT course_description FROM Courses WHERE course_name LIKE '%math%',SELECT course_description FROM Courses WHERE course_name = 'math',"select course_description from courses where course_name = ""math""","select course_description from courses where course_name = ""math""","select courses.course_description from Courses where  courses.course_name = ""math"""
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT zip_postcode FROM addresses WHERE city = 'Port Chelsea';,SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';,"SELECT zip_postcode FROM Addresses WHERE city = ""Port Chelsea""",SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea',SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea',"select zip_postcode from addresses where city = ""Port Chelsea""","select zip_postcode from addresses where city = ""Port Chelsea""","select addresses.zip_postcode from Addresses where  addresses.city = ""Port Chelsea"""
SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT zip_postcode FROM addresses WHERE city = ""Port Chelsea"";",SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';,"SELECT zip_postcode FROM Addresses WHERE city = ""Port Chelsea""",SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea',SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';,"select zip_postcode from addresses where city = ""Port Chelsea""","select zip_postcode from addresses where city = ""Port Chelsea""","select addresses.zip_postcode from Addresses where  addresses.city = ""Port Chelsea"""
"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT departments.department_name, departments.department_id FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id ORDER BY COUNT(DISTINCT degree_programs.degree_program_id) DESC LIMIT 1;","SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_name, d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;","SELECT T1.department_name, T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1","SELECT T1.department_name, T1.department_id, count(T2.degree_program_id) as num_degrees FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id, T1.department_name ORDER BY num_degrees DESC LIMIT 1","SELECT department_name, department_id, COUNT(degree_program_id) AS number_of_degrees FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id ORDER BY number_of_degrees DESC LIMIT 1","select departments.department_name, degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count(*) desc limit 1","select t2.department_name, t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1","select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT departments.department_id, departments.department_name FROM departments INNER JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1;","SELECT d.department_name, d.department_id FROM Departments d INNER JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;","SELECT T1.department_name, T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1","SELECT T1.department_id, T1.department_name, count(T2.degree_program_id) as num_degrees FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id, T1.department_name ORDER BY num_degrees DESC LIMIT 1","SELECT department_id, department_name FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1","select departments.department_name, degree_programs.department_id from degree_programs join departments on degree_programs.department_id = departments.department_id group by degree_programs.department_id order by count(*) desc limit 1","select t2.department_name, t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id group by t1.department_id order by count(*) desc limit 1","select departments.department_name , degree_programs.department_id from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id  group by degree_programs.department_id  order by count(*) desc limit 1"
SELECT count(DISTINCT department_id) FROM Degree_Programs,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(DISTINCT department_id) FROM degree_programs;,SELECT COUNT(DISTINCT department_id)  FROM Degree_Programs;,SELECT count(DISTINCT department_id) FROM Degree_Programs,SELECT count(distinct department_id) FROM Degree_Programs,SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;,select count(distinct department_id) from degree_programs,select count(distinct department_id) from degree_programs,select count( distinct degree_programs.department_id) from Degree_Programs
SELECT count(DISTINCT department_id) FROM Degree_Programs,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(DISTINCT department_id) FROM degree_programs;,SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;,SELECT count(DISTINCT department_id) FROM Degree_Programs,SELECT count(distinct department_id) FROM Degree_Programs,SELECT COUNT(DISTINCT department_id) FROM Degree_Programs,select count(distinct department_id) from degree_programs,select count(distinct department_id) from degree_programs,select count( distinct degree_programs.department_id) from Degree_Programs
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;,SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs,SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs,select count(distinct degree_summary_name) from degree_programs,select count(distinct degree_summary_name) from degree_programs,select count( distinct degree_programs.degree_summary_name) from Degree_Programs
SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;,SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs,SELECT COUNT(DISTINCT degree_program_id) FROM Degree_Programs,select count(distinct degree_program_id) from degree_programs,select count(distinct degree_program_id) from degree_programs,select count( distinct degree_programs.degree_summary_name) from Degree_Programs
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) FROM degree_programs WHERE department_id = ( SELECT department_id FROM departments WHERE department_name = 'engineering'),SELECT COUNT(*)  FROM Degree_Programs WHERE department_id = (   SELECT department_id   FROM Departments   WHERE department_name = 'engineer' );,SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering'),SELECT count(*) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineering',SELECT COUNT(degree_program_id) FROM Degree_Programs WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'engineer');,"select count(*) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = ""Engineering""",select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = 'Engineering',"select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = ""ENGINEERING"""
SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT count(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering');,SELECT COUNT(*)  FROM Degree_Programs WHERE department_id = (   SELECT department_id   FROM Departments   WHERE department_name = 'engineer' );,SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering'),SELECT count(degree_program_id) FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineering',SELECT COUNT(degree_program_id) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineer';,"select count(*) from departments join degree_programs on departments.department_id = degree_programs.department_id where departments.department_name = ""Engineering""",select count(*) from departments as t1 join degree_programs as t2 on t1.department_id = t2.department_id where t1.department_name = 'Engineering',"select count(*) from Degree_Programs join Departments on Degree_Programs.department_id = Departments.department_id where  departments.department_name = ""Engineering"""
"SELECT section_name ,  section_description FROM Sections",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT section_name, section_description FROM sections;","SELECT section_name, section_description FROM Sections;","SELECT section_name, section_description FROM Sections","SELECT section_name, section_description FROM Sections","SELECT section_name, section_description FROM Sections","select section_name, section_description from sections","select section_name, section_description from sections","select sections.section_name , sections.section_description from Sections"
"SELECT section_name ,  section_description FROM Sections",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT section_name, section_description FROM sections;","SELECT section_name, section_description FROM Sections;","SELECT section_name, section_description FROM Sections","SELECT section_name, section_description FROM Sections","SELECT section_name, section_description FROM Sections","select section_name, section_description from sections","select section_name, section_description from sections","select sections.section_name , sections.section_description from Sections"
"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT course_id, course_name FROM courses WHERE course_id IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(section_id) <= 2 )","SELECT c.course_id, c.course_name FROM Courses c WHERE (SELECT COUNT(*) FROM Sections s WHERE s.course_id = c.course_id) <= 2;","SELECT T1.course_id, T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(T2.section_id) <= 2;","SELECT T1.course_id, T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.course_name HAVING count(*) <= 2","SELECT course_id, course_name FROM Courses WHERE course_id IN (   SELECT course_id   FROM Sections   GROUP BY course_id   HAVING COUNT(section_id) <= 2 )","select courses.course_name, sections.course_id from courses join sections on courses.course_id = sections.course_id group by sections.course_id having count(*) <= 2","select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) <= 2","select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) <= 2"
"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT course_name, course_id FROM courses WHERE course_id IN ( SELECT course_id FROM sections GROUP BY course_id HAVING COUNT(*) < 2 );","SELECT c.course_id, c.course_name FROM Courses c WHERE (SELECT COUNT(*) FROM Sections s WHERE s.course_id = c.course_id) < 2;","SELECT T1.course_id, T1.course_name FROM Courses AS T1 LEFT JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING count(T2.section_id) < 2;","SELECT T1.course_id, T1.course_name FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.course_name HAVING count(*) < 2","SELECT course_id, course_name FROM Courses WHERE course_id NOT IN (   SELECT course_id   FROM Sections   GROUP BY course_id   HAVING COUNT(section_id) >= 2 )","select courses.course_name, sections.course_id from courses join sections on courses.course_id = sections.course_id group by sections.course_id having count(*) < 2","select t1.course_name, t1.course_id from courses as t1 join sections as t2 on t1.course_id = t2.course_id group by t1.course_id having count(*) < 2","select courses.course_name , sections.course_id from Sections join Courses on Sections.course_id = Courses.course_id  group by sections.course_id having  count(*) < 2"
SELECT section_name FROM Sections ORDER BY section_name DESC,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT section_name FROM sections ORDER BY section_name DESC;,SELECT section_name FROM Sections ORDER BY section_name DESC;,SELECT section_name FROM Sections ORDER BY section_name DESC,SELECT section_name FROM Sections ORDER BY section_name DESC,SELECT section_name FROM Sections ORDER BY section_name DESC,select section_name from sections order by section_name desc,select section_name from sections order by section_name desc,select sections.section_name from Sections   order by sections.section_name desc
SELECT section_name FROM Sections ORDER BY section_name DESC,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT section_name FROM sections ORDER BY section_name DESC;,SELECT section_name FROM Sections ORDER BY section_name DESC;,SELECT section_name FROM Sections ORDER BY section_name DESC,SELECT section_name FROM Sections ORDER BY section_name DESC,SELECT section_name FROM Sections ORDER BY section_name DESC,select section_name from sections order by section_name desc,select section_name from sections order by section_name desc,select sections.section_name from Sections   order by sections.section_name desc
"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT semesters.semester_id, semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;","SELECT s.semester_id, s.semester_name FROM Semesters s INNER JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;","SELECT T1.semester_id, T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1","SELECT T2.semester_id, T2.semester_name, count(T1.student_id) as student_count FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id, T2.semester_name ORDER BY student_count DESC LIMIT 1","SELECT semester_id, semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY semester_id, semester_name ORDER BY COUNT(student_id) DESC LIMIT 1","select semesters.semester_name, student_enrolment.semester_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count(*) desc limit 1","select t2.semester_name, t1.semester_id from student_enrolment as t1 join semesters as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1","select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT semesters.semester_id, semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_id, semesters.semester_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;","SELECT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;","SELECT T1.semester_id, T1.semester_name FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1","SELECT T1.semester_id, T1.semester_name, COUNT(T2.student_id) AS num_students FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id, T1.semester_name ORDER BY num_students DESC LIMIT 1","SELECT semester_id, semester_name, COUNT(student_id) AS student_count FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY semester_id, semester_name ORDER BY student_count DESC LIMIT 1","select semesters.semester_name, student_enrolment.semester_id from student_enrolment join semesters on student_enrolment.semester_id = semesters.semester_id group by student_enrolment.semester_id order by count(*) desc limit 1","select t1.semester_name, t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count(*) desc limit 1","select semesters.semester_name , student_enrolment.semester_id from Student_Enrolment join Semesters on Student_Enrolment.semester_id = Semesters.semester_id  group by student_enrolment.semester_id  order by count(*) desc limit 1"
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT department_description FROM departments WHERE department_name LIKE '%computer%';,SELECT department_description  FROM Departments WHERE department_name LIKE '%computer%';,"SELECT department_description FROM Departments WHERE department_name LIKE ""%computer%""",SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%',SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';,"select department_description from departments where department_name like ""%computer%""",select department_description from departments where department_name like '%computer%',"select departments.department_description from Departments where  departments.department_name like ""%the computer%"""
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT department_description FROM departments WHERE department_name LIKE '%computer%';,SELECT department_description  FROM Departments WHERE department_name LIKE '%computer%';,"SELECT department_description FROM Departments WHERE department_name LIKE ""%computer%""",SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';,"select department_description from departments where department_name like ""%computer%""",select department_description from departments where department_name like '%computer%',"select departments.department_description from Departments where  departments.department_name like ""%computer%"""
"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT first_name, middle_name, last_name, student_id FROM students WHERE student_id IN ( SELECT student_id FROM student_enrolment WHERE semester_id = [semester_id] GROUP BY student_id HAVING COUNT(DISTINCT degree_program_id) = 2 );","SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2;","SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.semester_id, T1.student_id HAVING COUNT(T2.degree_program_id) = 2","SELECT T2.first_name, T2.middle_name, T2.last_name, T2.student_id  FROM Students AS T2  WHERE T2.student_id IN (     SELECT T1.student_id      FROM Student_Enrolment AS T1      GROUP BY T1.student_id, T1.semester_id      HAVING count(*) = 2 )","SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students JOIN Student_Enrolment ON students.student_id = Student_Enrolment.student_id GROUP BY students.student_id, students.first_name, students.middle_name, students.last_name, Student_Enrolment.semester_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2","select students.first_name, students.middle_name, students.last_name, student_enrolment.student_enrolment_id from student_enrolment join students on student_enrolment.student_enrolment_id = students.student_id group by student_enrolment.student_enrolment_id having count(*) = 2","select t2.first_name, t2.middle_name, t2.last_name, t1.student_enrolment_id from student_enrolment as t1 join students as t2 on t1.student_enrolment_id = t2.student_id group by t1.student_id having count(*) = 2","select students.first_name , students.middle_name , students.last_name , student_enrolment.semester_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.semester_id having  count(*) = 2"
"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY students.student_id, students.first_name, students.middle_name, students.last_name HAVING COUNT(DISTINCT student_enrolment.degree_program_id) = 2 AND COUNT(DISTINCT student_enrolment.semester_id) = 1","SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2;","SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T2.semester_id HAVING COUNT(DISTINCT T2.degree_program_id) = 2","SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name  FROM Students AS T1  JOIN (     SELECT student_id, semester_id      FROM Student_Enrolment      GROUP BY student_id, semester_id      HAVING count(degree_program_id) = 2 ) AS T2  ON T1.student_id = T2.student_id","SELECT students.student_id, students.first_name, students.middle_name, students.last_name FROM students JOIN Student_Enrolment ON students.student_id = Student_Enrolment.student_id GROUP BY students.student_id HAVING COUNT(DISTINCT Student_Enrolment.degree_program_id) = 2","select students.first_name, students.middle_name, students.last_name, student_enrolment.student_id from student_enrolment join students on student_enrolment.student_id = students.student_id group by student_enrolment.student_id having count(*) = 2","select t2.first_name, t2.middle_name, t2.last_name, t1.student_id from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id group by t1.student_id having count(*) = 2","select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id having  count(*) = 2"
"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = ""Bachelor"";","SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';","SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name LIKE ""%Bachelor%""","SELECT T2.first_name, T2.middle_name, T2.last_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id JOIN Students AS T2 ON T3.student_id = T2.student_id WHERE T1.degree_summary_name = 'Bachelor'","SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor';","select students.first_name, students.middle_name, students.last_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id join students on student_enrolment.student_enrolment_id = students.student_id where degree_programs.degree_summary_name = ""Bachelor""","select t2.first_name, t2.middle_name, t2.last_name from student_enrolment as t1 join students as t2 on t1.student_enrolment_id = t2.student_id join degree_programs as t3 on t1.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'","select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = ""Bachelor"""
"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelors';","SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';","SELECT first_name, middle_name, last_name FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name LIKE '%Bachelors%'","SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors'","SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'))","select students.first_name, students.middle_name, students.last_name from student_enrolment join students on student_enrolment.student_enrolment_id = students.student_id where student_enrolment.degree_program_id = ""Bachelors""","select t2.first_name, t2.middle_name, t2.last_name from student_enrolment as t1 join students as t2 on t1.student_enrolment_id = t2.student_id where t1.degree_program_id = 'Bachelor'","select students.first_name , students.middle_name , students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id where  student_enrolment.degree_program_id = ""B"""
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT dp.degree_summary_name FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(T2.student_id) DESC LIMIT 1,"SELECT MAX(enrollment_count) AS most_enrolled_program_type FROM (   SELECT dp.degree_summary_name, COUNT(se.student_id) AS enrollment_count   FROM Degree_Programs dp   JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id   GROUP BY dp.degree_summary_name ) AS enrollment_data",select degree_program_id from student_enrolment group by degree_program_id order by count(*) desc limit 1,select degree_program_id from student_enrolment group by degree_program_id order by count(*) desc limit 1,select student_enrolment.degree_program_id from Student_Enrolment  group by student_enrolment.degree_program_id  order by count(*) desc limit 1
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON student_enrolment.degree_program_id = degree_programs.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;,SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(T2.student_id) DESC LIMIT 1,SELECT degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY Degree_Programs.degree_program_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1,select degree_programs.degree_summary_name from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id group by degree_programs.degree_summary_name order by count(*) desc limit 1,select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1,select degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by degree_programs.degree_summary_name  order by count(*) desc limit 1
"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;","SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;","SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1","SELECT T1.degree_program_id, T2.degree_summary_name, count(T1.student_id) as num_students FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T2.degree_summary_name ORDER BY num_students DESC LIMIT 1","SELECT degree_program_id, degree_summary_name FROM Degree_Programs WHERE degree_program_id = (   SELECT degree_program_id   FROM Student_Enrolment   GROUP BY degree_program_id   ORDER BY COUNT(student_id) DESC   LIMIT 1 )","select degree_programs.degree_program_id, degree_programs.degree_summary_description from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count(*) desc limit 1","select t1.degree_program_id, t3.degree_summary_name from student_enrolment as t1 join student_enrolment_courses as t2 on t1.student_enrolment_id = t2.student_enrolment_id join degree_programs as t3 on t1.degree_program_id = t3.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1","select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT degree_program_id, degree_summary_name, degree_summary_description FROM degree_programs WHERE degree_program_id = ( SELECT degree_program_id FROM student_enrolment GROUP BY degree_program_id ORDER BY COUNT(*) DESC LIMIT 1 )","SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;","SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1","SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name HAVING COUNT(*) = (     SELECT MAX(counted)     FROM (         SELECT COUNT(*) AS counted         FROM Student_Enrolment         GROUP BY degree_program_id     ) AS subquery )","SELECT degree_program_id, degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1","select degree_programs.degree_program_id, degree_programs.degree_summary_name from degree_programs join student_enrolment on degree_programs.degree_program_id = student_enrolment.degree_program_id group by degree_programs.degree_program_id order by count(*) desc limit 1","select t1.degree_program_id, t2.degree_summary_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1","select student_enrolment.degree_program_id , degree_programs.degree_summary_name from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id  group by student_enrolment.degree_program_id  order by count(*) desc limit 1"
"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT student_enrolment.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) as num_enrollments FROM student_enrolment JOIN students ON student_enrolment.student_id = students.student_id GROUP BY student_enrolment.student_id ORDER BY num_enrollments DESC LIMIT 1;","SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(*) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;","SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS number_of_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY number_of_enrollments DESC LIMIT 1","SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, count(T2.student_enrolment_id) as num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id, T1.first_name, T1.middle_name, T1.last_name ORDER BY num_enrollments DESC LIMIT 1","SELECT student_id, first_name, middle_name, last_name, COUNT(student_enrolment_id) AS number_of_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY student_id ORDER BY number_of_enrollments DESC LIMIT 1","select students.student_id, students.first_name, students.middle_name, students.last_name, count(*) from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count(*) desc limit 1","select t1.student_id, t2.first_name, t2.middle_name, t2.last_name, count(*) from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1","select student_enrolment.student_id , students.first_name , students.middle_name , students.last_name , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT students.first_name, students.middle_name, students.last_name, students.student_id, COUNT(*) AS enrollments FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id GROUP BY students.student_id ORDER BY enrollments DESC LIMIT 1;","SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;","SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) AS number_of_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY number_of_enrollments DESC LIMIT 1","SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_enrolment_id) as num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1","SELECT first_name, middle_name, last_name, Students.student_id, COUNT(Student_Enrolment.student_id) AS number_of_enrollments FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id GROUP BY Students.student_id ORDER BY number_of_enrollments DESC LIMIT 1","select students.first_name, students.middle_name, students.last_name, count(*) from students join student_enrolment on students.student_id = student_enrolment.student_id group by students.student_id order by count(*) desc limit 1","select t1.first_name, t1.middle_name, t1.last_name, t1.student_id, count(*) from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1","select students.first_name , students.middle_name , students.last_name , student_enrolment.student_id , count(*) from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id  group by student_enrolment.student_id  order by count(*) desc limit 1"
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT semesters.semester_name FROM semesters LEFT JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.student_id IS NULL;,SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL,SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment),SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment),SELECT semester_name FROM Semesters WHERE semester_id NOT IN (   SELECT DISTINCT semester_id   FROM Student_Enrolment ),select semester_name from semesters where semester_id not in (select semester_id from student_enrolment),select semester_name from semesters except select t1.semester_name from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id,select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )
SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT semesters.semester_name FROM semesters LEFT JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id WHERE student_enrolment.student_id IS NULL;,SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL,SELECT T1.semester_name FROM Semesters AS T1 LEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_id IS NULL,SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment),SELECT semester_name FROM Semesters LEFT JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id WHERE Student_Enrolment.student_id IS NULL,select semester_name from semesters where semester_id not in (select semester_id from student_enrolment),select semester_name from semesters where semester_id not in (select semester_id from student_enrolment),select semesters.semester_name from Semesters where  semesters.semester_id not in (select Student_Enrolment.semester_id from Student_Enrolment  )
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT courses.course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id;,SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;,SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses),SELECT DISTINCT course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id,SELECT course_name FROM Courses WHERE course_id IN (     SELECT course_id     FROM Student_Enrolment_Courses ),select course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id,select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id,select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id
SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT courses.course_name FROM courses INNER JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id;,SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name,SELECT DISTINCT course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id,SELECT C.course_name FROM Courses C JOIN Sections S ON C.course_id = S.course_id JOIN Student_Enrolment_Courses SEC ON S.course_id = SEC.course_id GROUP BY C.course_name,select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id,select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id,select distinct courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT courses.course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY student_enrolment_courses.course_id ORDER BY COUNT(student_enrolment_courses.student_enrolment_id) DESC LIMIT 1;,"SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(*) DESC LIMIT 1;",SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,SELECT course_name FROM courses WHERE course_id = (   SELECT course_id   FROM student_enrolment_courses   GROUP BY course_id   ORDER BY COUNT(*) DESC   LIMIT 1 ),select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count(*) desc limit 1,select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1,select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by courses.course_name  order by count(*) desc limit 1
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT course_name FROM courses JOIN student_enrolment_courses ON courses.course_id = student_enrolment_courses.course_id GROUP BY course_name ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(sec.student_enrolment_id) DESC LIMIT 1;",SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY count(T2.student_course_id) DESC LIMIT 1,SELECT course_name FROM Courses WHERE course_id = (   SELECT course_id   FROM Student_Enrolment_Courses   GROUP BY course_id   ORDER BY COUNT(student_enrolment_id) DESC   LIMIT 1 );,select courses.course_name from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name order by count(*) desc limit 1,select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1,select courses.course_name from Student_Enrolment_Courses join Courses on Student_Enrolment_Courses.course_id = Courses.course_id  group by courses.course_name  order by count(*) desc limit 1
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT students.last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.student_id IS NULL;,SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'NorthCarolina' AND se.student_id IS NULL;,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id LEFT JOIN Student_Enrolment AS T3 ON T1.student_id = T3.student_id WHERE T2.state_province_county = 'North Carolina' AND T3.degree_program_id IS NULL,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment),SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'NorthCarolina' AND Student_Enrolment.student_id IS NULL,"select last_name from students where current_address_id in (select student_enrolment.student_id from student_enrolment join addresses on student_enrolment.student_enrolment_id = addresses.address_id where addresses.state_province_county = ""North Carolina"") except select students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id join addresses on addresses.address_id = student_enrolment.student_enrolment_id where addresses.state_province_county = ""North Carolina""","select t2.last_name from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id join addresses as t3 on t1.student_id = t3.address_id where t3.state_province_county = ""North Carolina"" except select t2.last_name from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id join departments as t3 on t1.student_id = t2.student_id","select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = ""North Carolina""   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id"
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT students.last_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id WHERE addresses.state_province_county = 'North Carolina' AND student_enrolment.student_id IS NULL;,SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'NorthCarolina' AND NOT EXISTS (   SELECT 1    FROM Student_Enrolment se   WHERE se.student_id = s.student_id );,"SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = ""North Carolina"" AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment)",SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN (SELECT student_id FROM Student_Enrolment),SELECT last_name FROM Students  JOIN Addresses ON Students.current_address_id = Addresses.address_id  LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  WHERE Addresses.state_province_county = 'NorthCarolina' AND Student_Enrolment.degree_program_id IS NULL,"select last_name from students where permanent_address_id in (select student_enrolment.student_id from addresses join student_enrolment on addresses.address_id = student_enrolment.student_enrolment_id where addresses.state_province_county = ""North Carolina"")","select last_name from students where current_address_id in (select t1.address_id from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.student_id where t1.state_province_county = ""NC"")","select students.last_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.state_province_county = ""NC""   except select students.last_name from Student_Enrolment join Students on Student_Enrolment.student_id = Students.student_id"
"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts WHERE transcripts.transcript_id IN (SELECT student_enrolment_courses.student_enrolment_id FROM student_enrolment_courses GROUP BY student_enrolment_courses.student_enrolment_id HAVING COUNT(*) >= 2);","SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;","SELECT T1.transcript_date , T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2","SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING count(*) >= 2","SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (     SELECT transcript_id     FROM Transcript_Contents     GROUP BY transcript_id     HAVING COUNT(student_course_id) >= 2 );","select transcripts.transcript_date, transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id having count(*) >= 2","select t1.transcript_date, t1.transcript_id from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2","select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcripts.transcript_id having  count(*) >= 2"
"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT transcript_date, transcript_id FROM transcripts WHERE transcript_id IN ( SELECT transcript_id FROM student_enrolment_courses GROUP BY transcript_id HAVING COUNT(DISTINCT course_id) >= 2 );","SELECT t.transcript_id, t.transcript_date FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id, t.transcript_date HAVING COUNT(tc.student_course_id) >= 2;","SELECT T1.transcript_date , T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING count(*) >= 2","SELECT T1.transcript_id, T1.transcript_date  FROM Transcripts AS T1  JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T1.transcript_id, T1.transcript_date  HAVING count(*) >= 2","SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   HAVING COUNT(student_course_id) >= 2 )","select transcripts.transcript_date, transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id having count(*) >= 2","select t1.transcript_date, t1.transcript_id from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2","select transcripts.transcript_date , transcripts.transcript_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id  group by transcripts.transcript_id having  count(*) >= 2"
SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' AND last_name = 'Ward';,SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';,"SELECT cell_mobile_number FROM Students WHERE first_name = ""Timmothy"" AND last_name = ""Ward""",SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward',SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward',"select cell_mobile_number from students where first_name = ""Timmothy"" and last_name = ""Ward""","select cell_mobile_number from students where first_name = ""Timmothy"" and last_name = ""Ward""","select students.cell_mobile_number from Students where  students.first_name = ""Timmothy"" and students.last_name = ""Ward"""
select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT students.cell_mobile_number FROM students WHERE students.first_name = 'Timmothy' AND students.last_name = 'Ward';,SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';,"SELECT cell_mobile_number FROM Students WHERE first_name = ""Timmothy"" AND last_name = ""Ward""",SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward',SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward',"select cell_mobile_number from students where first_name = ""Timmothy"" and last_name = ""Ward""","select cell_mobile_number from students where first_name = ""Timmothy"" and last_name = ""Ward""","select students.cell_mobile_number from Students where  students.first_name = ""Timmothy"" and students.last_name = ""Ward"""
"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1;","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","select students.first_name, students.middle_name, students.last_name from students join student_enrolment on students.student_id = student_enrolment.student_id order by students.date_first_registered asc limit 1","select first_name, middle_name, last_name from students order by date_first_registered asc limit 1","select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT students.first_name, students.middle_name, students.last_name FROM students ORDER BY students.date_first_registered LIMIT 1;","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","select students.first_name, students.middle_name, students.last_name from student_enrolment join students on student_enrolment.student_id = students.student_id order by students.date_first_registered limit 1","select first_name, middle_name, last_name from students order by date_first_registered asc limit 1","select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN transcripts ON student_enrolment.student_enrolment_id = transcripts.transcript_id ORDER BY transcripts.transcript_date ASC LIMIT 1;","SELECT s.first_name, s.middle_name, s.last_name FROM Students s ORDER BY s.date_left ASC LIMIT 1;","SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1","select first_name, middle_name, last_name from students order by date_first_registered limit 1","select first_name, middle_name, last_name from students order by date_first_registered limit 1","select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT students.first_name, students.middle_name, students.last_name FROM students JOIN student_enrolment ON students.student_id = student_enrolment.student_id JOIN student_enrolment_courses ON student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id JOIN transcripts ON student_enrolment.student_enrolment_id = transcripts.transcript_id ORDER BY students.date_first_registered ASC LIMIT 1;","SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id ORDER BY se.semester_id LIMIT 1;","SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1","SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1","select first_name, middle_name, last_name from students order by date_first_registered limit 1","select first_name, middle_name, last_name from students order by date_first_registered limit 1","select students.first_name , students.middle_name , students.last_name from Students   order by students.date_first_registered asc limit 1"
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT students.first_name FROM students JOIN addresses AS perm ON students.permanent_address_id = perm.address_id JOIN addresses AS curr ON students.current_address_id = curr.address_id WHERE perm.line_1 <> curr.line_1;,SELECT s.first_name FROM Students s WHERE s.current_address_id <> s.permanent_address_id;,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,SELECT first_name FROM Students WHERE permanent_address_id != current_address_id,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,select distinct first_name from students where permanent_address_id!= (select current_address_id from students),select distinct t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id = t2.address_id where t2.city!= 'New York City',select students.first_name from Students where  students.permanent_address_id != students.current_address_id
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT students.first_name FROM students JOIN addresses AS permanent ON students.permanent_address_id = permanent.address_id JOIN addresses AS current ON students.current_address_id = current.address_id WHERE permanent.line_1 <> current.line_1;,SELECT s.first_name FROM Students s WHERE s.current_address_id <> s.permanent_address_id LIMIT 1;,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,SELECT first_name FROM Students WHERE permanent_address_id != current_address_id,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;,select first_name from students where permanent_address_id!= (select current_address_id from students),select distinct first_name from students where permanent_address_id!= (select current_address_id from students),select students.first_name from Students where  students.permanent_address_id != students.current_address_id
"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses WHERE addresses.address_id IN ( SELECT current_address_id FROM students GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1 );","SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 ORDER BY COUNT(*) DESC LIMIT 1;","SELECT T1.current_address_id, T2.line_1, T2.line_2, T2.line_3 FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id GROUP BY T1.current_address_id ORDER BY COUNT(*) DESC LIMIT 1;","SELECT A.address_id, A.line_1, A.line_2, A.line_3 FROM Addresses AS A WHERE A.address_id = (     SELECT S.current_address_id     FROM Students AS S     GROUP BY S.current_address_id     ORDER BY COUNT(*) DESC     LIMIT 1 )","SELECT COUNT(student_id) AS student_count, current_address_id, line_1, line_2, line_3 FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id GROUP BY current_address_id ORDER BY student_count DESC LIMIT 1","select addresses.address_id, addresses.line_1 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count(*) desc limit 1","select t1.address_id, t1.line_1 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1","select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses INNER JOIN students ON students.permanent_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(*) DESC LIMIT 1;","SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1;","SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id GROUP BY T1.address_id, T1.line_1, T1.line_2 ORDER BY count(*) DESC LIMIT 1","SELECT address_id, line_1, line_2 FROM Addresses WHERE address_id = (   SELECT current_address_id   FROM Students   GROUP BY current_address_id   ORDER BY COUNT(*) DESC   LIMIT 1 )","select addresses.address_id, addresses.line_1, addresses.line_2 from addresses join students on addresses.address_id = students.current_address_id group by addresses.address_id order by count(*) desc limit 1","select t1.address_id, t1.line_1, t1.line_2 from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id group by t1.address_id order by count(*) desc limit 1","select addresses.address_id , addresses.line_1 , addresses.line_2 from Students join Addresses on Students.permanent_address_id = Addresses.address_id  group by addresses.address_id  order by count(*) desc limit 1"
SELECT avg(transcript_date) FROM Transcripts,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT AVG(transcript_date) AS average_print_date FROM transcripts;,SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;,SELECT avg(transcript_date) FROM Transcripts,SELECT AVG(transcript_date) FROM Transcripts,SELECT AVG(transcript_date) FROM Transcripts,select avg(transcript_date) from transcripts,select avg(transcript_date) from transcripts,select avg(transcripts.transcript_date) from Transcripts
SELECT avg(transcript_date) FROM Transcripts,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT AVG(transcript_date) FROM transcripts;,SELECT AVG(transcript_date) FROM Transcripts;,SELECT avg(transcript_date) FROM Transcripts,SELECT AVG(transcript_date) FROM Transcripts,SELECT AVG(transcript_date) FROM Transcripts,select avg(transcript_date) from transcripts,select avg(transcript_date) from transcripts,select avg(transcripts.transcript_date) from Transcripts
"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date LIMIT 1;","SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1;","SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","SELECT transcript_id, transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","select transcript_date, other_details from transcripts order by transcript_date asc limit 1","select transcript_date, other_details from transcripts order by transcript_date asc limit 1","select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT transcript_date, other_details FROM transcripts ORDER BY transcript_date ASC LIMIT 1;","SELECT MIN(transcript_date) AS earliest_transcript_date, other_details  FROM Transcripts;","SELECT min(transcript_date), other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",SELECT MIN(transcript_date) FROM Transcripts;,"select transcript_date, other_details from transcripts order by transcript_date asc limit 1","select transcript_date, other_details from transcripts order by transcript_date asc limit 1","select transcripts.transcript_date , transcripts.other_details from Transcripts   order by transcripts.transcript_date asc limit 1"
SELECT count(*) FROM Transcripts,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) FROM transcripts;,SELECT COUNT(*) FROM Transcripts;,SELECT count(*) FROM Transcripts;,SELECT COUNT(*) FROM Transcripts,SELECT COUNT(transcript_id) FROM Transcripts,select count(*) from transcripts,select count(*) from transcripts,select count(*) from Transcripts
SELECT count(*) FROM Transcripts,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) FROM transcripts;,SELECT COUNT(*) FROM Transcripts;,SELECT count(*) FROM Transcripts,SELECT COUNT(*) FROM Transcripts,SELECT COUNT(transcript_id) FROM Transcripts,select count(*) from transcripts,select count(*) from transcripts,select count(*) from Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1;,SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts;,SELECT max(transcript_date) FROM Transcripts,SELECT MAX(transcript_date) FROM Transcripts,SELECT MAX(transcript_date) FROM Transcripts;,select transcript_date from transcripts order by transcript_date desc limit 1,select transcript_date from transcripts order by transcript_date desc limit 1,select transcripts.transcript_date from Transcripts   order by transcripts.transcript_date desc limit 1
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT transcript_date FROM transcripts ORDER BY transcript_date DESC LIMIT 1;,SELECT MAX(transcript_date) FROM Transcripts;,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,SELECT MAX(transcript_date) FROM Transcripts,SELECT MAX(transcript_date) FROM Transcripts,select max(transcript_date) from transcripts,select transcript_date from transcripts order by transcript_date desc limit 1,select transcripts.transcript_date from Transcripts   order by transcripts.transcript_date desc limit 1
"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT COUNT(*) as max_enrollment_count, student_enrolment_id FROM student_enrolment_courses GROUP BY student_enrolment_id ORDER BY max_enrollment_count DESC LIMIT 1;","SELECT student_course_id, COUNT(*) AS num_transcripts FROM Transcript_Contents GROUP BY student_course_id ORDER BY num_transcripts DESC LIMIT 1;","SELECT count(*) , T1.student_course_id FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_course_id ORDER BY count(*) DESC LIMIT 1","SELECT count(T1.student_course_id) ,  T1.student_course_id FROM Transcript_Contents AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id  =  T2.student_course_id GROUP BY T1.student_course_id ORDER BY count(T1.student_course_id) DESC LIMIT 1","SELECT COUNT(transcript_id) AS times_in_transcripts, student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY times_in_transcripts DESC LIMIT 1;","select count(*), student_enrolment.student_enrolment_id from student_enrolment join transcript_contents on student_enrolment.student_enrolment_id = transcript_contents.student_course_id group by student_enrolment.student_enrolment_id order by count(*) desc limit 1","select count(distinct t1.transcript_id), t1.student_course_id from transcript_contents as t1 join student_enrolment_courses as t2 on t1.student_course_id = t2.student_course_id group by t1.student_course_id order by count(*) desc limit 1","select count( distinct transcripts.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Transcripts on Transcript_Contents.transcript_id = Transcripts.transcript_id join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by transcripts.transcript_id  order by count( distinct transcripts.transcript_id) desc limit 1"
"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT MAX(count_course) as max_count, course_id, student_enrolment_id FROM ( SELECT course_id, student_enrolment_id, COUNT(course_id) as count_course FROM student_enrolment_courses GROUP BY course_id, student_enrolment_id ) GROUP BY course_id ORDER BY max_count DESC LIMIT 1;","SELECT course_id, COUNT(*) AS num_transcripts FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY num_transcripts DESC LIMIT 1;","SELECT T1.course_id , T1.student_enrolment_id , count(*) FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1","SELECT max(count(T1.student_course_id)), T2.student_enrolment_id FROM Transcript_Contents AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.student_course_id  =  T2.student_course_id GROUP BY T2.student_enrolment_id","SELECT MAX(course_count) AS max_course_count, course_id FROM (   SELECT COUNT(tc.transcript_id) AS course_count, sec.course_id   FROM Transcript_Contents tc   JOIN Student_Enrolment_Courses sec ON tc.student_course_id = sec.student_course_id   GROUP BY sec.course_id ) AS course_counts GROUP BY course_id ORDER BY max_course_count DESC LIMIT 1;","select courses.course_name, count(*) from courses join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id group by courses.course_name","select max(t1.transcript_id), t2.student_course_id from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t2.student_course_id","select count( distinct transcript_contents.transcript_id) , student_enrolment_courses.student_enrolment_id from Transcript_Contents join Student_Enrolment_Courses on Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id  group by student_enrolment_courses.student_enrolment_id  order by count( distinct transcript_contents.transcript_id) desc limit 1"
"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id JOIN student_enrolment ON student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id GROUP BY transcripts.transcript_date, transcripts.transcript_id ORDER BY COUNT(*) ASC LIMIT 1;","SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   ORDER BY COUNT(*) ASC   LIMIT 1 );","SELECT T1.transcript_date , T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(*) = (     SELECT MIN(COUNT(*))     FROM Transcript_Contents     GROUP BY transcript_id )","SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   ORDER BY COUNT(student_course_id) ASC   LIMIT 1 )","select transcripts.transcript_date, transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id order by count(*) asc limit 1","select transcript_date, transcript_id from transcripts group by transcript_id order by count(*) asc limit 1","select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1"
"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT transcripts.transcript_id, transcripts.transcript_date FROM transcripts JOIN transcript_contents ON transcript_contents.transcript_id = transcripts.transcript_id GROUP BY transcripts.transcript_id, transcripts.transcript_date ORDER BY COUNT(*) ASC LIMIT 1;","SELECT transcript_id, transcript_date FROM Transcripts ORDER BY (SELECT COUNT(*) FROM Transcript_Contents WHERE Transcript_Contents.transcript_id = Transcripts.transcript_id) LIMIT 1;","SELECT transcript_date, transcript_id FROM Transcript_Contents JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id GROUP BY Transcript_Contents.transcript_id ORDER BY COUNT(*) ASC LIMIT 1","SELECT T1.transcript_id, T1.transcript_date, COUNT(T2.student_course_id) AS num_results FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date ORDER BY num_results ASC LIMIT 1","SELECT MIN(transcript_id), transcript_date FROM Transcripts GROUP BY transcript_id, transcript_date ORDER BY COUNT(transcript_id) ASC LIMIT 1","select transcripts.transcript_date, transcripts.transcript_id from transcripts join transcript_contents on transcripts.transcript_id = transcript_contents.transcript_id group by transcripts.transcript_id order by count(*) asc limit 1","select transcript_date, transcript_id from transcripts group by transcript_id order by count(*) asc limit 1","select transcripts.transcript_date , transcripts.transcript_id from Transcripts  group by transcripts.transcript_id  order by count(*) asc limit 1"
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE degree_programs.degree_summary_name = 'Bachelor' INTERSECT SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON student_enrolment.semester_id = semesters.semester_id JOIN degree_programs ON degree_programs.degree_program_id = student_enrolment.degree_program_id WHERE degree_programs.degree_summary_name = 'Master';,"SELECT s.semester_name FROM Student_Enrolment se JOIN Semesters s ON se.semester_id = s.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Master', 'Bachelor') GROUP BY s.semester_name HAVING COUNT(DISTINCT dp.degree_summary_name) = 2;",SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Master') INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor')),SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Master') AND semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Bachelor'),"SELECT semesters.semester_id, semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name IN ('Master', 'Bachelor') GROUP BY semesters.semester_id, semesters.semester_name HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2",select semester_id from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Master' intersect select semester_id from student_enrolment join degree_programs on student_enrolment.degree_program_id = degree_programs.degree_program_id where degree_programs.degree_summary_name = 'Bachelor',select t1.semester_name from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Master' intersect select t1.semester_name from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.student_enrolment_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor',"select student_enrolment.semester_id from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = ""Master""   intersect select student_enrolment.semester_id from Student_Enrolment join Degree_Programs on Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id where  degree_programs.degree_summary_name = ""Bachelor"""
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY semesters.semester_id HAVING COUNT(DISTINCT degree_programs.degree_summary_name) = 2;","SELECT semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Bachelor', 'Masters') GROUP BY semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2;","SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name IN ('Masters', 'Bachelors')) GROUP BY semester_id HAVING COUNT(DISTINCT degree_program_id) = 2",SELECT semester_id FROM Semesters WHERE semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Masters') AND semester_id IN (SELECT T1.semester_id FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.degree_summary_name  =  'Bachelors'),"SELECT semester_id FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE degree_summary_name IN ('Masters', 'Bachelors') GROUP BY semester_id HAVING COUNT(DISTINCT degree_summary_name) = 2;",select semester_id from student_enrolment where student_id = (select student_id from student_enrolment where degree_program_id = 'MA' intersect select semester_id from student_enrolment where degree_program_id = 'B'),select semester_id from student_enrolment where student_id in (select student_id from student_enrolment where degree_program_id = 'MA' intersect select student_id from student_enrolment where degree_program_id = 'B'),"select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = ""MA""   intersect select student_enrolment.semester_id from Student_Enrolment where  student_enrolment.degree_program_id = ""Bachelor"""
SELECT count(DISTINCT current_address_id) FROM Students,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT count(DISTINCT students.current_address_id) FROM students;,SELECT COUNT(DISTINCT current_address_id) FROM Students;,SELECT count(DISTINCT current_address_id) FROM Students,SELECT count(DISTINCT T1.address_id) FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id,SELECT COUNT(DISTINCT current_address_id) FROM Students,select count(distinct current_address_id) from students,select count(distinct current_address_id) from students,select count( distinct students.current_address_id) from Students
SELECT count(DISTINCT current_address_id) FROM Students,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT DISTINCT line_1, line_2, line_3, city FROM addresses JOIN students ON students.permanent_address_id = addresses.address_id OR students.current_address_id = addresses.address_id;","SELECT DISTINCT a.line_1, a.line_2, a.line_3, a.city, a.zip_postcode, a.state_province_county, a.country  FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id","SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id",SELECT DISTINCT * FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students) OR address_id IN (SELECT permanent_address_id FROM Students),"SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country, addresses.other_address_details FROM addresses INNER JOIN students ON addresses.address_id = students.current_address_id OR addresses.address_id = students.permanent_address_id GROUP BY addresses.address_id;",select distinct addresses.address_id from addresses join students on addresses.address_id = students.current_address_id,select distinct t1.address_id from addresses as t1 join students as t2 on t1.address_id = t2.current_address_id,select distinct addresses.address_id from Students join Addresses on Students.permanent_address_id = Addresses.address_id
SELECT other_student_details FROM Students ORDER BY other_student_details DESC,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT students.first_name, students.last_name, students.middle_name, students.student_id, students.email_address, addresses.line_1, addresses.line_2, addresses.line_3, addresses.city FROM students INNER JOIN addresses ON students.permanent_address_id = addresses.address_id ORDER BY students.last_name DESC;","SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC, first_name DESC, middle_name DESC","SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC","SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC","SELECT * FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC, cell_mobile_number DESC, email_address DESC, ssn DESC, date_first_registered DESC, date_left DESC, other_student_details DESC;",select other_student_details from students order by other_student_details desc,select other_student_details from students order by other_student_details desc,select students.other_student_details from Students   order by students.other_student_details desc
SELECT other_student_details FROM Students ORDER BY other_student_details DESC,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT students.last_name, students.first_name, students.middle_name, students.other_student_details FROM students ORDER BY students.last_name DESC;",SELECT other_student_details FROM Students ORDER BY other_student_details DESC,"SELECT other_student_details FROM Students ORDER BY last_name DESC, first_name DESC",SELECT other_student_details FROM Students ORDER BY last_name DESC,SELECT other_student_details FROM Students ORDER BY first_name DESC,select other_student_details from students order by other_student_details desc,select other_student_details from students order by other_student_details desc,select students.other_student_details from Students   order by students.other_student_details desc
SELECT section_description FROM Sections WHERE section_name  =  'h',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT section_name, section_description, section_id, course_id FROM sections WHERE section_name = 'h';","SELECT s.section_id, s.section_name, s.section_description FROM Sections s WHERE s.section_name = 'h';","SELECT section_description FROM Sections WHERE section_name = ""h""",SELECT section_description FROM Sections WHERE section_name = 'h',SELECT section_description FROM Sections WHERE section_name = 'h';,"select section_description from sections where section_name = ""H""","select t1.section_description from sections as t1 join addresses as t2 on t1.section_id = t2.address_id where t1.section_name = ""h""","select sections.section_description from Sections where  sections.section_name = ""h"""
SELECT section_description FROM Sections WHERE section_name  =  'h',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT sections.section_description FROM sections WHERE sections.section_name = 'h';,SELECT section_description  FROM Sections WHERE section_name = 'h';,"SELECT section_description FROM Sections WHERE section_name = ""h"";",SELECT section_description FROM Sections WHERE section_name = 'h',SELECT section_description FROM Sections WHERE section_name = 'h';,"select section_description from sections where section_name = ""H""","select section_description from sections where section_name = ""h""","select sections.section_description from Sections where  sections.section_name = ""h"""
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT students.first_name FROM students WHERE students.permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR students.cell_mobile_number = '09700166582';,SELECT first_name FROM Students WHERE permanent_address_id IN (   SELECT address_id   FROM Addresses   WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582';,SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582',SELECT DISTINCT first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582',SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582',"select first_name from students where permanent_address_id in (select address_id from addresses where country = 'Haiti') or cell_mobile_number = ""09700166582""","select t2.first_name from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t1.country = ""Haiti"" or t2.cell_mobile_number = ""09700166582""","select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = ""Haiti"" or students.cell_mobile_number = ""09700166582"""
select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT first_name FROM students WHERE permanent_address_id IN (SELECT address_id FROM addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582';,SELECT s.first_name FROM Students s JOIN Addresses a ON s.permanent_address_id = a.address_id WHERE a.country = 'Haiti' OR s.cell_mobile_number = '09700166582';,"SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = ""Haiti"") OR cell_mobile_number = ""09700166582""",SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582',SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582',"select distinct students.first_name from addresses join students on addresses.address_id = students.permanent_address_id where addresses.country = ""Haiti"" or students.cell_mobile_number = ""09700166582""","select t2.first_name from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t1.country = ""Haiti"" or t2.cell_mobile_number = ""09700166582""","select students.first_name from Students join Addresses on Students.permanent_address_id = Addresses.address_id where  addresses.country = ""Haiti"" or students.cell_mobile_number = ""09700166582"""
SELECT Title FROM Cartoon ORDER BY title,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT title FROM cartoon ORDER BY title ASC;,SELECT Title FROM Cartoon ORDER BY Title ASC;,SELECT Title FROM Cartoon ORDER BY Title ASC,SELECT Title FROM Cartoon ORDER BY Title ASC,SELECT Title FROM Cartoon ORDER BY Title ASC;,select title from cartoon order by title,select title from cartoon order by title,select cartoon.title from Cartoon   order by cartoon.title asc
SELECT Title FROM Cartoon ORDER BY title,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT cartoon.title FROM cartoon ORDER BY cartoon.title ASC;,SELECT Title FROM Cartoon ORDER BY Title ASC,SELECT Title FROM Cartoon ORDER BY Title ASC,SELECT Title FROM Cartoon ORDER BY Title ASC,SELECT Title FROM Cartoon ORDER BY Title ASC;,select title from cartoon order by title,select title from cartoon order by title,select cartoon.title from Cartoon   order by cartoon.title asc
"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT title FROM cartoon WHERE directed_by = 'Ben Jones';,SELECT Title  FROM Cartoon WHERE Directed_by = 'Ben Jones';,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones""",SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones',SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';,"select title from cartoon where directed_by = ""Ben Jones""","select title from cartoon where directed_by = ""Ben Jones""","select cartoon.title from Cartoon where  cartoon.directed_by = ""Ben Jones"""
"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones';,SELECT Title  FROM Cartoon WHERE Directed_by = 'Ben Jones';,SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones',SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones',SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';,"select title from cartoon where directed_by = ""Ben Jones""",select title from cartoon where directed_by = 'Ben Jones',"select cartoon.title from Cartoon where  cartoon.directed_by = ""Ben Jones"""
"SELECT count(*) FROM Cartoon WHERE Written_by = ""Joseph Kuhr"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT COUNT(*) FROM cartoon WHERE written_by = ""Joseph Kuhr"";",SELECT COUNT(*)  FROM Cartoon WHERE Written_by = 'Joseph Kuhr';,"SELECT count(*) FROM Cartoon WHERE Written_by = ""Joseph Kuhr""",SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr',SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr',"select count(*) from cartoon where written_by = ""Joseph Kuhr""","select count(*) from cartoon where written_by = ""Joseph Kuhr""","select count(*) from Cartoon where  cartoon.written_by = ""Joseph Kuhr"""
"SELECT count(*) FROM Cartoon WHERE Written_by = ""Joseph Kuhr"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT count(*) FROM cartoon WHERE written_by = ""Joseph Kuhr"";",SELECT COUNT(*)  FROM Cartoon WHERE Written_by = 'Joseph Kuhr';,SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr',SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr',SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr',"select count(*) from cartoon where written_by = ""Joseph Kuhr""","select count(*) from cartoon where written_by = ""Joseph Kuhr""","select count(*) from Cartoon where  cartoon.written_by = ""Joseph Kuhr"""
"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT cartoon.title, cartoon.directed_by FROM cartoon ORDER BY cartoon.original_air_date;","SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;","SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date","SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date","SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;","select title, directed_by from cartoon order by original_air_date","select title, directed_by from cartoon order by original_air_date","select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc"
"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT cartoon.title, cartoon.directed_by FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id ORDER BY cartoon.original_air_date;","SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;","SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date","SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date","SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date ASC","select title, directed_by from cartoon order by original_air_date","select title, directed_by from cartoon order by original_air_date","select cartoon.title , cartoon.directed_by from Cartoon   order by cartoon.original_air_date asc"
"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT title FROM cartoon WHERE directed_by IN (""Ben Jones"", ""Brandon Vietti"");","SELECT Title  FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');","SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti""",SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti',"SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');","select title from cartoon where directed_by = ""Ben Jones"" or directed_by = ""Brandon Vietti""","select title from cartoon where directed_by = ""Ben Jones"" or directed_by = ""Brandon Vietti""","select cartoon.title from Cartoon where  cartoon.directed_by = ""Ben Jones"" or cartoon.directed_by = ""Brandon Vietti"""
"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' OR cartoon.directed_by = 'Brandon Vietti';,"SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');",SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti',SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti',"SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');","select title from cartoon where directed_by = ""Ben Jones"" or directed_by = ""Brandon Vietti""","select title from cartoon where directed_by = ""Ben Jones"" or directed_by = ""Brandon Vietti""","select cartoon.title from Cartoon where  cartoon.directed_by = ""Ben Jones"" or cartoon.directed_by = ""Brandon Vietti"""
"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT country, COUNT(*) as num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;","SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1;","SELECT Country , count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","SELECT Country, COUNT(*) as num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1","SELECT COUNT(id) AS NumberOfTVChannels, Country FROM TV_Channel GROUP BY Country ORDER BY NumberOfTVChannels DESC LIMIT 1","select country, count(*) from tv_channel group by country order by count(*) desc limit 1","select country, count(*) from tv_channel group by country order by count(*) desc limit 1","select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT country, COUNT(*) AS channel_count FROM tv_channel GROUP BY country ORDER BY channel_count DESC LIMIT 1;","SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1;","SELECT Country , COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1","SELECT Country, COUNT(*) as num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1","SELECT COUNT(id) AS NumberOfChannels, Country FROM TV_Channel GROUP BY Country ORDER BY NumberOfChannels DESC LIMIT 1","select country, count(*) from tv_channel group by country order by count(*) desc limit 1","select country, count(*) from tv_channel group by country order by count(*) desc limit 1","select tv_channel.country , count(*) from TV_Channel  group by tv_channel.country  order by count(*) desc limit 1"
"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;","SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;","SELECT count(DISTINCT series_name) , count(DISTINCT Content) FROM TV_Channel","SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT Content) FROM TV_Channel","SELECT COUNT(DISTINCT series_name) AS distinct_series_names, COUNT(DISTINCT Content) AS distinct_contents FROM TV_Channel;","select count(distinct series_name), content from tv_channel","select count(distinct series_name), count(distinct content) from tv_channel","select count( distinct tv_channel.series_name) , count( distinct tv_channel.content) from TV_Channel"
"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM tv_channel;","SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel;","SELECT count(DISTINCT series_name) , count(DISTINCT Content) FROM TV_Channel","SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT Content) FROM TV_Channel","SELECT COUNT(DISTINCT series_name) AS series_count, COUNT(DISTINCT Content) AS content_count FROM TV_Channel","select count(distinct series_name), count(distinct content) from tv_channel","select count(distinct series_name), count(distinct content) from tv_channel","select count( distinct tv_channel.series_name) , count( distinct tv_channel.content) from TV_Channel"
"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT content FROM tv_channel WHERE series_name = ""Sky Radio"";",SELECT Content  FROM TV_Channel WHERE series_name = 'Sky Radio';,"SELECT ""Content"" FROM ""TV_Channel"" WHERE ""series_name"" = ""Sky Radio""",SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio',SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';,"select content from tv_channel where series_name = ""Sky Radio""","select content from tv_channel where series_name = ""Sky Radio""","select tv_channel.content from TV_Channel where  tv_channel.series_name = ""Sky Radio"""
"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT content FROM tv_channel WHERE series_name = ""Sky Radio"";",SELECT Content  FROM TV_Channel WHERE series_name = 'Sky Radio';,"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio"";",SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio',SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';,"select content from tv_channel where series_name = ""Sky Radio""","select content from tv_channel where series_name = ""Sky Radio""","select tv_channel.content from TV_Channel where  tv_channel.series_name = ""Sky Radio"""
"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT package_option FROM tv_channel WHERE series_name = ""Sky Radio"";",SELECT Package_Option  FROM TV_Channel WHERE series_name = 'Sky Radio';,"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio""",SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio',SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio',"select package_option from tv_channel where series_name = ""Sky Radio""","select package_option from tv_channel where series_name = ""Sky Radio""","select tv_channel.package_option from TV_Channel where  tv_channel.series_name = ""Sky Radio"""
"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.series_name = 'Sky Radio';,SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';,"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio""",SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio',SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio',"select package_option from tv_channel where series_name = ""Sky Radio""","select package_option from tv_channel where series_name = ""Sky Radio""","select tv_channel.package_option from TV_Channel where  tv_channel.series_name = ""Sky Radio"""
"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = ""English"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT count(*) FROM tv_channel WHERE language = 'English';,SELECT COUNT(*)  FROM TV_Channel WHERE Language = 'English';,SELECT count(*) FROM TV_Channel WHERE Language = 'English';,SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English',SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English',"select count(*) from tv_channel where language = ""English""","select count(*) from tv_channel where language = ""English""","select count(*) from TV_Channel where  tv_channel.language = ""English"""
"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = ""English"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT COUNT(DISTINCT id) FROM tv_channel WHERE language = 'English';,SELECT COUNT(*)  FROM TV_Channel WHERE Language = 'English';,"SELECT count(*) FROM TV_Channel WHERE Language = ""English""",SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English',SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';,"select count(*) from tv_channel where language = ""English""","select count(*) from tv_channel where language = ""English""","select count(*) from TV_Channel where  tv_channel.language = ""English"""
"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT language, count(*) as num_of_tv_channels FROM tv_channel GROUP BY language ORDER BY num_of_tv_channels LIMIT 1;","SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;","SELECT Language , count(*) FROM TV_Channel GROUP BY Language ORDER BY count(*) ASC LIMIT 1;","SELECT Language, COUNT(*) as num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1","SELECT Language, COUNT(*) AS NumberOfTVChannels FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1","select language, count(*) from tv_channel group by language order by count(*) asc limit 1","select language, count(*) from tv_channel group by language order by count(*) asc limit 1","select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;","SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;","SELECT Language, COUNT(*) as Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1;","SELECT Language, count(*) AS num_channels FROM TV_Channel GROUP BY Language HAVING count(*) = (SELECT min(count(*)) FROM TV_Channel GROUP BY Language)","SELECT Language, COUNT(id) AS NumberOfChannels FROM TV_Channel GROUP BY Language ORDER BY NumberOfChannels ASC LIMIT 1","select language, count(*) from tv_channel group by language order by count(*) asc limit 1","select language, count(*) from tv_channel group by language order by count(*) asc limit 1","select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language  order by count(*) asc limit 1"
"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.language, COUNT(tv_channel.id) FROM tv_channel GROUP BY tv_channel.language","SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language;","SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language","SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language","SELECT Language, COUNT(*) AS NumberOfChannels FROM TV_Channel GROUP BY Language","select language, count(*) from tv_channel group by language","select language, count(*) from tv_channel group by language","select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language"
"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT language, COUNT(DISTINCT tv_channel.id) as num_channels FROM tv_channel GROUP BY language;","SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language;","SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language","SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language","SELECT Language, COUNT(id) AS NumberOfChannels FROM TV_Channel GROUP BY Language","select language, count(*) from tv_channel group by language","select language, count(*) from tv_channel group by language","select tv_channel.language , count(*) from TV_Channel  group by tv_channel.language"
"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT series_name FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.title = ""The Rise of the Blue Beetle!"";",SELECT c.series_name FROM TV_Channel c JOIN Cartoon t ON c.id = t.Channel WHERE t.Title = 'The Rise of the Blue Beetle!';,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!""",SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!',SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!'),"select tv_channel.series_name from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.title = ""The Rise of the Blue Beetle! ""","select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = ""The rise of the blue beetle!""","select tv_channel.series_name from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.title = ""The Rise of the Blue Beetle!"""
"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT series_name FROM tv_channel WHERE id = ( SELECT channel FROM cartoon WHERE title = 'The Rise of the Blue Beetle!' );,SELECT c.series_name FROM TV_Channel c JOIN Cartoon ct ON c.id = ct.Channel WHERE ct.Title = 'The Rise of the Blue Beetle!';,"SELECT T2.series_name FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Title = ""The Rise of the Blue Beetle""",SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle',SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!'),"select tv_channel.series_name from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.title = ""The Rise of the Blue Beetle!""","select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = ""The rise of the blue beetle""","select tv_channel.series_name from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.title = ""The Rise of the Blue Beetle!"""
"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT cartoon.title FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = ""Sky Radio"";",SELECT Cartoon.Title FROM Cartoon  JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';,"SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = ""Sky Radio""",SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio',SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';,"select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = ""Sky Radio""","select t1.title from cartoon as t1 join tv_series as t2 on t1.id = t2.id join tv_channel as t3 on t2.channel = t3.id where t3.series_name = ""Sky Radio""","select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = ""Sky Radio"""
"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT cartoon.title FROM cartoon INNER JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE tv_channel.series_name = 'Sky Radio';,SELECT Title FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE tc.series_name = 'Sky Radio';,"SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = ""Sky Radio""",SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio',SELECT Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio',"select cartoon.title from cartoon join tv_channel on cartoon.channel = tv_channel.id where tv_channel.series_name = ""Sky Radio""","select t1.title from cartoon as t1 join tv_series as t2 on t1.id = t2.id join tv_channel as t3 on t2.channel = t3.id where t3.series_name = ""Sky Radio""","select cartoon.title from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  tv_channel.series_name = ""Sky Radio"""
SELECT Episode FROM TV_series ORDER BY rating,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT episode FROM tv_series ORDER BY rating DESC;,"SELECT Episode, Rating FROM TV_series ORDER BY Rating;",SELECT Episode FROM TV_series ORDER BY Rating,SELECT Episode FROM TV_series ORDER BY Rating DESC,SELECT Episode FROM TV_series ORDER BY Rating;,select episode from tv_series order by rating,select episode from tv_series order by rating,select tv_series.episode from TV_series   order by tv_series.rating asc
SELECT Episode FROM TV_series ORDER BY rating,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT episode FROM tv_series ORDER BY rating;,"SELECT Episode, Rating FROM TV_series ORDER BY Rating;",SELECT Episode FROM TV_series ORDER BY Rating,SELECT Episode FROM TV_series ORDER BY Rating DESC,SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;,select episode from tv_series order by rating,select episode from tv_series order by rating,select tv_series.episode from TV_series   order by tv_series.rating asc
"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;","SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3","SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3","SELECT TOP 3 Episode, Rating FROM TV_series ORDER BY Rating DESC","select episode, rating from tv_series order by rating desc limit 3","select episode, rating from tv_series order by rating desc limit 3","select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3"
"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT episode, rating FROM tv_series ORDER BY rating DESC LIMIT 3;","SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3","SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3","SELECT TOP 3 Episode, Rating FROM TV_series ORDER BY Rating DESC","select episode, rating from tv_series order by rating desc limit 3","select episode, rating from tv_series order by rating desc limit 3","select tv_series.episode , tv_series.rating from TV_series   order by tv_series.rating desc limit 3"
"SELECT max(SHARE) , min(SHARE) FROM TV_series;",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT MIN(share), MAX(share) FROM tv_series;","SELECT MIN(Share) AS min_share, MAX(Share) AS max_share FROM TV_series;","SELECT min(Share) , max(Share) FROM TV_series","SELECT MIN(Share), MAX(Share) FROM TV_series","SELECT MIN(Share) AS Min_Share, MAX(Share) AS Max_Share FROM TV_series","select min(share), max(share) from tv_series","select min(share), max(share) from tv_series","select min(tv_series.share) , max(tv_series.share) from TV_series"
"SELECT max(SHARE) , min(SHARE) FROM TV_series;",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT MAX(share), MIN(share) FROM tv_series;","SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM TV_series;","SELECT max(Share) , min(Share) FROM TV_series","SELECT max(Share), min(Share) FROM TV_series","SELECT MAX(Share) AS MaxShare, MIN(Share) AS MinShare FROM TV_series","select max(share), min(share) from tv_series","select max(share), min(share) from tv_series","select max(tv_series.share) , min(tv_series.share) from TV_series"
"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT air_date FROM tv_series WHERE episode = ""A Love of a Lifetime"";",SELECT Air_Date  FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"SELECT ""Air_Date"" FROM ""TV_series"" WHERE ""Episode"" = ""A Love of a Lifetime""",SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime',SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"select air_date from tv_series where episode = ""A love of a Lifetime""","select air_date from tv_series where episode = ""A love of a Lifetime""","select tv_series.air_date from TV_series where  tv_series.episode = ""A Love of a Lifetime"""
"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT air_date FROM tv_series WHERE episode = ""A Love of a Lifetime"";",SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime""",SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime',SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"select air_date from tv_series where episode = ""A love of a Lifetime""","select air_date from tv_series where episode = ""A love of a Lifetime""","select tv_series.air_date from TV_series where  tv_series.episode = ""A Love of a Lifetime"""
"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT weekly_rank FROM tv_series WHERE episode = ""A Love of a Lifetime"";",SELECT Weekly_Rank  FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"SELECT ""Weekly_Rank"" FROM ""TV_series"" WHERE ""Episode"" = ""A Love of a Lifetime""",SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime',SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"select weekly_rank from tv_series where episode = ""A love of a Lifetime""","select weekly_rank from tv_series where episode = ""A love of a Lifetime""","select tv_series.weekly_rank from TV_series where  tv_series.episode = ""A Love of a Lifetime"""
"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.episode = 'A Love of a Lifetime';,SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime""",SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime',SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"select weekly_rank from tv_series where episode = ""A love of a Lifetime""","select weekly_rank from tv_series where episode = ""A love of a Lifetime""","select tv_series.weekly_rank from TV_series where  tv_series.episode = ""A Love of a Lifetime"""
"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_series.episode = ""A Love of a Lifetime"";",SELECT c.series_name FROM TV_series s JOIN TV_Channel c ON s.Channel = c.id WHERE s.Episode = 'A Love of a Lifetime';,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime""",SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime',SELECT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime';,"select tv_channel.series_name from tv_channel join tv_series on tv_channel.id = tv_series.channel where tv_series.episode = ""A love of a Lifetime""","select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = ""A love of a Lifetime""","select tv_channel.series_name from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = ""A Love of a Lifetime"""
"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.series_name FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_series.episode = ""A Love of a Lifetime"";",SELECT series_name FROM TV_Channel WHERE id = (   SELECT Channel   FROM TV_series   WHERE Episode = 'A Love of a Lifetime' );,SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime'),SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime',SELECT series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime';,"select tv_channel.series_name from tv_series join tv_channel on tv_series.id = tv_channel.id where tv_series.episode = ""A love of a Lifetime""","select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.id where t2.episode = ""A love of a Lifetime""","select tv_channel.series_name from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_series.episode = ""A Love of a Lifetime"""
"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_series.episode FROM tv_series JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = ""Sky Radio"";",SELECT Episode FROM TV_series WHERE Channel IN (   SELECT id   FROM TV_Channel   WHERE series_name = 'Sky Radio' );,"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio""",SELECT T1.Episode FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio',SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';,"select tv_series.episode from tv_series join tv_channel on tv_series.channel = tv_channel.id where tv_channel.series_name = ""Sky Radio""","select t1.episode from tv_series as t1 join tv_channel as t2 on t1.channel = t2.id where t2.series_name = ""Sky Radio""","select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = ""Sky Radio"""
"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT episode FROM tv_series WHERE channel = ( SELECT id FROM tv_channel WHERE series_name = ""Sky Radio"" ) ;",SELECT Episode  FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio',"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio""",SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio',SELECT Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';,"select tv_series.episode from tv_series join tv_channel on tv_series.channel = tv_channel.id where tv_channel.series_name = ""Sky Radio""","select t1.episode from tv_series as t1 join tv_channel as t2 on t1.id = t2.id where t2.series_name = ""Sky Radio""","select tv_series.episode from TV_series join TV_Channel on TV_series.Channel = TV_Channel.id where  tv_channel.series_name = ""Sky Radio"""
"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT directed_by, COUNT(*) AS num_cartoons FROM cartoon GROUP BY directed_by;","SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by;","SELECT Directed_by , count(*) FROM Cartoon GROUP BY Directed_by","SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by","SELECT COUNT(*) AS NumberOfCartoons, Directed_by FROM Cartoon GROUP BY Directed_by","select directed_by, count(*) from cartoon group by directed_by","select directed_by, count(*) from cartoon group by directed_by","select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT cartoon.directed_by, COUNT(cartoon.id) as num_cartoons FROM cartoon GROUP BY cartoon.directed_by;","SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by;","SELECT Directed_by , count(*) FROM Cartoon GROUP BY Directed_by","SELECT COUNT(*) ,  Directed_by FROM Cartoon GROUP BY Directed_by","SELECT COUNT(*) AS Cartoons_Created, Directed_by FROM Cartoon GROUP BY Directed_by","select directed_by, count(*) from cartoon group by directed_by","select directed_by, count(*) from cartoon group by directed_by","select cartoon.directed_by , count(*) from Cartoon  group by cartoon.directed_by"
"select production_code ,  channel from cartoon order by original_air_date desc limit 1",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT cartoon.production_code, cartoon.channel FROM cartoon WHERE cartoon.original_air_date = ( SELECT MAX(original_air_date) FROM cartoon )","SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;","SELECT Production_code , Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1","SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1","SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1","select production_code, channel from cartoon order by original_air_date desc limit 1","select production_code, channel from cartoon order by original_air_date desc limit 1","select cartoon.production_code , cartoon.channel from Cartoon   order by cartoon.original_air_date desc limit 1"
"select production_code ,  channel from cartoon order by original_air_date desc limit 1",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT cartoon.production_code, cartoon.channel FROM cartoon WHERE cartoon.id = (SELECT MAX(id) FROM cartoon)","SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;","SELECT Production_code , Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1","SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1","SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1","select production_code, channel from cartoon order by original_air_date desc limit 1","select production_code, channel from cartoon order by original_air_date desc limit 1","select cartoon.production_code , cartoon.channel from Cartoon   order by cartoon.original_air_date desc limit 1"
"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  ""yes""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1;","SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';","SELECT T1.Package_Option , T1.series_name FROM TV_Channel AS T1 WHERE T1.Hight_definition_TV = ""Yes"";","SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'Yes'","SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes'","select package_option, series_name from tv_channel where hight_definition_tv = 1","select package_option, series_name from tv_channel where hight_definition_tv = 'High'","select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = ""Yes"""
"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  ""yes""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.hight_definition_tv = 1;","SELECT series_name, Package_Option FROM TV_Channel WHERE Hight_definition_TV = 'yes';","SELECT T1.Package_Option , T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'Yes'","SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 'Yes'","SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';","select package_option, series_name from tv_channel where hight_definition_tv = ""Hight_definition_TV""","select package_option, series_name from tv_channel where hight_definition_tv = 'Yes'","select tv_channel.package_option , tv_channel.series_name from TV_Channel where  tv_channel.hight_definition_tv = ""Yes"""
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey';,SELECT Country FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' );,"SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = ""Todd Casey"";",SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey',SELECT Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey');,select tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.written_by = 'Todd Casey',"select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.id where t2.written_by = ""Todd Casey""","select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = ""Todd Casey"""
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.written_by = 'Todd Casey';,SELECT DISTINCT Country FROM TV_Channel tc JOIN Cartoon c ON tc.id = c.Channel WHERE c.Written_by = 'Todd Casey';,"SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = ""Todd Casey""",SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey',SELECT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey',select tv_channel.country from cartoon join tv_channel on cartoon.id = tv_channel.id where cartoon.written_by = 'Todd Casey',"select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.id where t2.written_by = ""Todd Casey""","select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = ""Todd Casey"""
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.written_by = ""Todd Casey"" )",SELECT Country FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' );,SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey'),SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  'Todd Casey'),SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey'),select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = 'Todd Casey',"select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = ""Todd Casey""","select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = ""Todd Casey"""
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.country FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.written_by = ""Todd Casey"" );",SELECT Country FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' );,SELECT Country FROM TV_Channel EXCEPT SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey',SELECT Country FROM TV_Channel WHERE Country NOT IN (SELECT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  'Todd Casey'),SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey'),"select country from tv_channel except select tv_channel.country from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.written_by = ""Todd Casey""","select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.id where t2.written_by = ""Todd Casey""","select tv_channel.country from TV_Channel   except select tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.written_by = ""Todd Casey"""
"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.series_name, tv_channel.country FROM cartoon JOIN tv_channel ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang');","SELECT series_name, Country FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by IN ('Ben Jones', 'Michael Chang') );","SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN (""Ben Jones"", ""Michael Chang"")","SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'","SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Michael Chang'))","select tv_channel.series_name, tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = ""Ben Jones"" intersect select tv_channel.series_name, tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = ""Michael Chang""","select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = ""Ben Jones"" intersect select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = ""Michael Chang""","select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = ""Ben Jones""   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = ""Michael Chang"""
"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('Ben Jones', 'Michael Chang');","SELECT c.series_name, c.Country FROM TV_Channel c JOIN Cartoon ct ON c.id = ct.Channel WHERE ct.Directed_by IN ('Ben Jones', 'Michael Chang')","SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = ""Ben Jones"" INTERSECT SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = ""Michael Chang""","SELECT T1.series_name, T1.Country  FROM TV_Channel AS T1  WHERE T1.id IN (     SELECT T2.id      FROM TV_Channel AS T2      JOIN Cartoon AS T3 ON T2.id = T3.Channel      WHERE T3.Directed_by = 'Ben Jones'  ) AND T1.id IN (     SELECT T4.id      FROM TV_Channel AS T4      JOIN Cartoon AS T5 ON T4.id = T5.Channel      WHERE T5.Directed_by = 'Michael Chang' )","SELECT series_name, Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') AND id IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Michael Chang')","select tv_channel.series_name, tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = ""Ben Jones"" intersect select tv_channel.series_name, tv_channel.country from cartoon join tv_channel on cartoon.channel = tv_channel.id where cartoon.directed_by = ""Michael Chang""","select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = ""Ben Jones"" intersect select t1.series_name, t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = ""Michael Chang""","select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = ""Ben Jones""   intersect select tv_channel.series_name , tv_channel.country from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = ""Michael Chang"""
"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language <> 'English';","SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';","SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != ""English""","SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'","SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';","select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'","select pixel_aspect_ratio_par, country from tv_channel where language!= ""English""","select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != ""English"""
"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.language <> 'English';","SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';","SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'","SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'","SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'","select pixel_aspect_ratio_par, country from tv_channel where language!= 'English'","select pixel_aspect_ratio_par, country from tv_channel where language!= ""English""","select tv_channel.pixel_aspect_ratio_par , tv_channel.country from TV_Channel where  tv_channel.language != ""English"""
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT tv_channel.id FROM tv_channel WHERE country IN ( SELECT country FROM tv_channel GROUP BY country HAVING COUNT(DISTINCT id) > 2 ),SELECT id FROM TV_Channel WHERE Country IN (   SELECT Country   FROM TV_Channel   GROUP BY Country   HAVING COUNT(*) > 2 );,SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2,SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING count(*) > 2),SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2),select id from tv_channel where country > 2,select id from tv_channel where country = 2 group by country having count(*) > 2,select tv_channel.id from TV_Channel  group by tv_channel.country having  count(*) > 2
SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT tv_channel.id FROM tv_channel GROUP BY tv_channel.id HAVING COUNT(*) > 2;,SELECT channel FROM TV_series GROUP BY channel HAVING COUNT(*) > 2,SELECT Channel FROM TV_Channel GROUP BY Channel HAVING count(*) > 2;,SELECT T1.id FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel GROUP BY T1.id HAVING count(*) > 2,SELECT COUNT(id) FROM TV_Channel GROUP BY id HAVING COUNT(id) > 2,select id from tv_channel group by id having count(*) > 2,select id from tv_channel group by id having count(*) > 2,select tv_channel.id from TV_Channel  group by tv_channel.id having  count(*) > 2
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = ""Ben Jones"" )",SELECT c.id FROM TV_Channel c WHERE c.id NOT IN (   SELECT t.Channel   FROM Cartoon t   WHERE t.Directed_by = 'Ben Jones' );,SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'),SELECT id FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones'),SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;,"select id from tv_channel except select channel from cartoon where directed_by = ""Ben Jones""","select id from tv_channel except select t1.id from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = ""Ben Jones""","select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = ""Ben Jones"""
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' );,SELECT c.id FROM TV_Channel c WHERE c.id NOT IN (   SELECT t.Channel   FROM Cartoon t   WHERE t.Directed_by = 'Ben Jones' );,SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'),SELECT id FROM TV_Channel WHERE id NOT IN (SELECT T1.id FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Directed_by  =  'Ben Jones'),SELECT TV_Channel.id FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL,"select id from tv_channel except select channel from cartoon where directed_by = ""Ben Jones""","select id from tv_channel except select t1.id from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = ""Ben Jones""","select tv_channel.id from TV_Channel   except select cartoon.channel from Cartoon where  cartoon.directed_by = ""Ben Jones"""
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (SELECT DISTINCT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones');,SELECT Package_Option FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' );,"SELECT ""Package_Option"" FROM ""TV_Channel"" WHERE ""id"" NOT IN (SELECT ""Channel"" FROM ""Cartoon"" WHERE ""Directed_by"" = 'Ben Jones')",SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'),SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');,"select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = ""Ben Jones""","select package_option from tv_channel except select t1.package_option from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = ""Ben Jones""","select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = ""Ben Jones"""
SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id NOT IN (SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones'),SELECT Package_Option FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' );,SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'),SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'),SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones'),"select package_option from tv_channel except select tv_channel.package_option from tv_channel join cartoon on tv_channel.id = cartoon.channel where cartoon.directed_by = ""Ben Jones""","select package_option from tv_channel except select t1.package_option from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = ""Ben Jones""","select tv_channel.package_option from TV_Channel   except select tv_channel.package_option from Cartoon join TV_Channel on Cartoon.Channel = TV_Channel.id where  cartoon.directed_by = ""Ben Jones"""
SELECT count(*) FROM poker_player,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(*) FROM poker_player;,SELECT COUNT(*) FROM poker_player;,SELECT count(*) FROM poker_player,SELECT COUNT(*) FROM poker_player,SELECT COUNT(Poker_Player_ID) FROM poker_player,select count(*) from poker_player,select count(*) from poker_player,select count(*) from poker_player
SELECT count(*) FROM poker_player,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(*) FROM poker_player;,SELECT COUNT(*) FROM poker_player;,SELECT count(*) FROM poker_player,SELECT COUNT(*) FROM poker_player,SELECT COUNT(Poker_Player_ID) FROM poker_player;,select count(*) from poker_player,select count(*) from poker_player,select count(*) from poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT earnings FROM poker_player ORDER BY earnings DESC;,SELECT Earnings FROM poker_player ORDER BY Earnings DESC;,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,select earnings from poker_player order by earnings desc,select earnings from poker_player order by earnings desc,select poker_player.earnings from poker_player   order by poker_player.earnings desc
SELECT Earnings FROM poker_player ORDER BY Earnings DESC,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT earnings FROM poker_player ORDER BY earnings DESC;,SELECT Earnings FROM poker_player ORDER BY Earnings DESC;,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,select earnings from poker_player order by earnings desc,select earnings from poker_player order by earnings desc,select poker_player.earnings from poker_player   order by poker_player.earnings desc
"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
","SELECT final_table_made, best_finish FROM poker_player;","SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player;","SELECT Final_Table_Made , Best_Finish FROM poker_player","SELECT Final_Table_Made, Best_Finish FROM poker_player","SELECT Final_Table_Made, Best_Finish FROM poker_player","select final_table_made, best_finish from poker_player","select final_table_made, best_finish from poker_player","select poker_player.final_table_made , poker_player.best_finish from poker_player"
"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
","SELECT final_table_made, best_finish FROM poker_player;","SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player;","SELECT Final_Table_Made , Best_Finish FROM poker_player","SELECT Final_Table_Made, Best_Finish FROM poker_player","SELECT Final_Table_Made, Best_Finish FROM poker_player","select final_table_made, best_finish from poker_player","select final_table_made, best_finish from poker_player","select poker_player.final_table_made , poker_player.best_finish from poker_player"
SELECT avg(Earnings) FROM poker_player,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT AVG(earnings) FROM poker_player;,SELECT AVG(Earnings) AS avg_earnings FROM poker_player;,SELECT avg(Earnings) FROM poker_player,SELECT AVG(Earnings) FROM poker_player,SELECT AVG(Earnings) FROM poker_player,select avg(earnings) from poker_player,select avg(earnings) from poker_player,select avg(poker_player.earnings) from poker_player
SELECT avg(Earnings) FROM poker_player,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT avg(earnings) FROM poker_player;,SELECT AVG(Earnings) AS average_earnings FROM poker_player;,SELECT avg(Earnings) FROM poker_player,SELECT AVG(Earnings) FROM poker_player,SELECT AVG(Earnings) FROM poker_player,select avg(earnings) from poker_player,select avg(earnings) from poker_player,select avg(poker_player.earnings) from poker_player
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT money_rank FROM poker_player WHERE earnings = ( SELECT MAX(earnings) FROM poker_player ) LIMIT 1;,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;,SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,select money_rank from poker_player order by earnings desc limit 1,select money_rank from poker_player order by earnings desc limit 1,select poker_player.money_rank from poker_player   order by poker_player.earnings desc limit 1
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT money_rank FROM poker_player ORDER BY earnings DESC LIMIT 1;,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,select money_rank from poker_player order by earnings desc limit 1,select money_rank from poker_player order by earnings desc limit 1,select poker_player.money_rank from poker_player   order by poker_player.earnings desc limit 1
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;,SELECT MAX(Final_Table_Made)  FROM poker_player WHERE Earnings < 200000;,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000,SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000,SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;,select max(final_table_made) from poker_player where earnings < 200000,select max(final_table_made) from poker_player where earnings < 200000,select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000
SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000;,SELECT MAX(Final_Table_Made)  FROM poker_player WHERE Earnings < 200000;,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000,SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000,SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;,select max(final_table_made) from poker_player where earnings < 200000,select max(final_table_made) from poker_player where earnings < 200000,select max(poker_player.final_table_made) from poker_player where  poker_player.earnings < 200000
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;,SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID;,SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID,SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID,select people.name from poker_player join people on poker_player.people_id = people.people_id,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id,select people.name from poker_player join people on poker_player.People_ID = people.People_ID
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id;,SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID;,SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID,SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID,select people.name from poker_player join people on poker_player.people_id = people.people_id,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id,select people.name from poker_player join people on poker_player.People_ID = people.People_ID
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT people.name FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE poker_player.earnings > 300000,SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;,SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000,SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE poker_player.Earnings > 300000;,select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.earnings > 300000,select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.name FROM poker_player pp JOIN people p ON pp.people_id = p.people_id WHERE pp.earnings > 300000;,SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;,SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000,SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE Earnings > 300000;,select people.name from poker_player join people on poker_player.people_id = people.people_id where poker_player.earnings > 300000,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.earnings > 300000,select people.name from poker_player join people on poker_player.People_ID = people.People_ID where  poker_player.earnings > 300000
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY final_table_made ASC;,SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;,SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC,SELECT Names FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Final_Table_Made ASC,select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.final_table_made asc,select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.final_table_made ASC;,"SELECT p.Name, pp.Final_Table_Made FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;",SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made ASC,SELECT Names FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Final_Table_Made ASC;,select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.final_table_made asc,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id group by t1.people_id order by count(*) asc,select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.final_table_made asc
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT people.birth_date FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings LIMIT 1;,SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;,SELECT P2.Birth_Date FROM poker_player AS P1 JOIN people AS P2 ON P1.People_ID = P2.People_ID ORDER BY P1.Earnings ASC LIMIT 1,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings = (SELECT min(Earnings) FROM poker_player),SELECT Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings ASC LIMIT 1,select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings limit 1,select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings limit 1,select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT people.birth_date FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings LIMIT 1;,SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;,SELECT T2.Birth_Date FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings ASC LIMIT 1,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings LIMIT 1,SELECT Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings ASC LIMIT 1,select people.birth_date from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings limit 1,select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings limit 1,select people.birth_date from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings asc limit 1
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.height DESC LIMIT 1;,SELECT p.Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY pe.Height DESC LIMIT 1;,SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1,SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT max(Height) FROM people),SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1,select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1,select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t1.height desc limit 1,select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT poker_player.money_rank FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY people.height DESC LIMIT 1;,SELECT p.Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY pe.Height DESC LIMIT 1;,SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1,SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height = (SELECT max(Height) FROM people),SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Height DESC LIMIT 1,select poker_player.money_rank from poker_player join people on poker_player.people_id = people.people_id order by people.height desc limit 1,select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t1.height desc limit 1,select poker_player.money_rank from poker_player join people on poker_player.People_ID = people.People_ID   order by people.height desc limit 1
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT AVG(earnings) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;,SELECT AVG(Earnings) AS avg_earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE p.Height > 200;,SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200,SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200,SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200,select avg(poker_player.earnings) from poker_player join people on poker_player.people_id = people.people_id where people.height > 200,select avg(earnings) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200,select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200
SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT AVG(earnings) FROM poker_player INNER JOIN people ON poker_player.people_id = people.people_id WHERE people.height > 200;,SELECT AVG(Earnings) AS avg_earnings FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200;,SELECT avg(Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200,SELECT avg(T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200,SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;,select avg(poker_player.earnings) from poker_player join people on poker_player.people_id = people.people_id where people.height > 200,select avg(earnings) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200,select avg(poker_player.earnings) from poker_player join people on poker_player.People_ID = people.People_ID where  people.height > 200
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC;,SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;,SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC,select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings desc,select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT people.name FROM poker_player JOIN people ON poker_player.people_id = people.people_id ORDER BY poker_player.earnings DESC;,SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;,SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,SELECT people.Name FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC,select people.name from poker_player join people on poker_player.people_id = people.people_id order by poker_player.earnings desc,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings desc,select people.name from poker_player join people on poker_player.People_ID = people.People_ID   order by poker_player.earnings desc
"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
","SELECT nationality, COUNT(*) as count FROM people GROUP BY nationality;","SELECT Nationality, COUNT(*) AS num_people FROM people GROUP BY Nationality;","SELECT Nationality , count(*) FROM people GROUP BY Nationality","SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality","SELECT NATIONALITY, COUNT(*) AS NumberOfPeople FROM people GROUP BY NATIONALITY","select nationality, count(*) from people group by nationality","select nationality, count(*) from people group by nationality","select people.nationality , count(*) from people  group by people.nationality"
"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
","SELECT nationality, COUNT(*) FROM people GROUP BY nationality;","SELECT Nationality, COUNT(*) AS num_people FROM people GROUP BY Nationality;","SELECT Nationality , count(*) FROM people GROUP BY Nationality","SELECT count(*) ,  Nationality FROM people GROUP BY Nationality","SELECT COUNT(People_ID), Nationality FROM people GROUP BY Nationality","select nationality, count(*) from people group by nationality","select nationality, count(*) from people group by nationality","select people.nationality , count(*) from people  group by people.nationality"
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1,"SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1",select nationality from people group by nationality order by count(*) desc limit 1,select nationality from people group by nationality order by count(*) desc limit 1,select people.nationality from people  group by people.nationality  order by count(*) desc limit 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,SELECT Nationality FROM people GROUP BY Nationality ORDER BY count(*) DESC LIMIT 1,"SELECT Nationality, COUNT(*) AS count FROM people GROUP BY Nationality ORDER BY count DESC LIMIT 1",select nationality from people group by nationality order by count(*) desc limit 1,select nationality from people group by nationality order by count(*) desc limit 1,select people.nationality from people  group by people.nationality  order by count(*) desc limit 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2,SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) > 1,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2,select nationality from people group by nationality having count(*) >= 2,select nationality from people group by nationality having count(*) >= 2,select people.nationality from people  group by people.nationality having  count(*) >= 2
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2,SELECT Nationality FROM people GROUP BY Nationality HAVING count(*) >= 2,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2,select nationality from people group by nationality having count(*) >= 2,select nationality from people group by nationality having count(*) >= 2,select people.nationality from people  group by people.nationality having  count(*) >= 2
"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
","SELECT name, birth_date FROM people ORDER BY name ASC","SELECT Name, Birth_Date FROM people ORDER BY Name ASC;","SELECT Name, Birth_Date FROM people ORDER BY Name ASC","SELECT Name, Birth_Date FROM people ORDER BY Name ASC","SELECT Name, Birth_Date FROM people ORDER BY Name ASC","select name, birth_date from people order by name asc","select name, birth_date from people order by name asc","select people.name , people.birth_date from people   order by people.name asc"
"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
","SELECT people.name, people.birth_date FROM people ORDER BY people.name ASC;","SELECT Name, Birth_Date FROM people ORDER BY Name;","SELECT Name, Birth_Date FROM people ORDER BY Name","SELECT Name, Birth_Date FROM people ORDER BY Name","SELECT Name, Birth_Date FROM people ORDER BY Name ASC","select name, birth_date from people order by name","select name, birth_date from people order by name asc","select people.name , people.birth_date from people   order by people.name asc"
"SELECT Name FROM people WHERE Nationality != ""Russia""",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
","SELECT name FROM people WHERE nationality != ""Russia"";",SELECT Name FROM people WHERE Nationality != 'Russia';,"SELECT Name FROM people WHERE Nationality != ""Russia""",SELECT Name FROM people WHERE Nationality != 'Russia',SELECT Name FROM people WHERE Nationality != 'Russia';,"select name from people where nationality!= ""Russia""",select name from people where nationality!= 'Russia',"select people.name from people where  people.nationality != ""Russia"""
"SELECT Name FROM people WHERE Nationality != ""Russia""",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT name FROM people WHERE nationality <> 'Russia';,SELECT Name FROM people WHERE Nationality != 'Russia';,SELECT Name FROM people WHERE Nationality != 'Russia',SELECT Name FROM people WHERE Nationality != 'Russia',SELECT Name FROM people WHERE Nationality != 'Russia';,"select name from people where nationality!= ""Russia""",select name from people where nationality!= 'Russia',"select people.name from people where  people.nationality != ""Russia"""
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT people.name FROM people WHERE people.people_id NOT IN ( SELECT poker_player.people_id FROM poker_player ),SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Poker_Player_ID IS NULL;,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),SELECT people.Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL,select name from people where people_id not in (select people_id from poker_player),select name from people where people_id not in (select people_id from poker_player),select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT people.name FROM people LEFT JOIN poker_player ON poker_player.people_id = people.people_id WHERE poker_player.people_id IS NULL;,SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Poker_Player_ID IS NULL;,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),SELECT people.Name FROM people LEFT JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Poker_Player_ID IS NULL,select name from people where people_id not in (select people_id from poker_player),select name from people where people_id not in (select people_id from poker_player),select people.name from people   except select people.name from poker_player join people on poker_player.People_ID = people.People_ID
SELECT count(DISTINCT Nationality) FROM people,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(DISTINCT nationality) FROM people;,SELECT COUNT(DISTINCT Nationality) FROM people;,SELECT count(DISTINCT Nationality) FROM people,SELECT COUNT(DISTINCT Nationality) FROM people,SELECT COUNT(DISTINCT Nationality) FROM people,select count(distinct nationality) from people,select count(distinct nationality) from people,select count( distinct people.nationality) from people
SELECT count(DISTINCT Nationality) FROM people,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(DISTINCT nationality) FROM people;,SELECT COUNT(DISTINCT Nationality) FROM people;,SELECT count(DISTINCT Nationality) FROM people,SELECT COUNT(DISTINCT Nationality) FROM people,SELECT COUNT(DISTINCT Nationality) FROM people;,select count(distinct nationality) from people,select count(distinct nationality) from people,select count( distinct people.nationality) from people
SELECT count(*) FROM area_code_state,voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT COUNT(DISTINCT state) FROM area_code_state;,SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;,SELECT count(DISTINCT state) FROM AREA_CODE_STATE,SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE,SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE,select count(distinct state) from area_code_state,select count(distinct state) from area_code_state,select count(*) from AREA_CODE_STATE
"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;","SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;","SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC","SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC","SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC","select contestant_number, contestant_name from contestants order by contestant_name desc","select contestant_number, contestant_name from contestants order by contestant_name desc","select contestants.contestant_number , contestants.contestant_name from CONTESTANTS   order by contestants.contestant_name desc"
"SELECT vote_id ,  phone_number ,  state FROM votes",voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT vote_id, phone_number, state FROM votes;","SELECT vote_id, phone_number, state FROM VOTES;","SELECT vote_id , phone_number , state FROM VOTES","SELECT vote_id, phone_number, state FROM VOTES","SELECT vote_id, phone_number, state FROM VOTES","select vote_id, phone_number, state from votes","select vote_id, phone_number, state from votes","select votes.vote_id , votes.phone_number , votes.state from VOTES"
"SELECT max(area_code) ,  min(area_code) FROM area_code_state",voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT MAX(area_code), MIN(area_code) FROM area_code_state;","SELECT MIN(area_code) AS min_area_code, MAX(area_code) AS max_area_code FROM AREA_CODE_STATE;","SELECT max(area_code) , min(area_code) FROM AREA_CODE_STATE","SELECT max(area_code), min(area_code) FROM AREA_CODE_STATE","SELECT MAX(area_code) AS MaxAreaCode, MIN(area_code) AS MinAreaCode FROM AREA_CODE_STATE","select max(area_code), min(area_code) from area_code_state","select max(area_code), min(area_code) from area_code_state","select max(area_code_state.area_code) , min(area_code_state.area_code) from AREA_CODE_STATE"
SELECT max(created) FROM votes WHERE state  =  'CA',voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT MAX(created) FROM votes WHERE state = 'CA';,SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA';,SELECT max(created) FROM VOTES WHERE state = 'CA',SELECT MAX(created) FROM VOTES WHERE state = 'CA',SELECT MAX(created) FROM VOTES WHERE state = 'CA',"select max(created) from votes where state = ""CA""","select created from votes where state = ""CA"" order by created desc limit 1","select votes.created from VOTES where  votes.state = ""CA""   order by votes.created desc limit 1"
SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway',voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway';,SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';,SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway',SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway',SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway',"select contestant_name from contestants where contestant_name!= ""Jessie Alloway""",select contestant_name from contestants where contestant_name!= 'Jessie Alloway',"select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name != ""Jessie Alloway"""
"SELECT DISTINCT state ,  created FROM votes",voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT DISTINCT state, created FROM votes;","SELECT DISTINCT state, created FROM VOTES;","SELECT DISTINCT state, created FROM VOTES","SELECT DISTINCT state, created FROM VOTES","SELECT DISTINCT state, created FROM VOTES","select distinct state, created from votes","select distinct state, created from votes","select distinct votes.state , votes.created from VOTES"
"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN ( SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2 );","SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;","SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(*) >= 2","SELECT T2.contestant_number, T2.contestant_name  FROM CONTESTANTS AS T2  WHERE T2.contestant_number IN (     SELECT T1.contestant_number      FROM VOTES AS T1      GROUP BY T1.contestant_number      HAVING count(*) >= 2 )","SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (   SELECT contestant_number   FROM VOTES   GROUP BY contestant_number   HAVING COUNT(vote_id) >= 2 )","select votes.contestant_number, contestants.contestant_name from votes join contestants on votes.contestant_number = contestants.contestant_number group by votes.contestant_number having count(*) >= 2","select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number having count(*) >= 2","select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number having  count(*) >= 2"
"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT contestants.contestant_number, contestants.contestant_name FROM contestants INNER JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name ORDER BY COUNT(votes.vote_id) ASC LIMIT 1;","SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1;","SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1","SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING count(*) = (     SELECT min(count_votes)     FROM (         SELECT count(*) AS count_votes         FROM VOTES         GROUP BY contestant_number     ) AS subquery )","SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number ORDER BY COUNT(*) ASC LIMIT 1)","select contestants.contestant_number, contestants.contestant_name from contestants join votes on contestants.contestant_number = votes.contestant_number group by contestants.contestant_number order by count(*) limit 1","select t1.contestant_number, t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number = t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1","select contestants.contestant_number , contestants.contestant_name from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number  group by votes.contestant_number  order by count(*) asc limit 1"
SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA',voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA';,"SELECT COUNT(*)  FROM VOTES WHERE state IN ('NY', 'CA');","SELECT count(*) FROM VOTES WHERE state IN ('NY', 'CA')",SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA',"SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')","select count(*) from votes where state = ""NY"" or state = ""CA""","select count(*) from votes where state = ""NY"" or state = ""CA""","select count(*) from VOTES where  votes.state = ""NY"" or votes.state = ""CA"""
SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ),voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT COUNT(*) FROM contestants LEFT JOIN votes ON contestants.contestant_number = votes.contestant_number WHERE votes.contestant_number IS NULL;,"SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c LEFT JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.contestant_number IS NULL;",SELECT count(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES),SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES),SELECT COUNT(contestant_number) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT DISTINCT contestant_number FROM VOTES),select count(*) from contestants where contestant_number not in (select contestant_number from votes),select count(*) from contestants where contestant_number not in (select contestant_number from votes),select count(*) from CONTESTANTS where  contestants.contestant_number not in (select VOTES.contestant_number from VOTES  )
SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1,voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT area_code_state.area_code FROM votes JOIN area_code_state ON votes.state = area_code_state.state GROUP BY area_code_state.area_code ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT SUBSTRING(phone_number, 1, 3) AS area_code FROM VOTES GROUP BY SUBSTRING(phone_number, 1, 3) ORDER BY COUNT(*) DESC LIMIT 1;",SELECT area_code FROM AREA_CODE_STATE JOIN VOTES ON AREA_CODE_STATE.state = VOTES.state GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1;,SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(T2.vote_id) DESC LIMIT 1,SELECT MAX(v.state) FROM VOTES v JOIN AREA_CODE_STATE acs ON v.state = acs.state GROUP BY acs.area_code ORDER BY COUNT(v.vote_id) DESC LIMIT 1,select area_code_state.area_code from area_code_state join votes on area_code_state.area_code = votes.state,select t1.area_code from area_code_state as t1 join votes as t2 on t1.area_code = t2.area_code,select area_code_state.area_code from VOTES join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state  group by area_code_state.area_code  order by count(*) desc limit 1
"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT votes.created, votes.state, votes.phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestants.contestant_name = 'Tabatha Gehling';","SELECT created, state, phone_number FROM VOTES v JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name = 'Tabatha Gehling';","SELECT T3.created, T3.state, T3.phone_number FROM CONTESTANTS AS T1 JOIN VOTES AS T3 ON T1.contestant_number = T3.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'","SELECT T1.created, T1.state, T1.phone_number FROM VOTES AS T1 JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling'","SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE contestant_name = 'Tabatha Gehling'","select votes.created, votes.state, votes.phone_number from contestants join votes on contestants.contestant_number = votes.contestant_number where contestants.contestant_name = ""Tabatha Gehling""","select t1.created, t1.state, t1.phone_number from votes as t1 join contestants as t2 on t1.contestant_number = t2.contestant_number where t2.contestant_name = 'Tabatha Gehling'","select votes.created , votes.state , votes.phone_number from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number where  contestants.contestant_name = ""Tabatha Gehling"""
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss',voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT area_code FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name = 'Tabatha Gehling' INTERSECT SELECT area_code FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name = 'Kelly Clauss';,"SELECT ac.area_code FROM VOTES v JOIN AREA_CODE_STATE ac ON v.state = ac.state JOIN CONTESTANTS c ON v.contestant_number = c.contestant_number WHERE c.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY ac.area_code HAVING COUNT(DISTINCT c.contestant_name) = 2;",SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state = T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name = 'Kelly Clauss',SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number  =  T3.contestant_number WHERE T3.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.state  =  T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number  =  T3.contestant_number WHERE T3.contestant_name  =  'Kelly Clauss',"SELECT area_code FROM VOTES v1 JOIN VOTES v2 ON SUBSTR(v1.phone_number, 1, 3) = SUBSTR(v2.phone_number, 1, 3) WHERE v1.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling') AND v2.contestant_number IN (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss') GROUP BY SUBSTR(v1.phone_number, 1, 3)","select area_code_state.area_code from area_code_state join votes on area_code_state.area_code = votes.state join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = ""Tabatha Gehling"" intersect select area_code_state.area_code from area_code_state join votes on area_code_state.area_code = votes.state join contestants on votes.contestant_number = contestants.contestant_number where contestants.contestant_name = ""Kelly Clauss""",select t3.area_code from votes as t1 join contestants as t2 on t1.contestant_number = t2.contestant_number join area_code_state as t3 on t1.vote_id = t3.area_code where t2.contestant_name = 'Tabatha Gehling' intersect select t3.area_code from votes as t1 join contestants as t2 on t1.contestant_number = t2.contestant_number join area_code_state as t3 on t1.vote_id = t3.area_code where t2.contestant_name = 'Kelly Clauss',"select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = ""Tabatha Gehling""   intersect select area_code_state.area_code from VOTES join CONTESTANTS on VOTES.contestant_number = CONTESTANTS.contestant_number join AREA_CODE_STATE on VOTES.state = AREA_CODE_STATE.state where  contestants.contestant_name = ""Kelly Clauss"""
"select contestant_name from contestants where contestant_name like ""%al%""",voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%';,SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';,"SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE ""%Al%""",SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%',SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';,"select contestants.contestant_name from contestants join area_code_state on contestants.contestant_number = area_code_state.area_code where area_code_state.state = ""AL""",select contestant_name from contestants where contestant_name like '%al%',"select contestants.contestant_name from CONTESTANTS where  contestants.contestant_name like ""%Al%"""
SELECT Name FROM country WHERE IndepYear  >  1950,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT name FROM country WHERE indepyear > 1950;,SELECT Name  FROM country WHERE IndepYear > 1950;,SELECT Name FROM country WHERE IndepYear > 1950,SELECT Name FROM country WHERE IndepYear > 1950,SELECT Name FROM country WHERE IndepYear > 1950,select name from country where indepyear > 1950,select name from country where indepyear > 1950,select country.name from country where  country.indepyear > 1950
SELECT Name FROM country WHERE IndepYear  >  1950,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT name FROM country WHERE indepyear > 1950;,SELECT Name  FROM country WHERE IndepYear > 1950;,SELECT Name FROM country WHERE IndepYear > 1950,SELECT Name FROM country WHERE IndepYear > 1950,SELECT Name FROM country WHERE IndepYear > 1950,select name from country where indepyear > 1950,select name from country where indepyear > 1950,select country.name from country where  country.indepyear > 1950
"SELECT count(*) FROM country WHERE GovernmentForm  =  ""Republic""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';,SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';,"SELECT count(*) FROM country WHERE GovernmentForm LIKE ""%Republic%""",SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%',SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%',"select count(*) from country where governmentform = ""Republic""",select count(*) from country where governmentform = 'Republic',"select count(*) from country where  country.governmentform = ""Republic"""
"SELECT count(*) FROM country WHERE GovernmentForm  =  ""Republic""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM country WHERE governmentform = 'Republic';,SELECT COUNT(*)  FROM country WHERE GovernmentForm LIKE '%Republic%';,"SELECT count(*) FROM country WHERE GovernmentForm LIKE ""%Republic%""",SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%republic%',SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%',"select count(*) from country where governmentform = ""Republic""",select count(*) from country where governmentform = 'Republic',"select count(*) from country where  country.governmentform = ""Republic"""
"SELECT sum(SurfaceArea) FROM country WHERE Region  =  ""Caribbean""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean';,SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';,SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean',SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean',SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean',select sum(surfacearea) from country where region = 'Caribbean',select sum(surfacearea) from country where region = 'Caribbean',"select sum(country.surfacearea) from country where  country.region = ""Caribbean"""
"SELECT sum(SurfaceArea) FROM country WHERE Region  =  ""Caribbean""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SUM(surfacearea) FROM country WHERE continent = 'Caribbean';,SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';,SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean',SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean',SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';,"select sum(surfacearea) from country where continent = ""Carribean""",select sum(surfacearea) from country where region = 'Caribbean',"select sum(country.surfacearea) from country where  country.region = ""Carribean""  group by country.region"
"SELECT Continent FROM country WHERE Name  =  ""Anguilla""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT continent FROM country WHERE name = 'Anguilla';,SELECT Continent FROM country WHERE Name = 'Anguilla';,"SELECT Continent FROM country WHERE Name = ""Anguilla"";",SELECT Continent FROM country WHERE Name = 'Anguilla',SELECT Continent FROM country WHERE Name = 'Anguilla';,select continent from country where name = 'Anguilla',"select continent from country where name = ""Anguilla""","select country.continent from country where  country.name = ""Anguilla"""
"SELECT Continent FROM country WHERE Name  =  ""Anguilla""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT continent FROM country WHERE name = 'Anguilla';,SELECT Continent FROM country WHERE Name = 'Anguilla';,"SELECT T1.Continent FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = ""Anguilla"";",SELECT Continent FROM country WHERE Name = 'Anguilla',SELECT Continent FROM country WHERE Name = 'Anguilla';,select continent from country where name = 'Anguilla',"select continent from country where localname = ""Anguilla""","select country.continent from country where  country.name = ""Anguilla"""
"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  ""Kabul""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.region FROM city INNER JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';,SELECT c.Region  FROM city ci JOIN country c ON ci.CountryCode = c.Code WHERE ci.Name = 'Kabul';,"SELECT Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = ""Kabul""",SELECT T2.Region FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul',SELECT District FROM city WHERE Name = 'Kabul';,select country.region from city join country on city.countrycode = country.code where city.name = 'Kabul',select t1.region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = 'Kabul',"select country.region from city join country on city.CountryCode = country.Code where  city.name = ""Kabul"""
"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  ""Kabul""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.region FROM city JOIN country ON city.countrycode = country.code WHERE city.name = 'Kabul';,SELECT c.Region  FROM city ci JOIN country c ON ci.CountryCode = c.Code WHERE ci.Name = 'Kabul';,"SELECT District FROM city WHERE Name = ""Kabul"";",SELECT T1.Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul',"SELECT City.Name, Country.Region FROM City JOIN Country ON City.CountryCode = Country.Code WHERE City.Name = 'Kabul';",select country.region from city join country on city.countrycode = country.code where city.name = 'Kabul',select distinct t1.region from country as t1 join city as t2 on t1.code = t2.countrycode where t2.name = 'Kabul',"select country.region from city join country on city.CountryCode = country.Code where  city.name = ""Kabul"""
"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba"" ORDER BY Percentage DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT language FROM countrylanguage WHERE countrycode = 'ABW' ORDER BY percentage DESC LIMIT 1;,SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;,SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') ORDER BY Percentage DESC LIMIT 1;,SELECT Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba' ORDER BY T1.Percentage DESC LIMIT 1,SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1,"select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = ""Aruba"" group by countrylanguage.language order by count(*) desc limit 1","select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = ""Aruba"" group by t2.language order by count(*) desc limit 1","select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = ""Aruba""   order by countrylanguage.percentage desc limit 1"
"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba"" ORDER BY Percentage DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT language FROM countrylanguage WHERE countrycode = 'ABW' AND isofficial = 'T' AND percentage = (SELECT MAX(percentage) FROM countrylanguage WHERE countrycode = 'ABW');,SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE LocalName = 'Aruba') ORDER BY Percentage DESC LIMIT 1;,SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND IsOfficial = 'T',SELECT Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba' ORDER BY T1.Percentage DESC LIMIT 1,SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE LocalName = 'Aruba') AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE LocalName = 'Aruba')),"select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = ""Aruba"" group by countrylanguage.language order by count(*) desc limit 1","select language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = ""Aruba"" group by t2.language order by count(*) desc limit 1","select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = ""Aruba""  group by countrylanguage.language  order by count(*) desc limit 1"
"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  ""Brazil""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT population, lifeexpectancy FROM country WHERE name = 'Brazil';","SELECT Population, LifeExpectancy  FROM country WHERE Name = 'Brazil';","SELECT Population , LifeExpectancy FROM country WHERE Name = 'Brazil'","SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'","SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'","select population, lifeexpectancy from country where name = 'Brazil'","select population, lifeexpectancy from country where name = ""Brazil""","select country.population , country.lifeexpectancy from country where  country.name = ""Brazil"""
"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  ""Brazil""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.population, country.lifeexpectancy FROM country WHERE country.name = 'Brazil';","SELECT Name, Population, LifeExpectancy  FROM country WHERE Name = 'Brazil';","SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'","SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'","SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'","select population, lifeexpectancy from country where name = 'Brazil'","select population, lifeexpectancy from country where name = ""Brazil""","select country.population , country.lifeexpectancy from country where  country.name = ""Brazil"""
"SELECT Population ,  Region FROM country WHERE Name  =  ""Angola""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT region, population FROM country WHERE name = 'Angola';","SELECT Region, Population  FROM country WHERE Name = 'Angola';","SELECT Region, Population FROM country WHERE Name = ""Angola""","SELECT Region, Population FROM country WHERE Name = 'Angola'","SELECT Region, Population FROM country WHERE Name = 'Angola';","select region, population from country where name = 'Angola'","select region, population from country where name = ""Angola""","select country.region , country.population from country where  country.name = ""Angola"""
"SELECT Population ,  Region FROM country WHERE Name  =  ""Angola""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT region, population FROM country WHERE name = 'Angola';","SELECT Region, Population  FROM country WHERE Name = 'Angola';","SELECT Region, Population FROM country WHERE Name = ""Angola"";","SELECT Region, Population FROM country WHERE Name = 'Angola'","SELECT Region, Population FROM country WHERE Name = 'Angola';","select region, population from country where name = 'Angola'","select region, population from country where name = ""Angola""","select country.region , country.population from country where  country.name = ""Angola"""
"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  ""Central Africa""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa';,SELECT AVG(LifeExpectancy) AS avg_life_expectancy FROM country WHERE Region = 'Central Africa';,SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa',SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa',SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa',"select avg(lifeexpectancy) from country where region = ""Central Africa""",select avg(lifeexpectancy) from country where region = 'Central Africa',"select avg(country.lifeexpectancy) from country where  country.region = ""Central Africa"""
"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  ""Central Africa""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT AVG(lifeexpectancy) FROM country WHERE region = ""Central Africa"";",SELECT LifeExpectancy FROM country WHERE Region = 'Central Africa';,SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa',SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa',SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';,"select avg(lifeexpectancy) from country where region = ""Central Africa""",select avg(lifeexpectancy) from country where region = 'Central Africa',"select avg(country.lifeexpectancy) from country where  country.region = ""Central Africa"""
"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;,SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;,SELECT `Name` FROM `country` WHERE `Continent` = 'Asia' ORDER BY `LifeExpectancy` ASC LIMIT 1;,SELECT Name FROM country WHERE LifeExpectancy = (SELECT min(LifeExpectancy) FROM country WHERE Continent = 'Asia') AND Continent = 'Asia',SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1,select name from country where continent = 'Asia' order by lifeexpectancy limit 1,select name from country where continent = 'Asia' order by lifeexpectancy limit 1,"select country.name from country where  country.continent = ""Asia""   order by country.lifeexpectancy asc limit 1"
"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.name FROM country WHERE continent = 'Asia' ORDER BY lifeexpectancy ASC LIMIT 1;,SELECT Name  FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;,SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1,SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1,SELECT LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;,select name from country where continent = 'Asia' order by lifeexpectancy limit 1,select name from country where continent = 'Asia' order by lifeexpectancy limit 1,"select country.name from country where  country.continent = ""Asia""   order by country.lifeexpectancy asc limit 1"
"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  ""Asia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT SUM(population), MAX(gnp) FROM country WHERE continent = ""Asia"";","SELECT SUM(Population) AS total_population, MAX(GNP) AS max_gnp FROM country WHERE Continent = 'Asia';","SELECT sum(Population) , max(GNP) FROM country WHERE Continent = 'Asia'","SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia'","SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaximumGNP FROM country WHERE Continent = 'Asia'","select sum(population), max(gnp) from country where continent = 'Asia'","select sum(population), max(gnp) from country where continent = 'Asia'","select sum(country.population) , max(country.gnp) from country where  country.continent = ""Asia"""
"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  ""Asia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT SUM(population) AS total_population, MAX(gnp) AS largest_gnp FROM country WHERE continent = 'Asia';","SELECT SUM(c.Population) AS total_population, MAX(c.GNP) AS largest_gnp FROM country c WHERE c.Continent = 'Asia';","SELECT sum(Population) , max(GNP) FROM country WHERE Continent = 'Asia'","SELECT sum(Population), max(GNP) FROM country WHERE Continent = 'Asia'","SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia';","select gnp, population from country where continent = 'Asia' order by gnp desc limit 1","select population, gnp from country where continent = 'Asia' order by gnp desc limit 1","select country.population , country.gnp from country where  country.continent = ""Asia""   order by country.gnp desc limit 1"
"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  ""Africa"" AND GovernmentForm  =  ""Republic""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';,SELECT AVG(LifeExpectancy) AS avg_life_expectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';,SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%',SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%',SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%',select avg(lifeexpectancy) from country where continent = 'Africa' and governmentform = 'Republic',select avg(lifeexpectancy) from country where continent = 'Africa' and governmentform = 'Republic',"select avg(country.lifeexpectancy) from country where  country.governmentform = ""Republic"" and country.continent = ""Africa"""
"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  ""Africa"" AND GovernmentForm  =  ""Republic""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT AVG(lifeexpectancy) FROM country WHERE continent = ""Africa"" AND governmentform = ""Republic"";",SELECT AVG(LifeExpectancy)  FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';,SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%',SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%',SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm LIKE '%Republic%';,select avg(lifeexpectancy) from country where continent = 'Africa' and governmentform = 'Republic',select avg(lifeexpectancy) from country where continent = 'Africa' and governmentform = 'Republic',"select avg(country.lifeexpectancy) from country where  country.continent = ""Africa"" and country.governmentform = ""Republic"""
"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  ""Asia"" OR Continent  =  ""Europe""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe');","SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');",SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe',SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe',"SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe');",select sum(surfacearea) from country where continent = 'Asia' intersect select sum(surfacearea) from country where continent = 'Europe',select sum(surfacearea) from country where continent = 'Asia' union select sum(surfacearea) from country where continent = 'Europe',"select sum(country.surfacearea) from country where  country.continent = ""Asia"" or country.continent = ""Europe"""
"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  ""Asia"" OR Continent  =  ""Europe""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT SUM(surfacearea) FROM country WHERE continent = ""Asia"" OR continent = ""Europe"";","SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');",SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe',SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe',"SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",select sum(surfacearea) from country where continent = 'Asia' or continent = 'Europe',select sum(surfacearea) from country where continent = 'Asia' or continent = 'Europe',"select sum(country.surfacearea) from country where  country.continent = ""Asia"" or country.continent = ""Europe"""
"SELECT sum(Population) FROM city WHERE District  =  ""Gelderland""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SUM(population) FROM city WHERE district = 'Gelderland';,SELECT Population  FROM city WHERE District = 'Gelderland';,"SELECT SUM(Population) FROM city WHERE District = ""Gelderland""",SELECT sum(Population) FROM city WHERE District = 'Gelderland',SELECT SUM(Population) FROM city WHERE District = 'Gelderland';,select population from city where district = 'Gelderland',"select count(*) from city where district = ""Gelderland""","select sum(city.population) from city where  city.district = ""Gelderland"""
"SELECT sum(Population) FROM city WHERE District  =  ""Gelderland""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SUM(population) FROM city WHERE district = 'Gelderland';,SELECT SUM(Population) FROM city WHERE District = 'Gelderland';,SELECT sum(Population) FROM city WHERE District = 'Gelderland',SELECT sum(Population) FROM city WHERE District = 'Gelderland',SELECT SUM(Population) FROM city WHERE District = 'Gelderland';,select sum(population) from city where district = 'Gelderland',select sum(population) from city where district = 'Gelderland',"select sum(city.population) from city where  city.district = ""Gelderland"""
"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  ""US Territory""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT AVG(gnp), SUM(population) FROM country WHERE governmentform = 'US Territory';","SELECT AVG(GNP) AS avg_gnp, SUM(Population) AS total_population FROM country WHERE GovernmentForm = 'Commonwealth of the US';","SELECT avg(GNP) , sum(Population) FROM country WHERE GovernmentForm = ""US territory""","SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory'","SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory'","select avg(gnp), sum(population) from country where governmentform = 'US Territory'","select avg(gnp), sum(population) from country where governmentform = 'United States Territory'","select avg(country.gnp) , sum(country.population) from country where  country.governmentform = ""US Territory"""
"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  ""US Territory""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT AVG(GNP) AS mean_gnp, SUM(population) AS total_population FROM country WHERE governmentform = 'US Territory';","SELECT AVG(GNP) AS mean_gnp, SUM(Population) AS total_population FROM country WHERE GovernmentForm LIKE '%US%';","SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm = ""US Territory""","SELECT AVG(GNP), SUM(Population) FROM country WHERE Code2 = 'US'","SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'Territory of the US';","select avg(gnp), sum(population) from country where governmentform = 'US Territory'","select avg(gnp), sum(population) from country where governmentform = 'United States Territory'","select avg(country.gnp) , sum(country.population) from country where  country.governmentform = ""US Territory"""
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT language) AS unique_languages FROM countrylanguage;,SELECT COUNT(DISTINCT Language) FROM countrylanguage;,SELECT count(DISTINCT Language) FROM countrylanguage,SELECT COUNT(DISTINCT Language) FROM countrylanguage,SELECT COUNT(DISTINCT Language) FROM countrylanguage,select count(distinct language) from countrylanguage,select count(distinct language) from countrylanguage,select count( distinct countrylanguage.language) from countrylanguage
SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT language) FROM countrylanguage;,SELECT COUNT(DISTINCT Language) FROM countrylanguage;,SELECT count(DISTINCT Language) FROM countrylanguage,SELECT COUNT(DISTINCT Language) FROM countrylanguage,SELECT COUNT(DISTINCT Language) FROM countrylanguage,select count(distinct language) from countrylanguage,select count(distinct language) from countrylanguage,select count( distinct countrylanguage.language) from countrylanguage
"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  ""Africa""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = ""Africa"";",SELECT COUNT(DISTINCT GovernmentForm)  FROM country WHERE Continent = 'Africa';,SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa',SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa',SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';,select count(distinct governmentform) from country where continent = 'Africa',select count(distinct governmentform) from country where continent = 'Africa',"select count( distinct country.governmentform) from country where  country.continent = ""Africa"""
"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  ""Africa""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT governmentform) FROM country WHERE continent = 'Africa';,SELECT COUNT(DISTINCT GovernmentForm)  FROM country WHERE Continent = 'Africa';,SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa',SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa',SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';,select count(distinct governmentform) from country where continent = 'Africa',select count(distinct governmentform) from country where continent = 'Africa',"select count( distinct country.governmentform) from country where  country.continent = ""Africa"""
"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'ABW';,SELECT COUNT(*)  FROM countrylanguage WHERE CountryCode = 'ABW';,SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba'),SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba',SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ABW',"select count(countrylanguage.language) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = ""Aruba""","select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = ""Aruba""","select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = ""Aruba"""
"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = (SELECT code FROM country WHERE name = 'Aruba');,SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');,SELECT count(*) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba'),SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Name  =  'Aruba',SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = 'ARE',"select count(countrylanguage.language) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = ""Aruba""","select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = ""Aruba""","select count( distinct countrylanguage.language) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = ""Aruba"""
"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Afghanistan"" AND IsOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';,SELECT COUNT(*)  FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';,"SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = ""Afghanistan"") AND IsOfficial = 'T'",SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.Name = 'Afghanistan',SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T',select count(distinct countrylanguage.language) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Afghanistan',select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Afghanistan' and t2.isofficial = 'Yes',"select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = ""Afghanistan"""
"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Afghanistan"" AND IsOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';,SELECT COUNT(*)  FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';,"SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = ""Afghanistan"") AND IsOfficial = 'T'",SELECT count(Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.Name = 'Afghanistan',SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';,select count(distinct countrylanguage.language) from country join countrylanguage on country.code = countrylanguage.countrycode where country.name = 'Afghanistan',select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Afghanistan' and t2.isofficial = 'Yes',"select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.name = ""Afghanistan"""
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;,SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1;,SELECT T2.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.CountryCode ORDER BY COUNT(*) DESC LIMIT 1;,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(T2.Language) DESC LIMIT 1,"SELECT COUNT(Language) AS LanguageCount, CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY LanguageCount DESC LIMIT 1;",select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count(*) desc limit 1,select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t2.countrycode order by count(*) desc limit 1,select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name  order by count(*) desc limit 1
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.name FROM country WHERE country.code = ( SELECT countrycode FROM countrylanguage GROUP BY countrycode ORDER BY COUNT(DISTINCT language) DESC LIMIT 1 );,SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY COUNT(cl.Language) DESC LIMIT 1;,SELECT T2.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1,"SELECT COUNT(countrylanguage.Language) AS LanguageCount, country.Name FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY countrylanguage.CountryCode ORDER BY LanguageCount DESC LIMIT 1",select country.name from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name order by count(*) desc limit 1,select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t2.countrycode order by count(*) desc limit 1,select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name  order by count(*) desc limit 1
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.continent FROM countrylanguage INNER JOIN country ON countrylanguage.countrycode = country.code GROUP BY country.continent ORDER BY COUNT(DISTINCT countrylanguage.language) DESC LIMIT 1;,SELECT Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1;,SELECT T2.Continent FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY COUNT(DISTINCT T1.Language) DESC LIMIT 1,"SELECT T1.Continent, COUNT(DISTINCT T2.Language) AS num_languages FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY num_languages DESC LIMIT 1","SELECT COUNT(DISTINCT countrylanguage.Language) AS LanguageCount, country.Continent FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Continent ORDER BY LanguageCount DESC LIMIT 1;",select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by count(*) desc limit 1,select t1.continent from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.continent order by count(*) desc limit 1,select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT continent FROM country GROUP BY continent ORDER BY COUNT(DISTINCT code) DESC LIMIT 1;,"SELECT Continent, COUNT(*) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY Continent ORDER BY num_languages DESC LIMIT 1;",SELECT Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(DISTINCT T2.Language) DESC LIMIT 1,"SELECT COUNT(DISTINCT countrylanguage.Language) AS LanguageCount, country.Continent FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY country.Continent ORDER BY LanguageCount DESC LIMIT 1;",select country.continent from country join countrylanguage on country.code = countrylanguage.countrycode group by country.continent order by count(*) desc limit 1,select t1.continent from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.continent order by count(*) desc limit 1,select country.continent from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.continent  order by count(*) desc limit 1
"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT COUNT(DISTINCT country.name) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch') GROUP BY country.code HAVING COUNT(DISTINCT countrylanguage.language) = 2;","SELECT COUNT(*)  FROM (   SELECT CountryCode   FROM countrylanguage   WHERE Language IN ('English', 'Dutch')   GROUP BY CountryCode   HAVING COUNT(DISTINCT Language) = 2 ) t;",SELECT count(*) FROM country AS C WHERE EXISTS (SELECT 1 FROM countrylanguage AS L1 WHERE L1.CountryCode = C.Code AND L1.Language = 'English') AND EXISTS (SELECT 1 FROM countrylanguage AS L2 WHERE L2.CountryCode = C.Code AND L2.Language = 'Dutch'),SELECT COUNT(*) FROM (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch') AS T1,SELECT COUNT(DISTINCT cl1.CountryCode) FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch';,select count(*) from countrylanguage where language = 'English' intersect select count(*) from countrylanguage where language = 'Dutch',"select count(*) from countrylanguage where language = ""English"" intersect select count(*) from countrylanguage where language = ""Dutch""","select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = ""English""   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = ""Dutch""   )"
"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch');","SELECT COUNT(*)  FROM countrylanguage WHERE Language IN ('English', 'Dutch')","SELECT count(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch')",SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch',"SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch');","select count(*) from countrylanguage where language = ""English"" intersect select count(*) from countrylanguage where language = ""Dutch""","select count(*) from countrylanguage where language = ""English"" intersect select count(*) from countrylanguage where language = ""Dutch""","select count(*) from countrylanguage where  countrylanguage.countrycode in (select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = ""English""   intersect select countrylanguage.CountryCode from countrylanguage where  countrylanguage.language = ""Dutch""   )"
"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' INTERSECT SELECT country.name FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'French';,SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French';,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French',SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French',SELECT country.Name FROM country JOIN countrylanguage AS cl1 ON country.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage AS cl2 ON country.Code = cl2.CountryCode AND cl2.Language = 'French' WHERE cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T',select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French',select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French',"select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""English""   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""French"""
"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT name FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'English' ) AND code IN ( SELECT countrycode FROM countrylanguage WHERE language = 'French' );,SELECT c.Name FROM country c  JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French',SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French',SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French',SELECT Country.Name FROM country JOIN countrylanguage AS English ON country.Code = English.CountryCode AND English.Language = 'English' JOIN countrylanguage AS French ON country.Code = French.CountryCode AND French.Language = 'French' WHERE English.IsOfficial = 'T' AND French.IsOfficial = 'T';,select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French',select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'French',"select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""English""   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""French"""
"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French"" AND T2.IsOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name FROM country WHERE country.code IN (SELECT countrycode FROM countrylanguage WHERE language = ""English"" AND isofficial = 1) AND country.code IN (SELECT countrycode FROM countrylanguage WHERE language = ""French"" AND isofficial = 1);",SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T'   JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T',SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T',SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T',SELECT Country.Name FROM country JOIN countrylanguage AS English ON country.Code = English.CountryCode AND English.Language = 'English' AND English.IsOfficial = 'T' JOIN countrylanguage AS French ON country.Code = French.CountryCode AND French.Language = 'French' AND French.IsOfficial = 'T',select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French',"select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""English"" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""French""","select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""English""   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""French"""
"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French"" AND T2.IsOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name FROM country WHERE EXISTS ( SELECT 1 FROM countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.language IN ('English', 'French') AND countrylanguage.isofficial = 'T' GROUP BY countrylanguage.countrycode HAVING COUNT(*) = 2 );",SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T'   JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T',SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' AND T2.IsOfficial = 'T',SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T',SELECT DISTINCT c.Name  FROM country AS c  JOIN countrylanguage AS cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T'  JOIN countrylanguage AS cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';,select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' intersect select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'French',"select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""English"" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""French""","select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""English""   intersect select country.name from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""French"""
"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Chinese""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT c.continent) FROM countrylanguage cl JOIN country c ON cl.countrycode = c.code WHERE cl.language = 'Chinese';,SELECT COUNT(DISTINCT Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese';,SELECT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese',SELECT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese',SELECT COUNT(DISTINCT Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'Chinese',select count(distinct country.continent) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Chinese',"select count(distinct t1.continent) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""Chinese""","select count( distinct country.continent) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""Chinese"""
"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Chinese""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT continent) FROM country WHERE code IN (SELECT countrycode FROM countrylanguage WHERE language = 'Chinese');,SELECT COUNT(DISTINCT c.Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese';,SELECT count(DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese',SELECT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese',SELECT COUNT(DISTINCT Continent) FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language = 'Chinese',select count(distinct country.continent) from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Chinese',"select count(*) from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t1.language = ""Chinese""","select count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""Chinese"""
"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" OR T2.Language  =  ""Dutch""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT region FROM country WHERE code IN ( SELECT countrycode FROM countrylanguage WHERE language IN ('English', 'Dutch') )","SELECT Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch')","SELECT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language IN ('English', 'Dutch'))",SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' OR T2.Language = 'Dutch',"SELECT DISTINCT country.Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language IN ('English', 'Dutch')",select distinct country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch',"select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""English"" or t2.language = ""Dutch""","select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""English"" or countrylanguage.language = ""Dutch"""
"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" OR T2.Language  =  ""Dutch""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.region FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('Dutch', 'English');","SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English')","SELECT Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('Dutch', 'English') GROUP BY T1.Region;",SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' OR T2.Language = 'English',"SELECT DISTINCT Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE Language IN ('Dutch', 'English')",select country.region from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'Dutch' or countrylanguage.language = 'English',"select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""Dutch"" or t2.language = ""English""","select country.region from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language = ""Dutch"" or countrylanguage.language = ""English"""
"select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  ""english"" and isofficial  =  ""t"" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  ""dutch"" and isofficial  =  ""t""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.name FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE countrylanguage.isofficial = 1 AND (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch');,"SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'","SELECT T2.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language IN ('English', 'Dutch') AND T1.IsOfficial = 'T'",SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = 'English' OR T2.Language = 'Dutch') AND T2.IsOfficial = 'T',SELECT Country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T',select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch',"select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""English"" or t2.language = ""Dutch""","select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = ""English"" or countrylanguage.language = ""Dutch"""
"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND IsOfficial  =  ""T"" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"" AND IsOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 1;","SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'","SELECT `Name` FROM `country` WHERE `Code` IN (SELECT `CountryCode` FROM `countrylanguage` WHERE `Language` IN ('English', 'Dutch') AND `IsOfficial` = 'T')",SELECT DISTINCT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE (T2.Language = 'English' OR T2.Language = 'Dutch') AND T2.IsOfficial = 'T',SELECT Country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T',select country.name from country join countrylanguage on country.code = countrylanguage.countrycode where countrylanguage.language = 'English' or countrylanguage.language = 'Dutch',"select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""English"" or t2.language = ""Dutch""","select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = ""English"" or countrylanguage.language = ""Dutch"""
"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) ORDER BY percentage DESC LIMIT 1;,SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' ORDER BY cl.Percentage DESC LIMIT 1;,SELECT Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY count(*) DESC LIMIT 1,SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.Language ORDER BY sum(T1.Percentage) DESC LIMIT 1,SELECT MAX(Percentage) AS MostPopularPercentage FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia',select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' group by countrylanguage.language order by count(*) desc limit 1,select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' group by t2.language order by count(*) desc limit 1,"select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = ""Asia""  group by countrylanguage.language  order by count(*) desc limit 1"
"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) GROUP BY language ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1,SELECT Language FROM countrylanguage AS t1 JOIN country AS t2 ON t1.CountryCode = t2.Code WHERE t2.Continent = 'Asia' GROUP BY t1.Language ORDER BY count(*) DESC LIMIT 1,SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.Language ORDER BY count(*) DESC LIMIT 1,"SELECT COUNT(countrylanguage.CountryCode) AS NumberOfCountries, countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY countrylanguage.Language ORDER BY NumberOfCountries DESC LIMIT 1",select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' group by countrylanguage.language order by count(*) desc limit 1,select language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' group by language order by count(*) desc limit 1,"select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.continent = ""Asia""  group by countrylanguage.language  order by count(*) desc limit 1"
"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  ""Republic"" GROUP BY T2.Language HAVING COUNT(*)  =  1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT countrylanguage.language FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code WHERE country.governmentform = 'Republic' GROUP BY countrylanguage.language HAVING COUNT(DISTINCT country.code) = 1;,SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;,SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic') GROUP BY Language HAVING COUNT(*) = 1,SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING count(*) = 1,SELECT language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm LIKE '%Republic%' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1,"select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = ""Republic"" group by countrylanguage.language having count(*) = 1","select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = ""Republic"" group by t2.language having count(*) = 1","select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = ""Republic""  group by countrylanguage.language having  count(*) = 1"
"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  ""Republic"" GROUP BY T2.Language HAVING COUNT(*)  =  1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT language FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE governmentform = 'Republic' ) GROUP BY language HAVING COUNT(DISTINCT countrycode) = 1;,SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;,SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic') GROUP BY Language HAVING COUNT(*) = 1,SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm LIKE '%republic%' GROUP BY T1.Language HAVING count(*) = 1,SELECT Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1 AND MAX(c.GovernmentForm) = 'Republic',"select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.governmentform = ""Republic"" group by countrylanguage.language having count(*) = 1","select distinct t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = ""Republic""","select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.governmentform = ""Republic""  group by countrylanguage.language having  count(*) = 1"
"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  ""English"" ORDER BY T1.Population DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = ""English"" ORDER BY city.population DESC LIMIT 1;","SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;",SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1;,SELECT Name FROM city WHERE Population = (SELECT max(Population) FROM city WHERE CountryCode IN (SELECT T2.Code FROM country AS T2 JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.Language = 'English')),SELECT MAX(Population) FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English';,select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1,"select t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode where t2.language = ""English"" group by t1.name order by count(*) desc limit 1","select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = ""English""   order by city.population desc limit 1"
"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  ""English"" ORDER BY T1.Population DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT city.name FROM city INNER JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1;,"SELECT c.Name, c.Population FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'Creole English' ORDER BY c.Population DESC LIMIT 1",SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1;,SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1,SELECT MAX(city.Population) AS MostPopulousPopulation FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;,select city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where countrylanguage.language = 'English' order by city.population desc limit 1,"select t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode where t2.language = ""English"" group by t1.name order by count(*) desc limit 1","select city.population from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  countrylanguage.language = ""English""   order by city.population desc limit 1"
"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT name, population, lifeexpectancy FROM country WHERE continent = ""Asia"" ORDER BY surfacearea DESC LIMIT 1;","SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;","SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;","SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1","SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1","select name, population, lifeexpectancy from country where continent = 'Asia' and surfacearea = (select max(surfacearea) from country)","select name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1","select country.name , country.population , country.lifeexpectancy from country where  country.continent = ""Asia""   order by country.surfacearea desc limit 1"
"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE continent = 'Asia' ORDER BY surfacearea DESC LIMIT 1;","SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;","SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;","SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1","SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1","select name, population, lifeexpectancy from country where continent = 'Asia' and surfacearea = (select max(surfacearea) from country where continent = 'Asia')","select name, population, lifeexpectancy from country where continent = 'Asia' order by surfacearea desc limit 1","select country.name , country.population , country.lifeexpectancy from country where  country.continent = ""Asia""   order by country.surfacearea desc limit 1"
"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = ""English"" AND isofficial = ""T"")",SELECT AVG(LifeExpectancy)  FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial = 'F';,SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'),SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'),SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'),select avg(lifeexpectancy) from country where countrycode not in (select countrycode from countrylanguage where language =,select avg(lifeexpectancy) from country where code not in (select countrycode from countrylanguage where language = 'English'),"select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != ""English"""
"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT AVG(lifeexpectancy) FROM country WHERE code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English' AND isofficial = 'T');,SELECT AVG(LifeExpectancy) AS MeanLifeExpectancy FROM country c WHERE NOT EXISTS (   SELECT 1    FROM countrylanguage cl   WHERE cl.CountryCode = c.Code     AND cl.Language = 'English'     AND cl.IsOfficial = 'T' );,SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'),SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'),SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'),select avg(lifeexpectancy) from country where countrycode not in (select countrycode from countrylanguage where language =,select avg(lifeexpectancy) from country where code not in (select countrycode from countrylanguage where language = 'English'),"select avg(country.lifeexpectancy) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != ""English"""
"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT SUM(country.population) FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = ""English"");",SELECT SUM(c.Population) AS total_population FROM country c WHERE c.Code NOT IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English' );,SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'),SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'),SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'),select sum(population) from country where code not in (select countrycode from countrylanguage where language = 'English'),"select sum(t1.population) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language!= ""English""","select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != ""English"""
"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT SUM(country.population) FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = ""English"");",SELECT SUM(c.Population) AS non_english_speaking_population FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.Language IS NULL;,SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'),SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'),SELECT SUM(c.Population) AS NonEnglishSpeakingPopulation FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language <> 'English' OR cl.Language IS NULL;,select sum(population) from country where code not in (select countrycode from countrylanguage where language = 'English'),"select count(*) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language!= ""English""","select sum(country.population) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != ""English"""
"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  ""Beatrix"" AND T2.IsOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 1;,SELECT Language  FROM countrylanguage WHERE CountryCode = (   SELECT Code   FROM country   WHERE HeadOfState = 'Beatrix' )  AND IsOfficial = 'T';,SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix'),SELECT Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.HeadOfState = 'Beatrix',SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix') AND IsOfficial = 'T',"select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = ""Beatrix""","select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = ""Beatrix""","select countrylanguage.language from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = ""Beatrix"""
"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  ""Beatrix"" AND T2.IsOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.headofstate = 'Beatrix' AND countrylanguage.isofficial = 'T';,SELECT Language FROM countrylanguage WHERE CountryCode = (   SELECT Code   FROM country   WHERE HeadOfState = 'Beatrix' ) AND IsOfficial = 'T';,SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix'),SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.IsOfficial = 'T' AND T2.HeadOfState = 'Beatrix',SELECT Language FROM countrylanguage JOIN country ON country.Code = countrylanguage.CountryCode WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T',"select countrylanguage.language from country join countrylanguage on country.code = countrylanguage.countrycode where country.headofstate = ""Beatrix""","select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.headofstate = ""Beatrix""","select countrylanguage.isofficial from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.headofstate = ""Beatrix"""
"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT language) FROM countrylanguage WHERE countrycode IN (,SELECT COUNT(DISTINCT Language)  FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.IsOfficial = 'T' AND c.IndepYear < 1930;,SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930 AND IsOfficial = 'T'),SELECT count(DISTINCT Language) FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930),SELECT COUNT(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE IsOfficial = 'T' AND IndepYear < 1930,select count(distinct countrylanguage.language) from country join countrylanguage on country.code = countrylanguage.countrycode where country.indepyear < 1930,select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.indepyear < 1930,select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930
"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT language) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE indepyear < 1930 AND isofficial = 1;,SELECT COUNT(DISTINCT Language)  FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';,SELECT count(DISTINCT Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930 AND T1.IsOfficial = 'T',SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T1.IndepYear < 1930,SELECT COUNT(DISTINCT Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.IndepYear < 1930 AND countrylanguage.IsOfficial = 'T',select count(distinct countrylanguage.language) from country join countrylanguage on country.code = countrylanguage.countrycode where country.indepyear < 1930,select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.indepyear < 1930,select count( distinct countrylanguage.isofficial) from countrylanguage join country on countrylanguage.CountryCode = country.Code where  country.indepyear < 1930
"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  ""Europe"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT code, name, surfacearea FROM country WHERE surfacearea > ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' )",SELECT Name FROM country WHERE SurfaceArea > (   SELECT MAX(SurfaceArea)   FROM country   WHERE Continent = 'Europe' );,SELECT `Name` FROM `country` WHERE `SurfaceArea` > (SELECT max(`SurfaceArea`) FROM `country` WHERE `Continent` = 'Europe'),SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe'),SELECT SurfaceArea FROM country WHERE Continent = 'Europe' AND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe'),select name from country where surfacearea > (select max(surfacearea) from country where continent = 'Europe'),select name from country where surfacearea > (select max(surfacearea) from country where continent = 'Europe'),"select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = ""Europe""  )"
"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  ""Europe"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.name FROM country WHERE country.surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe'),SELECT c.Name FROM country c WHERE c.SurfaceArea > (   SELECT MAX(c2.SurfaceArea)   FROM country c2   WHERE c2.Continent = 'Europe' );,SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe'),SELECT Name FROM country WHERE SurfaceArea > (SELECT max(SurfaceArea) FROM country WHERE Continent = 'Europe'),SELECT SurfaceArea FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe'),select name from country where surfacearea > (select max(surfacearea) from country where continent = 'Europe'),select name from country where surfacearea > (select max(surfacearea) from country where continent = 'Europe'),"select country.name from country where  country.surfacearea > (select max(country.surfacearea) from country where  country.continent = ""Europe""  )"
"SELECT Name FROM country WHERE Continent  =  ""Africa""  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  ""Asia"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name FROM country WHERE country.continent = ""Africa"" AND country.population < (SELECT MIN(population) FROM country WHERE continent = ""Asia"");",SELECT c.Name FROM country c WHERE c.Continent = 'Africa'   AND c.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');,SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND c1.Population < ANY (SELECT c2.Population FROM country AS c2 WHERE c2.Continent = 'Asia'),SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia'),"SELECT MIN(a.Population) AS MinAsianPopulation, c.Name FROM country AS a JOIN country AS c ON c.Continent = 'Africa' AND c.Population < a.Population WHERE a.Continent = 'Asia' GROUP BY c.Name HAVING MinAsianPopulation IS NOT NULL",select name from country where population < (select min(population) from country where continent = 'Asia') and continent = 'Africa',select name from country where continent = 'Africa' and population < (select min(population) from country where continent = 'Asia'),"select country.name from country where  country.population < (select max(country.population) from country where  country.continent = ""Africa""  )"
"SELECT Name FROM country WHERE Continent  =  ""Africa""  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  ""Asia"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT name FROM country WHERE continent = ""Africa"" AND population < (SELECT MIN(population) FROM country WHERE continent = ""Asia"")",SELECT c.Name FROM country c WHERE c.Continent = 'Africa'   AND c.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia'),SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Africa' AND T1.Population < ANY (SELECT T2.Population FROM country AS T2 WHERE T2.Continent = 'Asia'),SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT min(Population) FROM country WHERE Continent = 'Asia'),SELECT Population FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia'),select name from country where population < (select min(population) from country where continent = 'Africa'),select name from country where population < (select min(population) from country where continent = 'Asia'),"select country.name from country where  country.population < (select max(country.population) from country where  country.continent = ""Africa""  )"
"SELECT Name FROM country WHERE Continent  =  ""Asia""  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  ""Africa"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.name FROM country WHERE country.continent = 'Asia' AND country.population > ( SELECT MAX(population) FROM country WHERE continent = 'Africa' );,SELECT c.Name FROM country c WHERE c.Continent = 'Asia'   AND c.Population > (SELECT MAX(c2.Population)                        FROM country c2                        WHERE c2.Continent = 'Africa'),SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa'),SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa'),SELECT Population FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa'),select name from country where population > (select max(population) from country where continent = 'Africa') and continent = 'Asia',select name from country where population > (select max(population) from country where continent = 'Africa'),"select country.name from country where  country.population > (select max(country.population) from country where  country.continent = ""Africa""  )"
"SELECT Name FROM country WHERE Continent  =  ""Asia""  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  ""Africa"")",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name FROM country WHERE country.continent = ""Asia"" AND country.population > ( SELECT MAX(population) FROM country WHERE continent = ""Africa"" );",SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (   SELECT MAX(c2.Population)   FROM country c2   WHERE c2.Continent = 'Africa' );,SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa'),SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT max(Population) FROM country WHERE Continent = 'Africa'),SELECT MAX(a.Population) AS MaxAfricanPopulation FROM country a WHERE a.Continent = 'Africa';  SELECT c.Name FROM country c WHERE c.Continent = 'Asia' AND c.Population > (   SELECT MAX(a.Population)   FROM country a   WHERE a.Continent = 'Africa' );,select name from country where population > (select max(population) from country where continent = 'Africa') and continent = 'Asia',select name from country where population > (select max(population) from country where continent = 'Africa'),"select country.name from country where  country.population > (select max(country.population) from country where  country.continent = ""Africa""  )"
"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = 'English');,SELECT CountryCode FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' );,SELECT `Code` FROM `country` WHERE `Code` NOT IN (SELECT `CountryCode` FROM `countrylanguage` WHERE `Language` = 'English'),SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'),SELECT CountryCode FROM countrylanguage WHERE Language != 'English',select countrycode from countrylanguage where language!= 'English',"select countrycode from countrylanguage where language!= ""English""","select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != ""English"""
"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrylanguage.countrycode FROM countrylanguage WHERE countrylanguage.language = ""English"");",SELECT CountryCode FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' );,SELECT CountryCode FROM countrylanguage WHERE Language != 'English',SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English'),SELECT CountryCode FROM countrylanguage WHERE Language != 'English';,select countrycode from countrylanguage where language!= 'English',"select countrycode from countrylanguage where language!= ""English""","select country.code from countrylanguage join country on countrylanguage.CountryCode = country.Code where  countrylanguage.language != ""English"""
"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != ""English""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT DISTINCT countrycode FROM countrylanguage WHERE language <> ""English"";",SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English';,SELECT CountryCode FROM countrylanguage WHERE Language != 'English',SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English',SELECT CountryCode FROM countrylanguage WHERE Language != 'English';,select countrycode from countrylanguage where language!= 'English',select countrycode from countrylanguage where language!= 'English',"select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != ""English"""
"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != ""English""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT countrycode FROM countrylanguage WHERE language != ""English"";",SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English';,SELECT CountryCode FROM countrylanguage WHERE Language != 'English',SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English',SELECT CountryCode FROM countrylanguage WHERE Language != 'English';,select countrycode from countrylanguage where language!= 'English',"select countrycode from countrylanguage where language!= ""English""","select countrylanguage.countrycode from countrylanguage where  countrylanguage.language != ""English"""
"SELECT Code FROM country WHERE GovernmentForm != ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.code FROM country WHERE country.code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = ""English"") AND country.governmentform != ""Republic"";",SELECT c.Code FROM country c WHERE c.Code NOT IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English' ) AND c.GovernmentForm != 'Republic';,SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic',SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic',SELECT Country.Code FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.Language IS NULL AND country.GovernmentForm != 'Republic',"select code from country where countrylanguage.language!= ""English"" and country.governmentform!= ""Republik""",select code from country where governmentform!= 'Republic' or language!= 'English' or countrycode not in (select countrycode from countrylanguage where governmentform = 'Republic' or countrycode not in (select countrycode from countrylanguage where governmentform = 'Republic' or countrycode not in (select countrycode from countrylanguage where governmentform = 'Republic' or countrycode not in (select countrycode from countrylanguage where governmentform,"select country.code from country where  country.governmentform != ""Republic""   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = ""English"""
"SELECT Code FROM country WHERE GovernmentForm != ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT code FROM country WHERE governmentform != ""Republic"" AND code NOT IN (SELECT countrycode FROM countrylanguage WHERE language = ""English"");",SELECT Code FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' ) AND GovernmentForm NOT LIKE '%Republic%';,SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm NOT LIKE '%Republic%',SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic',SELECT Country.Code FROM Country LEFT JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE CountryLanguage.Language != 'English' OR CountryLanguage.Language IS NULL AND Country.GovernmentForm NOT LIKE '%Republic%';,select countrycode from countrylanguage where countrylanguage.language!= 'English' and country.governmentform!= 'Republic',select code from country where language!= 'English' and governmentform!= 'Republic of,"select country.code from country where  country.governmentform != ""Republic""   except select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = ""English"""
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON countrylanguage.countrycode = country.code WHERE country.continent = 'Europe' AND countrylanguage.language <> 'English' AND countrylanguage.isofficial = 'N';,SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Europe' AND        co.Code NOT IN (SELECT CountryCode                        FROM countrylanguage                        WHERE Language = 'English' AND IsOfficial = 'T'),SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND (countrylanguage.Language != 'English' OR countrylanguage.IsOfficial = 'F'),SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Europe' AND T2.Code NOT IN (SELECT T3.CountryCode FROM countrylanguage AS T3 WHERE T3.Language = 'English' AND T3.IsOfficial = 'T'),SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English' OR (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F');,select name from city where countrycode in (select countrycode from countrylanguage where language = 'English'),select name from city where countrycode in (select countrycode from countrylanguage where language = 'English'),"select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = ""Europe"" and countrylanguage.language != ""English"""
SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Europe' AND countrylanguage.language != 'English' AND countrylanguage.isofficial = 'F';,SELECT c.Name FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode AND cl.Language = 'English' AND cl.IsOfficial = 'T'   WHERE co.Continent = 'Europe' AND cl.CountryCode IS NULL,SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND (countrylanguage.Language != 'English' OR countrylanguage.IsOfficial = 'F'),SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code WHERE T2.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode  =  T2.Code JOIN countrylanguage AS T3 ON T2.Code  =  T3.CountryCode WHERE T2.Continent  =  'Europe' AND T3.Language  =  'English' AND T3.IsOfficial  =  'T'),SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode AND countrylanguage.Language = 'English' WHERE country.Continent = 'Europe' AND (countrylanguage.IsOfficial != 'T' OR countrylanguage.IsOfficial IS NULL),select name from city where countrycode not in (select countrycode from countrylanguage where language = 'English') and continent = 'Europe'). world_,select name from city where countrycode in (select countrycode from countrylanguage where language = 'English'),"select city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = ""Europe"" and countrylanguage.language != ""English"""
"select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  ""asia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 'T';,SELECT DISTINCT city.Name FROM city  JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia'    AND countrylanguage.Language = 'Chinese'   AND countrylanguage.IsOfficial = 'T';,SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T',SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T',SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T' GROUP BY city.Name;,select distinct city.name from city join countrylanguage on city.countrycode = countrylanguage.countrycode where country.continent = 'Asia' and countrylanguage.language = 'Chinese' is official. world_1,"select distinct t1.name from city as t1 join countrylanguage as t2 on t1.id = t2.countrycode where t2.language = ""Chinese"" and t2.isofficial = 'Yes'","select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = ""Asia"" and countrylanguage.language = ""Chinese"""
"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  ""Asia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT city.name FROM city JOIN country ON city.countrycode = country.code JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE country.continent = 'Asia' AND countrylanguage.language = 'Chinese' AND countrylanguage.isofficial = 1;,SELECT city.Name FROM city  JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T',SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T',SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.Language = 'Chinese' AND T3.IsOfficial = 'T',SELECT cities.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T',select distinct city.name from country join city on country.code = city.countrycode join countrylanguage on country.code = countrylanguage.countrycode where country.continent = 'Asia' and countrylanguage.language = 'Chinese',select distinct name from city where countrycode in (select countrycode from countrylanguage where language = 'Chinese'),"select distinct city.name from city join country on city.CountryCode = country.Code join countrylanguage on country.Code = countrylanguage.CountryCode where  country.continent = ""Asia"" and countrylanguage.language = ""Chinese"""
"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = (SELECT MIN(population) FROM country);","SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;","SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population LIMIT 1","SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1","SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1","select name, indepyear, surfacearea from country order by population asc limit 1","select name, indepyear, surfacearea from country order by population asc limit 1","select country.name , country.indepyear , country.surfacearea from country   order by country.population asc limit 1"
"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = ( SELECT MIN(population) FROM country )","SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);","SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population LIMIT 1","SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)","SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1","select name, indepyear, surfacearea from country order by population limit 1","select name, indepyear, surfacearea from country order by population asc limit 1","select country.name , country.indepyear , country.surfacearea from country   order by country.population asc limit 1"
"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT population, name, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);","SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;","SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","select population, name, headofstate from country order by surfacearea desc limit 1","select population, name, headofstate from country order by surfacearea desc limit 1","select country.population , country.name , country.headofstate from country   order by country.surfacearea desc limit 1"
"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT name, population, headofstate FROM country WHERE surfacearea = (SELECT MAX(surfacearea) FROM country);","SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;","SELECT Name , Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","select name, population, headofstate from country order by surfacearea desc limit 1","select name, population, headofstate from country order by surfacearea desc limit 1","select country.name , country.population , country.headofstate from country   order by country.surfacearea desc limit 1"
"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name, COUNT(countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING language_count >= 3;","SELECT c.Name, COUNT(cl.Language) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;","SELECT T1.Name, COUNT(T2.Language) AS NumberOfLanguages FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(T2.Language) >= 3","SELECT T1.Name, COUNT(T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(T2.Language) >= 3","SELECT country.Name, COUNT(countrylanguage.Language) AS NumberOfLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) >= 3","select country.name, count(*) from country join countrylanguage on country.code = countrylanguage.countrycode group by country.code having count(*) >= 3","select t1.name, count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.code having count(distinct t2.language) >= 3","select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) >= 3"
"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name, COUNT(countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING language_count > 2;","SELECT c.Name, COUNT(cl.Language) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2;","SELECT Country.Name, COUNT(CountryLanguage.Language) FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode GROUP BY Country.Name HAVING COUNT(CountryLanguage.Language) > 2;","SELECT T1.Name, COUNT(T2.Language)  FROM country AS T1  JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T1.Name  HAVING COUNT(T2.Language) > 2","SELECT COUNT(Language) AS NumberOfLanguages, CountryCode FROM countrylanguage GROUP BY CountryCode HAVING COUNT(Language) > 2;","select country.name, count(countrylanguage.language) from country join countrylanguage on country.code = countrylanguage.countrycode group by country.name having count(countrylanguage.language) > 2","select t1.name, count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.code having count(distinct t2.language) > 2","select country.name , count(*) from countrylanguage join country on countrylanguage.CountryCode = country.Code  group by country.name having  count(*) > 2"
"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT DISTRICT, COUNT(*) AS city_count FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;","SELECT District, COUNT(*) AS num_cities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;","SELECT District, count(*) FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District","SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District",SELECT AVG(Population) FROM city) AS avg_population GROUP BY District HAVING Population > avg_population;,"select count(*), district from city where population > (select avg(population) from city) group by district","select count(*), district from city where population > (select avg(population) from city) group by district","select count(*) , city.district from city where  city.population > (select avg(city.population) from city  )  group by city.district"
"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;","SELECT District, COUNT(*) AS NumCitiesAboveAvg FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;","SELECT count(*) , District FROM city WHERE Population > (SELECT avg(Population) FROM city) GROUP BY District","SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District","SELECT DISTRICT, COUNT(ID) AS Cities_Above_Average_Population FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;","select count(*), district from city where population > (select avg(population) from city) group by district","select count(*), district from city where population > (select avg(population) from city) group by district","select count(*) , city.district from city where  city.population > (select avg(city.population) from city  )  group by city.district"
"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;","SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation FROM country c GROUP BY c.GovernmentForm HAVING AVG(c.LifeExpectancy) > 72","SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72","SELECT GovernmentForm, sum(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) > 72) GROUP BY GovernmentForm","SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm","select governmentform, sum(population) from country group by governmentform having avg(lifeexpectancy) > 72","select governmentform, sum(population) from country group by governmentform having avg(lifeexpectancy) > 72","select country.governmentform , sum(country.population) from country  group by country.governmentform having  avg(country.lifeexpectancy) > 72"
"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.governmentform, SUM(country.population) AS total_population FROM country WHERE country.governmentform IN ( SELECT DISTINCT country.governmentform FROM country WHERE country.lifeexpectancy > 72 ) GROUP BY country.governmentform;","SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation FROM country c WHERE c.LifeExpectancy > 72 GROUP BY c.GovernmentForm;","SELECT GovernmentForm, SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72","SELECT GovernmentForm, SUM(Population) FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm","SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm","select governmentform, sum(population) from country group by governmentform having avg(lifeexpectancy) > 72","select governmentform, sum(population) from country group by governmentform having avg(lifeexpectancy) > 72","select country.governmentform , sum(country.population) from country  group by country.governmentform having  avg(country.lifeexpectancy) > 72"
"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country GROUP BY continent HAVING avg_life_expectancy < 72;","SELECT Continent, AVG(LifeExpectancy) AS avg_life_expectancy, SUM(Population) AS total_population FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;","SELECT avg(LifeExpectancy), sum(Population), Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72","SELECT avg(LifeExpectancy), sum(Population), Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72","SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation, Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72","select avg(lifeexpectancy), sum(population), continent from country where lifeexpectancy < 72 group by continent","select avg(lifeexpectancy), sum(population), continent from country group by continent having avg(lifeexpectancy) < 72","select avg(country.lifeexpectancy) , sum(country.population) , country.continent from country  group by country.continent having  avg(country.lifeexpectancy) < 72"
"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT continent, SUM(population) AS total_population, AVG(lifeexpectancy) AS average_life_expectancy FROM country WHERE continent IN ( SELECT continent FROM country GROUP BY continent HAVING AVG(lifeexpectancy) < 72 ) GROUP BY continent;","SELECT Continent, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;","SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72","SELECT Continent, SUM(Population), AVG(LifeExpectancy) FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72","SELECT CONTINENT, SUM(Population) AS TotalPopulation, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY CONTINENT HAVING AVG(LifeExpectancy) < 72","select continent, sum(population), avg(lifeexpectancy) from country group by continent having avg(lifeexpectancy) < 72","select continent, sum(population), avg(lifeexpectancy) from country group by continent having avg(lifeexpectancy) < 72","select country.continent , sum(country.population) , avg(country.lifeexpectancy) from country  group by country.continent having  avg(country.lifeexpectancy) < 72"
"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name, country.surfacearea FROM country ORDER BY country.surfacearea DESC LIMIT 5;","SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;","SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","select name, surfacearea from country order by surfacearea desc limit 5","select name, surfacearea from country order by surfacearea desc limit 5","select country.name , country.surfacearea from country   order by country.surfacearea desc limit 5"
"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5","SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;","SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","SELECT TOP 5 Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC","select name, surfacearea from country order by surfacearea desc limit 5","select name, surfacearea from country order by population desc limit 5","select country.name , country.surfacearea from country   order by country.population desc limit 5"
SELECT Name FROM country ORDER BY Population DESC LIMIT 3,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT name FROM country ORDER BY population DESC LIMIT 3;,SELECT Name FROM country ORDER BY Population DESC LIMIT 3;,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,SELECT Population FROM country ORDER BY Population DESC LIMIT 3,select name from country order by population desc limit 3,select name from country order by population desc limit 3,select country.name from country   order by country.population desc limit 3
SELECT Name FROM country ORDER BY Population DESC LIMIT 3,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT country.name FROM country ORDER BY population DESC LIMIT 3;,SELECT Name FROM country ORDER BY Population DESC LIMIT 3;,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,select name from country order by population desc limit 3,select name from country order by population desc limit 3,select country.name from country   order by country.population desc limit 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT name FROM country ORDER BY population ASC LIMIT 3;,SELECT Name FROM country ORDER BY Population ASC LIMIT 3;,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,SELECT Population FROM country ORDER BY Population ASC LIMIT 3,select name from country order by population asc limit 3,select name from country order by population asc limit 3,select country.name from country   order by country.population asc limit 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT name FROM country ORDER BY population LIMIT 3;,SELECT Name FROM country ORDER BY Population ASC LIMIT 3;,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,select name from country order by population asc limit 3,select name from country order by population asc limit 3,select country.name from country   order by country.population asc limit 3
"SELECT count(*) FROM country WHERE continent  =  ""Asia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM country WHERE continent = 'Asia';,SELECT COUNT(*) FROM country WHERE Continent = 'Asia';,SELECT count(*) FROM country WHERE Continent = 'Asia',SELECT COUNT(*) FROM country WHERE Continent = 'Asia',SELECT COUNT(*) FROM country WHERE Continent = 'Asia',select count(*) from country where continent = 'Asia',select count(*) from country where continent = 'Asia',"select count(*) from country where  country.continent = ""Asia"""
"SELECT count(*) FROM country WHERE continent  =  ""Asia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM country WHERE continent = 'Asia';,SELECT COUNT(*) FROM country WHERE Continent = 'Asia';,SELECT count(*) FROM country WHERE Continent = 'Asia',SELECT COUNT(*) FROM country WHERE Continent = 'Asia',SELECT COUNT(*) FROM country WHERE Continent = 'Asia',select count(*) from country where continent = 'Asia',select count(*) from country where continent = 'Asia',"select count(*) from country where  country.continent = ""Asia"""
"SELECT Name FROM country WHERE continent  =  ""Europe"" AND Population  =  ""80000""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT name FROM country WHERE continent = 'Europe' AND population = 80000;,SELECT Name  FROM country WHERE Continent = 'Europe' AND Population = 80000;,"SELECT Name FROM country WHERE Continent = ""Europe"" AND Population = 80000",SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000,SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000,select name from country where continent = 'Europe' and population = 80000,select name from country where continent = 'Europe' and population = 80000,"select country.name from country where  country.continent = ""Europe"" and country.population = 80000"
"SELECT Name FROM country WHERE continent  =  ""Europe"" AND Population  =  ""80000""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT name FROM country WHERE continent = ""Europe"" AND population = 80000;",SELECT Name  FROM country WHERE Continent = 'Europe' AND Population = 80000;,SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000,SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000,SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000,select name from country where continent = 'Europe' and population = 80000,select name from country where continent = 'Europe' and population = 80000,"select country.name from country where  country.continent = ""Europe"" and country.population = 80000"
"select sum(population) ,  avg(surfacearea) from country where continent  =  ""north america"" and surfacearea  >  3000",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = 'North America' AND surfacearea > 3000;","SELECT SUM(Population) AS total_population, AVG(SurfaceArea) AS avg_area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;","SELECT sum(Population) , avg(SurfaceArea) FROM country WHERE Continent = ""North America"" AND SurfaceArea > 3000","SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000","SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000","select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000","select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000","select avg(country.surfacearea) , sum(country.population) from country where  country.continent = ""North America"" and country.surfacearea > 3000"
"select sum(population) ,  avg(surfacearea) from country where continent  =  ""north america"" and surfacearea  >  3000",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = ""North America"" AND surfacearea > 3000;","SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AvgSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;","SELECT sum(Population) , avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000","SELECT SUM(Population), AVG(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000","SELECT SUM(Population) AS TotalPopulation, AVG(SurfaceArea) AS AverageSurfaceArea FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000","select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000","select sum(population), avg(surfacearea) from country where continent = 'North America' and surfacearea > 3000","select sum(country.population) , avg(country.surfacearea) from country where  country.continent = ""North America"" and country.surfacearea > 3000"
SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;,"SELECT Name, Population  FROM city WHERE Population BETWEEN 160000 AND 900000;",SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000,SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000,SELECT Population FROM city WHERE Population BETWEEN 160000 AND 900000;,select name from city where population between 160000 and 900000,select name from city where population between 160000 and 900000,select city.name from city where  city.population between 160000 and 900000
select name from city where population between 160000 and 900000,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT name FROM city WHERE population BETWEEN 160000 AND 900000;,SELECT Name  FROM city WHERE Population BETWEEN 160000 AND 900000;,SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000,SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000,SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;,select name from city where population between 160000 and 900000,select name from city where population between 160000 and 900000,select city.name from city where  city.population between 160000 and 900000
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;,SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1;,SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(*) DESC LIMIT 1;,SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(CountryCode) DESC LIMIT 1,"SELECT Language, COUNT(CountryCode) AS NumberOfCountries FROM countrylanguage GROUP BY Language ORDER BY NumberOfCountries DESC LIMIT 1;",select language from countrylanguage group by language order by count(*) desc limit 1,select language from countrylanguage group by language order by count(*) desc limit 1,select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1
SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT language FROM countrylanguage GROUP BY language ORDER BY COUNT(DISTINCT countrycode) DESC LIMIT 1;,SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1;,SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(*) DESC LIMIT 1,SELECT Language FROM countrylanguage GROUP BY Language ORDER BY count(CountryCode) DESC LIMIT 1,"SELECT COUNT(CountryCode) AS CountryCount, Language FROM countrylanguage GROUP BY Language ORDER BY CountryCount DESC LIMIT 1;",select language from countrylanguage group by language order by count(*) desc limit 1,select language from countrylanguage group by language order by count(*) desc limit 1,select countrylanguage.language from countrylanguage  group by countrylanguage.language  order by count(*) desc limit 1
"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.name, countrylanguage.language FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = ( SELECT MAX(percentage) FROM countrylanguage WHERE countrylanguage.countrycode = country.code ) GROUP BY country.name;","SELECT c.Name AS Country, cl.Language, MAX(cl.Percentage) AS Percentage FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name ORDER BY Percentage DESC;","SELECT CountryCode, Language, max(Percentage) FROM countrylanguage GROUP BY CountryCode","SELECT T1.Language FROM countrylanguage AS T1 JOIN (SELECT CountryCode, max(Percentage) AS max_percentage FROM countrylanguage GROUP BY CountryCode) AS T2 ON T1.CountryCode = T2.CountryCode AND T1.Percentage = T2.max_percentage","SELECT MAX(Percentage) AS MaxPercentage, CountryCode FROM countrylanguage GROUP BY CountryCode","select language, countrycode from countrylanguage group by countrycode order by percentage desc limit 1","select language, countrycode from countrylanguage group by countrycode order by percentage desc limit 1",select countrylanguage.language from countrylanguage   order by countrylanguage.percentage desc limit 1
"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.code, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code HAVING MAX(countrylanguage.percentage) = countrylanguage.percentage;","SELECT c.Code, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (   SELECT MAX(Percentage)    FROM countrylanguage    WHERE CountryCode = c.Code );","SELECT T1.CountryCode, T1.Language FROM countrylanguage AS T1 JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage GROUP BY CountryCode ) AS T2 ON T1.CountryCode = T2.CountryCode AND T1.Percentage = T2.MaxPercentage","SELECT T1.CountryCode, T1.Language, max(T1.Percentage) FROM countrylanguage AS T1 GROUP BY T1.CountryCode","SELECT MAX(Percentage) AS MaxPercentage, CountryCode FROM countrylanguage GROUP BY CountryCode","select countrycode, language, percentage from countrylanguage group by countrycode order by percentage desc limit 1","select countrycode, language from countrylanguage group by countrycode order by count(*) desc limit 1","select countrylanguage.countrycode , max(countrylanguage.percentage) from countrylanguage  group by countrylanguage.countrycode"
"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT country.code) FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' GROUP BY countrylanguage.language HAVING countrylanguage.percentage = MAX(countrylanguage.percentage);,SELECT COUNT(*)  FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE CountryCode = c.CountryCode ),SELECT count(*) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC),SELECT count(*) FROM (SELECT CountryCode FROM countrylanguage AS T1 WHERE Language = 'Spanish' AND Percentage = (SELECT max(Percentage) FROM countrylanguage WHERE CountryCode = T1.CountryCode)) AS T2,SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT MAX(Percentage) FROM countrylanguage WHERE Language = 'Spanish'),"select count(*) from countrylanguage where language = ""Spanish"" group by countrycode order by percentage desc limit 1","select count(*) from countrylanguage where language = ""Spanish"" group by countrycode order by percentage desc limit 1","select count(*) from countrylanguage where  countrylanguage.language = ""Spanish""   order by countrylanguage.percentage desc limit 1"
"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(countrycode) FROM countrylanguage WHERE language = 'Spanish' AND isofficial = 'T' AND percentage > 50;,SELECT COUNT(*)  FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50.0;,SELECT count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish' AND T2.IsOfficial = 'T',SELECT COUNT(CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T',SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;,"select count(*) from countrylanguage where language = ""Spanish"" and percentage = (select max(percentage) from countrylanguage where language = ""Spanish"")","select count(*) from countrylanguage where language = ""Spanish"" group by countrycode order by count(*) desc limit 1","select count(*) from countrylanguage where  countrylanguage.language = ""Spanish"""
"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT countrycode FROM countrylanguage WHERE language = ""Spanish"" ORDER BY percentage DESC LIMIT 1;",SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1;,SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC,SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish' ORDER BY T2.Percentage DESC,SELECT MAX(Percentage) AS MaxPercentage FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode,"select countrycode from countrylanguage where language = ""Spanish"" group by countrycode order by percentage desc limit 1","select countrycode from countrylanguage where language = ""Spanish"" group by countrycode order by count(*) desc limit 1","select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = ""Spanish""   order by countrylanguage.percentage desc limit 1"
"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = ""Spanish"" AND countrylanguage.isofficial = 1 AND countrylanguage.percentage > 50;",SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND Percentage > 50;,SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T',SELECT T1.Code FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish' AND T2.IsOfficial = 'T',SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;,"select countrycode from countrylanguage where language = ""Spanish"" group by countrycode having count(*) >= 2","select countrycode from countrylanguage where language = ""Spanish"" group by countrycode having count(*) >= 2","select countrylanguage.countrycode from countrylanguage where  countrylanguage.language = ""Spanish""  group by countrylanguage.countrycode"
SELECT count(*) FROM conductor,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT COUNT(conductor_id) FROM conductor;,SELECT COUNT(*) FROM conductor;,SELECT count(*) FROM conductor,SELECT COUNT(*) FROM conductor,SELECT COUNT(Conductor_ID) FROM conductor;,select count(*) from conductor,select count(*) from conductor,select count(*) from conductor
SELECT count(*) FROM conductor,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT COUNT(*) FROM conductor;,SELECT COUNT(*) FROM conductor;,SELECT count(*) FROM conductor,SELECT COUNT(*) FROM conductor,SELECT COUNT(Conductor_ID) FROM conductor;,select count(*) from conductor,select count(*) from conductor,select count(*) from conductor
SELECT Name FROM conductor ORDER BY Age ASC,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor ORDER BY conductor.age ASC;,SELECT Name FROM conductor ORDER BY Age ASC;,SELECT Name FROM conductor ORDER BY Age ASC,SELECT Name FROM conductor ORDER BY Age ASC,SELECT Name FROM conductor ORDER BY Age ASC,select name from conductor order by age asc,select name from conductor order by age asc,select conductor.name from conductor   order by conductor.age asc
SELECT Name FROM conductor ORDER BY Age ASC,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor ORDER BY conductor.age;,SELECT Name FROM conductor ORDER BY Age;,SELECT Name FROM conductor ORDER BY Age,SELECT Name FROM conductor ORDER BY Age,SELECT Name FROM conductor ORDER BY Age,select name from conductor order by age,select name from conductor order by age,select conductor.name from conductor   order by conductor.age asc
SELECT Name FROM conductor WHERE Nationality != 'USA',orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT name FROM conductor WHERE nationality != 'USA';,SELECT Name  FROM conductor WHERE Nationality != 'USA';,SELECT Name FROM conductor WHERE Nationality != 'USA',SELECT Name FROM conductor WHERE Nationality != 'USA',SELECT Name FROM conductor WHERE Nationality != 'USA',"select name from conductor where nationality!= ""USA""","select name from conductor where nationality!= ""USA""","select conductor.name from conductor where  conductor.nationality != ""USA"""
SELECT Name FROM conductor WHERE Nationality != 'USA',orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT name FROM conductor WHERE nationality != ""USA"";",SELECT Name FROM conductor WHERE Nationality != 'USA';,SELECT Name FROM conductor WHERE Nationality != 'USA',SELECT Name FROM conductor WHERE Nationality != 'USA',SELECT Name FROM conductor WHERE Nationality != 'USA';,"select name from conductor where nationality!= ""USA""",select name from conductor where nationality!= 'USA',"select conductor.name from conductor where  conductor.nationality != ""USA"""
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT orchestra.record_company FROM orchestra ORDER BY orchestra.year_of_founded DESC;,"SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;",SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,select record_company from orchestra order by year_of_founded desc,select record_company from orchestra order by year_of_founded desc,select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT record_company FROM orchestra ORDER BY year_of_founded DESC;,"SELECT Record_Company, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded DESC;",SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,select record_company from orchestra order by year_of_founded desc,select record_company from orchestra order by year_of_founded desc,select orchestra.record_company from orchestra   order by orchestra.year_of_founded desc
SELECT avg(Attendance) FROM SHOW,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT AVG(attendance) FROM show;,SELECT AVG(Attendance) AS average_attendance FROM show;,SELECT avg(Attendance) FROM show,SELECT AVG(Attendance) FROM show,SELECT AVG(Attendance) FROM show,select avg(attendance) from show,select avg(attendance) from show,select avg(show.attendance) from show
SELECT avg(Attendance) FROM SHOW,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT AVG(attendance) AS average_attendance FROM show;,SELECT AVG(Attendance) AS average_attendance FROM show;,SELECT avg(Attendance) FROM show,SELECT AVG(Attendance) FROM show,SELECT AVG(Attendance) FROM show;,select avg(attendance) from show,select avg(attendance) from show,select avg(show.attendance) from show
"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT MIN(share), MAX(share) FROM performance WHERE type != ""Live final"";","SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type != 'Live final';","SELECT max(Share) , min(Share) FROM performance WHERE Type != ""Live final""","SELECT max(Share), min(Share) FROM performance WHERE Type != 'Live final'","SELECT MAX(Share) AS MaxShare, MIN(Share) AS MinShare FROM performance WHERE Type != 'Live final'","select max(share), min(share) from performance where type!= ""Live final""","select max(share), min(share) from performance where type!= ""Live final""","select max(performance.share) , min(performance.share) from performance where  performance.type != ""Live final"""
"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT MAX(share), MIN(share) FROM performance WHERE type != ""Live final"";","SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type != 'Live final';","SELECT max(Share) , min(Share) FROM performance WHERE Type != ""Live final""","SELECT max(Share), min(Share) FROM performance WHERE Type != 'Live final'","SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final results';","select max(share), min(share) from performance where type!= ""Live final""","select max(share), min(share) from performance where type!= ""Live final""","select max(performance.share) , min(performance.share) from performance where  performance.type != ""Live final"""
SELECT count(DISTINCT Nationality) FROM conductor,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT COUNT(DISTINCT nationality) FROM conductor;,SELECT COUNT(DISTINCT Nationality) FROM conductor;,SELECT count(DISTINCT Nationality) FROM conductor,SELECT COUNT(DISTINCT Nationality) FROM conductor,SELECT COUNT(DISTINCT Nationality) FROM conductor,select count(distinct nationality) from conductor,select count(distinct nationality) from conductor,select count( distinct conductor.nationality) from conductor
SELECT count(DISTINCT Nationality) FROM conductor,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT COUNT(DISTINCT nationality) FROM conductor;,SELECT COUNT(DISTINCT Nationality) FROM conductor;,SELECT count(DISTINCT Nationality) FROM conductor,SELECT COUNT(DISTINCT Nationality) FROM conductor,SELECT COUNT(DISTINCT Nationality) FROM conductor,select count(distinct nationality) from conductor,select count(distinct nationality) from conductor,select count( distinct conductor.nationality) from conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC;,SELECT Name FROM conductor ORDER BY Year_of_Work DESC;,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,select name from conductor order by year_of_work desc,select name from conductor order by year_of_work desc,select conductor.name from conductor   order by conductor.year_of_work desc
SELECT Name FROM conductor ORDER BY Year_of_Work DESC,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC;,"SELECT Name, Year_of_Work FROM conductor ORDER BY Year_of_Work DESC;",SELECT Name FROM conductor ORDER BY Year_of_Work DESC,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,select name from conductor order by year_of_work desc,select name from conductor order by year_of_work desc,select conductor.name from conductor   order by conductor.year_of_work desc
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1;,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,select name from conductor order by year_of_work desc limit 1,select name from conductor order by year_of_work desc limit 1,select conductor.name from conductor   order by conductor.year_of_work desc limit 1
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor ORDER BY conductor.year_of_work DESC LIMIT 1;,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,select name from conductor order by year_of_work desc limit 1,select name from conductor order by year_of_work desc limit 1,select conductor.name from conductor   order by conductor.year_of_work desc limit 1
"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id","SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;","SELECT T1.Name , T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID","SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID","SELECT Conductor.Name, Orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID","select conductor.name, orchestra.orchestra from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id join conductor on conductor.conductor_id = orchestra.conductor_id","select t1.name, t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id","select conductor.name , orchestra.orchestra from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID"
"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT conductor.name, orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id;","SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;","SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID","SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID","SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID","select conductor.name, orchestra.orchestra from orchestra join conductor on orchestra.conductor_id = conductor.conductor_id","select t2.name, t1.orchestra from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id","select conductor.name , orchestra.orchestra from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID"
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor GROUP BY conductor.name HAVING COUNT(DISTINCT conductor.conductor_id) > 1;,SELECT Name FROM conductor c WHERE (SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra o WHERE o.Conductor_ID = c.Conductor_ID) > 1;,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING count(*) > 1,"SELECT COUNT(orchestra.Conductor_ID) AS NumberOfOrchestras, conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID HAVING COUNT(orchestra.Conductor_ID) > 1",select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.conductor_id having count(*) > 1,select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t1.conductor_id having count(*) > 1,select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.conductor_id HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1;,SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING count(*) > 1,SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name HAVING COUNT(orchestra.Orchestra_ID) > 1,select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name having count(*) > 1,select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id having count(*) > 1,select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id having  count(*) > 1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(DISTINCT orchestra.orchestra_id) DESC LIMIT 1;,SELECT Name FROM conductor WHERE Conductor_ID = (   SELECT Conductor_ID   FROM orchestra   GROUP BY Conductor_ID   ORDER BY COUNT(*) DESC   LIMIT 1 );,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY count(*) DESC LIMIT 1,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Conductor_ID ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1,select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name order by count(*) desc limit 1,select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1,select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1;,SELECT Name FROM conductor WHERE Conductor_ID = (   SELECT Conductor_ID   FROM orchestra   GROUP BY Conductor_ID   ORDER BY COUNT(*) DESC   LIMIT 1 );,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY count(*) DESC LIMIT 1,"SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID, T1.Name ORDER BY count(*) DESC LIMIT 1","SELECT COUNT(orchestra.Conductor_ID) AS Num_Orchestras, conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY orchestra.Conductor_ID ORDER BY Num_Orchestras DESC LIMIT 1",select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id group by conductor.name order by count(*) desc limit 1,select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1,select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID  group by orchestra.conductor_id  order by count(*) desc limit 1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008;,SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;,SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008,SELECT Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE Year_of_Founded > 2008,select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008,select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id where t1.year_of_founded > 2008,select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE orchestra.year_of_founded > 2008;,SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;,SELECT DISTINCT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008,SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID WHERE orchestra.Year_of_Founded > 2008,select conductor.name from conductor join orchestra on conductor.conductor_id = orchestra.conductor_id where orchestra.year_of_founded > 2008,select t2.name from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id where t1.year_of_founded > 2008,select conductor.name from orchestra join conductor on orchestra.Conductor_ID = conductor.Conductor_ID where  orchestra.year_of_founded > 2008
"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT record_company, COUNT(orchestra) as num_orchestras FROM orchestra GROUP BY record_company;","SELECT Record_Company, COUNT(*) AS num_orchestras FROM orchestra GROUP BY Record_Company;","SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company","SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company","SELECT Record_Company, COUNT(Orchestra_ID) AS NumberOfOrchestras FROM orchestra GROUP BY Record_Company","select record_company, count(*) from orchestra group by record_company","select record_company, count(*) from orchestra group by record_company","select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT record_company, COUNT(orchestra_id) FROM orchestra GROUP BY record_company;","SELECT Record_Company, COUNT(*) AS num_orchestras FROM orchestra GROUP BY Record_Company;","SELECT Record_Company , count(*) FROM orchestra GROUP BY Record_Company","SELECT COUNT(*) , Record_Company FROM orchestra GROUP BY Record_Company","SELECT COUNT(Orchestra_ID) AS NumberOfOrchestras, Record_Company FROM orchestra GROUP BY Record_Company","select record_company, count(*) from orchestra group by record_company","select record_company, count(*) from orchestra group by record_company","select orchestra.record_company , count(*) from orchestra  group by orchestra.record_company"
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) ASC;,"SELECT Major_Record_Format, COUNT(*) AS count FROM orchestra GROUP BY Major_Record_Format ORDER BY count ASC;",SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,"SELECT Major_Record_Format, COUNT(*) as count FROM orchestra GROUP BY Major_Record_Format ORDER BY count ASC","SELECT COUNT(Major_Record_Format), Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Major_Record_Format) ASC",select major_record_format from orchestra group by major_record_format order by count(*) asc,select major_record_format from orchestra group by major_record_format order by count(*) asc,select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(*) DESC;,"SELECT Major_Record_Format, COUNT(*) as Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;",SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC,"SELECT Major_Record_Format, COUNT(*) as frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY frequency DESC","SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;",select major_record_format from orchestra group by major_record_format order by count(*) asc,select major_record_format from orchestra group by major_record_format order by count(*) desc,select orchestra.major_record_format from orchestra  group by orchestra.major_record_format  order by count(*) asc
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,"SELECT Record_Company, COUNT(*) as count FROM orchestra GROUP BY Record_Company ORDER BY count DESC LIMIT 1","SELECT MAX(Record_Company_Count) AS Most_Common_Record_Company FROM (   SELECT Record_Company, COUNT(*) AS Record_Company_Count   FROM orchestra   GROUP BY Record_Company ) AS Record_Company_Counts ORDER BY Record_Company_Count DESC LIMIT 1;",select record_company from orchestra group by record_company order by count(*) desc limit 1,select record_company from orchestra group by record_company order by count(*) desc limit 1,select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1,"SELECT MAX(Record_Company_Count) AS Most_Common_Record_Company FROM (   SELECT Record_Company, COUNT(*) AS Record_Company_Count   FROM orchestra   GROUP BY Record_Company ) AS Record_Company_Counts",select record_company from orchestra group by record_company order by count(*) desc limit 1,select record_company from orchestra group by record_company order by count(*) desc limit 1,select orchestra.record_company from orchestra  group by orchestra.record_company  order by count(*) desc limit 1
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL;,SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL;,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL,select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance),select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance),select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN ( SELECT orchestra_id FROM performance );,SELECT o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL;,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Orchestra_ID IS NULL,select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance),select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance),select orchestra.orchestra from orchestra where  orchestra.orchestra_id not in (select performance.Orchestra_ID from performance  )
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;,SELECT o.Record_Company FROM orchestra o WHERE o.Year_of_Founded < 2003     OR o.Year_of_Founded > 2003 GROUP BY o.Record_Company HAVING COUNT(DISTINCT CASE WHEN o.Year_of_Founded < 2003 THEN 1 END) > 0    AND COUNT(DISTINCT CASE WHEN o.Year_of_Founded > 2003 THEN 1 END) > 0;,SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003,SELECT DISTINCT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003),SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003,select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003,select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003,select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003
SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT record_company FROM orchestra WHERE year_of_founded < 2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded > 2003;,SELECT o.Record_Company FROM orchestra o WHERE o.Record_Company IN (   SELECT o2.Record_Company   FROM orchestra o2   WHERE o2.Year_of_Founded < 2003 ) AND o.Record_Company IN (   SELECT o3.Record_Company   FROM orchestra o3   WHERE o3.Year_of_Founded > 2003 );,SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003,SELECT Record_Company FROM orchestra WHERE Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003) AND Record_Company IN (SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003),SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003,select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003,select record_company from orchestra where year_of_founded < 2003 intersect select record_company from orchestra where year_of_founded > 2003,select orchestra.record_company from orchestra where  orchestra.year_of_founded < 2003   intersect select orchestra.record_company from orchestra where  orchestra.year_of_founded > 2003
"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  ""CD"" OR Major_Record_Format  =  ""DVD""",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');","SELECT COUNT(*)  FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');","SELECT count(*) FROM orchestra WHERE Major_Record_Format = ""CD"" OR Major_Record_Format = ""DVD""",SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD',"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');","select count(*) from orchestra where major_record_format = ""CD"" or major_record_format = ""DVD""","select count(*) from orchestra where major_record_format = ""CD"" or major_record_format = ""DVD""","select count(*) from orchestra where  orchestra.major_record_format = ""CD"" or orchestra.major_record_format = ""DVD"""
"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  ""CD"" OR Major_Record_Format  =  ""DVD""",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT COUNT(DISTINCT orchestra_id) FROM orchestra WHERE major_record_format IN ('CD', 'DVD');","SELECT COUNT(*)  FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');","SELECT count(*) FROM orchestra WHERE Major_Record_Format = ""CD"" OR Major_Record_Format = ""DVD""",SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD',"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');","select count(*) from orchestra where major_record_format = ""CD"" or major_record_format = ""DVD""","select count(*) from orchestra where major_record_format = ""CD"" or major_record_format = ""DVD""","select count(*) from orchestra where  orchestra.major_record_format = ""CD"" or orchestra.major_record_format = ""DVD"""
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT DISTINCT year_of_founded FROM orchestra WHERE orchestra_id IN ( SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1 );,"SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1",SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1),SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT T1.Orchestra_ID FROM performance AS T1 GROUP BY T1.Orchestra_ID HAVING count(*) > 1),SELECT YEAR(Year_of_Founded) AS Year_Founded FROM orchestra WHERE Orchestra_ID IN (   SELECT Orchestra_ID   FROM performance   GROUP BY Orchestra_ID   HAVING COUNT(Performance_ID) > 1 );,select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count(*) > 1,select t1.year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t1.orchestra_id having count(*) > 1,select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by performance.orchestra_id having  count(*) > 1
SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT year_of_founded FROM orchestra WHERE orchestra_id IN (SELECT orchestra_id FROM performance GROUP BY orchestra_id HAVING COUNT(*) > 1);,"SELECT o.Year_of_Founded FROM orchestra o JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1",SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Orchestra_ID HAVING COUNT(*) > 1,SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT T1.Orchestra_ID FROM performance AS T1 GROUP BY T1.Orchestra_ID HAVING count(*) > 1),SELECT YEAR(orchestra.Year_of_Founded) AS Year_of_Founding FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(performance.Performance_ID) > 1,select orchestra.year_of_founded from performance join orchestra on performance.orchestra_id = orchestra.orchestra_id group by performance.orchestra_id having count(*) > 1,select t1.year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id = t2.orchestra_id group by t1.orchestra_id having count(*) > 1,select orchestra.year_of_founded from performance join orchestra on performance.Orchestra_ID = orchestra.Orchestra_ID  group by performance.orchestra_id having  count(*) > 1
SELECT count(*) FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM highschooler;,SELECT COUNT(*) FROM Highschooler;,SELECT count(*) FROM Highschooler,SELECT COUNT(*) FROM Highschooler,SELECT COUNT(*) FROM Highschooler;,select count(*) from highschooler,select count(*) from highschooler,select count(*) from Highschooler
SELECT count(*) FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM highschooler;,SELECT COUNT(*) FROM Highschooler;,SELECT count(*) FROM Highschooler,SELECT COUNT(*) FROM Highschooler,SELECT COUNT(*) FROM Highschooler;,select count(*) from highschooler,select count(*) from highschooler,select count(*) from Highschooler
"SELECT name ,  grade FROM Highschooler",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT name, grade FROM highschooler;","SELECT name, grade FROM Highschooler;","SELECT name , grade FROM Highschooler","SELECT name, grade FROM Highschooler","SELECT names, grades FROM Highschooler;","select name, grade from highschooler","select name, grade from highschooler","select highschooler.name , highschooler.grade from Highschooler"
"SELECT name ,  grade FROM Highschooler",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT name, grade FROM highschooler;","SELECT name, grade FROM Highschooler;","SELECT name , grade FROM Highschooler","SELECT name, grade FROM Highschooler","SELECT names, grades FROM Highschooler;","select name, grade from highschooler","select name, grade from highschooler","select highschooler.name , highschooler.grade from Highschooler"
SELECT grade FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM highschooler;,SELECT grade FROM Highschooler;,SELECT grade FROM Highschooler,SELECT DISTINCT grade FROM Highschooler,SELECT grades FROM Highschooler;,select distinct grade from highschooler,select distinct grade from highschooler,select distinct highschooler.grade from Highschooler
SELECT grade FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM highschooler,"SELECT name, grade FROM Highschooler;",SELECT Grade FROM Highschooler,"SELECT ID, name, grade FROM Highschooler","SELECT grade, name FROM Highschooler;",select distinct grade from highschooler,select grade from highschooler,select highschooler.grade from Highschooler
"SELECT grade FROM Highschooler WHERE name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM highschooler WHERE name = 'Kyle';,SELECT grade FROM Highschooler WHERE name = 'Kyle';,"SELECT grade FROM Highschooler WHERE name = ""Kyle"";",SELECT grade FROM Highschooler WHERE name = 'Kyle',SELECT grade FROM Highschooler WHERE name = 'Kyle';,select grade from highschooler where name = 'Kyle',select distinct grade from highschooler where name = 'Kyle',"select highschooler.grade from Highschooler where  highschooler.name = ""Kyle"""
"SELECT grade FROM Highschooler WHERE name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM highschooler WHERE name = 'Kyle';,SELECT grade FROM Highschooler WHERE name = 'Kyle';,"SELECT grade FROM Highschooler WHERE name = ""Kyle""",SELECT grade FROM Highschooler WHERE name = 'Kyle',SELECT grade FROM Highschooler WHERE name = 'Kyle';,select grade from highschooler where name = 'Kyle',select grade from highschooler where name = 'Kyle',"select highschooler.grade from Highschooler where  highschooler.name = ""Kyle"""
SELECT name FROM Highschooler WHERE grade  =  10,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE grade = 10;,SELECT name FROM Highschooler WHERE grade = 10;,SELECT name FROM Highschooler WHERE grade = 10,SELECT name FROM Highschooler WHERE grade = 10,SELECT name FROM Highschooler WHERE grade = 10;,select name from highschooler where grade = 10,select name from highschooler where grade = 10,select highschooler.name from Highschooler where  highschooler.grade = 10
SELECT name FROM Highschooler WHERE grade  =  10,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE grade = 10;,SELECT name FROM Highschooler WHERE grade = 10;,SELECT name FROM Highschooler WHERE grade = 10,SELECT name FROM Highschooler WHERE grade = 10,SELECT names FROM Highschooler WHERE grade = 10;,select name from highschooler where grade = 10,select name from highschooler where grade = 10,select highschooler.name from Highschooler where  highschooler.grade = 10
"SELECT ID FROM Highschooler WHERE name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT id FROM highschooler WHERE name = 'Kyle';,SELECT ID  FROM Highschooler WHERE name = 'Kyle';,"SELECT ID FROM Highschooler WHERE name = ""Kyle""",SELECT ID FROM Highschooler WHERE name = 'Kyle',SELECT ID FROM Highschooler WHERE name = 'Kyle';,select id from highschooler where name = 'Kyle',select id from highschooler where name = 'Kyle',"select highschooler.id from Highschooler where  highschooler.name = ""Kyle"""
"SELECT ID FROM Highschooler WHERE name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT id FROM highschooler WHERE name = ""Kyle"";",SELECT ID FROM Highschooler WHERE name = 'Kyle';,"SELECT ID FROM Highschooler WHERE name = ""Kyle"";",SELECT ID FROM Highschooler WHERE name = 'Kyle',SELECT name FROM Highschooler WHERE name = 'Kyle';,select id from highschooler where name = 'Kyle',select id from highschooler where name = 'Kyle',"select highschooler.id from Highschooler where  highschooler.name = ""Kyle"""
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);","SELECT COUNT(*)  FROM Highschooler WHERE grade IN (9, 10);","SELECT count(*) FROM Highschooler WHERE grade IN (9, 10)","SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)","SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);",select count(*) from highschooler where grade = 9 or grade = 10,select count(*) from highschooler where grade = 9 or grade = 10,select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10
SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT COUNT(*) FROM highschooler WHERE grade IN (9, 10);","SELECT COUNT(*)  FROM Highschooler WHERE grade IN (9, 10);","SELECT count(*) FROM Highschooler WHERE grade IN (9, 10)","SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)","SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);",select count(*) from highschooler where grade = 9 or grade = 10,select count(*) from highschooler where grade = 9 or grade = 10,select count(*) from Highschooler where  highschooler.grade = 9 or highschooler.grade = 10
"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;","SELECT grade, COUNT(*) AS num_students FROM Highschooler GROUP BY grade;","SELECT grade , count(*) FROM Highschooler GROUP BY grade","SELECT COUNT(*) ,  grade FROM Highschooler GROUP BY grade","SELECT COUNT(ID), grade FROM Highschooler GROUP BY grade","select count(*), grade from highschooler group by grade","select count(*), grade from highschooler group by grade","select highschooler.grade , count(*) from Highschooler  group by highschooler.grade"
"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT grade, COUNT(id) FROM highschooler GROUP BY grade;","SELECT grade, COUNT(*) as count FROM Highschooler GROUP BY grade;","SELECT grade , count(*) FROM Highschooler GROUP BY grade","SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade","SELECT COUNT(ID), grade FROM Highschooler GROUP BY grade","select count(*), grade from highschooler group by grade","select count(*), grade from highschooler group by grade","select count(*) , highschooler.grade from Highschooler  group by highschooler.grade"
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;,SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;,SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,"SELECT grade, COUNT(*) AS num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1;",select grade from highschooler group by grade order by count(*) desc limit 1,select grade from highschooler group by grade order by count(*) desc limit 1,select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;,SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,"SELECT grade, COUNT(*) AS num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1",select grade from highschooler group by grade order by count(*) desc limit 1,select grade from highschooler group by grade order by count(*) desc limit 1,select highschooler.grade from Highschooler  group by highschooler.grade  order by count(*) desc limit 1
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;,SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;,SELECT grade FROM Highschooler GROUP BY grade HAVING count(ID) >= 4,SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4,SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4,select grade from highschooler group by grade having count(*) >= 4,select grade from highschooler group by grade having count(*) >= 4,select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;,SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;,SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4,SELECT grade FROM Highschooler GROUP BY grade HAVING count(ID) >= 4,SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4,select grade from highschooler group by grade having count(*) >= 4,select grade from highschooler group by grade having count(*) >= 4,select highschooler.grade from Highschooler  group by highschooler.grade having  count(*) >= 4
"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT friend.student_id, COUNT(friend.friend_id) as number_of_friends FROM friend GROUP BY friend.student_id;","SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id;","SELECT student_id , COUNT(*) FROM Friend GROUP BY student_id","SELECT T1.ID, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID","SELECT student_id, COUNT(friend_id) AS number_of_friends FROM Friend GROUP BY student_id","select student_id, count(*) from friend group by student_id","select student_id, count(*) from friend group by student_id","select friend.student_id , count(*) from Friend  group by friend.student_id"
"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT highschooler.id, COUNT(friend.friend_id) FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;","SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;","SELECT student_id , count(*) FROM Friend GROUP BY student_id","SELECT T1.ID, T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name",SELECT COUNT(friend_id) AS number_of_friends FROM Friend GROUP BY student_id,select count(*) from friend group by student_id,"select count(*), t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.name","select count(*) , friend.student_id from Friend  group by friend.student_id"
"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT highschooler.name, COUNT(friend.friend_id) AS number_of_friends FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name;","SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;","SELECT H.name, COUNT(F.friend_id) FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID, H.name","SELECT T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name","SELECT highschooler.name, COUNT(friend.friend_id) AS number_of_friends FROM highschooler LEFT JOIN friend ON highschooler.ID = friend.student_id GROUP BY highschooler.name","select highschooler.name, count(*) from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id","select t1.name, count(*) from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.grade","select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id"
"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name;","SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name;","SELECT T1.name , count(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID","SELECT T1.name, count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name","SELECT COUNT(f.friend_id) AS friend_count, h.name FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.name","select highschooler.name, count(*) from highschooler join friend on highschooler.id = friend.student_id group by highschooler.id","select count(*), t1.name from highschooler as t1 join friend as t2 on t1.id = t2.friend_id group by t1.name","select highschooler.name , count(*) from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by highschooler.name"
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1 ),"SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name ORDER BY COUNT(*) DESC LIMIT 1;",SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY count(*) DESC LIMIT 1,SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID HAVING count(*)  =  (SELECT max(count_friends) FROM (SELECT count(*) AS count_friends FROM Friend GROUP BY student_id) AS T3),"SELECT MAX(friend_count) AS max_friends FROM (SELECT student_id, COUNT(friend_id) AS friend_count FROM Friend GROUP BY student_id) AS friend_counts JOIN Highschooler ON Highschooler.ID = friend_counts.student_id",select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by friend.student_id order by count(*) desc limit 1,select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t1.id order by count(*) desc limit 1,select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id  order by count(*) desc limit 1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.id ORDER BY COUNT(friend.friend_id) DESC LIMIT 1;,"SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name ORDER BY COUNT(*) DESC LIMIT 1;",SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID ORDER BY count(T2.friend_id) DESC LIMIT 1,SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Friend GROUP BY student_id ORDER BY COUNT(friend_id) DESC LIMIT 1),select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by friend.student_id order by count(*) desc limit 1,select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t2.student_id order by count(*) desc limit 1,select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.student_id  order by count(*) desc limit 1
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 3 ),SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend   GROUP BY student_id   HAVING COUNT(*) >= 3 );,SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(*) >= 3,SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id GROUP BY T1.ID HAVING count(*)  >=  3,SELECT names FROM Highschooler WHERE ID IN (     SELECT student_id FROM Friend     GROUP BY student_id     HAVING COUNT(friend_id) >= 3 ),select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by friend.student_id having count(*) >= 3,select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t2.student_id having count(*) >= 3,select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 3 ),SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend   GROUP BY student_id   HAVING COUNT(*) >= 3 );,SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(*) >= 3,SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING count(*) >= 3,"SELECT COUNT(friend_id) AS friend_count, h.name FROM Friend JOIN Highschooler h ON Friend.student_id = h.ID GROUP BY student_id HAVING friend_count >= 3",select highschooler.name from highschooler join friend on highschooler.id = friend.student_id group by friend.student_id having count(*) >= 3,select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t2.student_id having count(*) >= 3,select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID  group by friend.friend_id having  count(*) >= 3
"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id WHERE highschooler.name = ""Kyle"";",SELECT h2.name  FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON f.friend_id = h2.ID WHERE h1.name = 'Kyle';,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T1.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'),SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID IN (SELECT T2.friend_id FROM Friend AS T2 WHERE T2.student_id = (SELECT T3.ID FROM Highschooler AS T3 WHERE T3.name = 'Kyle')),SELECT names FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Friend.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'),select friend.friend_id from highschooler join friend on highschooler.id = friend.friend_id where highschooler.name = 'Kyle',select t3.name from highschooler as t1 join friend as t2 on t1.id = t2.friend_id join likes on t2.friend_id = t3.id join highschooler as t3 on t1.id = t2.student_id where t1.name = 'Kyle',"select highschooler.name from Highschooler where  highschooler.name = ""Kyle"""
"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id JOIN highschooler h ON h.id = friend.student_id WHERE h.name = ""Kyle""",SELECT h2.name  FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON f.friend_id = h2.ID WHERE h1.name = 'Kyle';,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T1.student_id IN (SELECT ID FROM Highschooler WHERE name = 'Kyle'),SELECT T1.name FROM Highschooler AS T1 WHERE T1.ID IN (SELECT T2.friend_id FROM Friend AS T2 WHERE T2.student_id = (SELECT T3.ID FROM Highschooler AS T3 WHERE T3.name = 'Kyle')),SELECT name FROM Highschooler WHERE ID IN (SELECT friend_id FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')),select friend.friend_id from highschooler join friend on highschooler.id = friend.student_id where highschooler.name = 'Kyle',select t2.friend_id from highschooler as t1 join friend as t2 on t1.id = t2.friend_id where t1.name = 'Kyle',"select friend.friend_id from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = ""Kyle"""
"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');,SELECT COUNT(*) AS num_friends FROM Friend WHERE student_id = (   SELECT ID    FROM Highschooler   WHERE name = 'Kyle' );,"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = ""Kyle""",SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle',SELECT COUNT(friend_id) FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';,select count(*) from highschooler join friend on highschooler.id = friend.student_id where highschooler.name = 'Kyle',"select count(t2.friend_id) from highschooler as t1 join friend as t2 on t1.id = t2.student_id where t1.name = 'Kyle' and t1.grade = ""9""","select count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = ""Kyle"""
"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT Count(*) as num_friends FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');,SELECT COUNT(*) AS num_friends FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');,"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = ""Kyle""",SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle',SELECT COUNT(friend_id) FROM Friend JOIN Highschooler ON Friend.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';,select count(*) from highschooler join friend on highschooler.id = friend.student_id where highschooler.name = 'Kyle',select count(t2.friend_id) from highschooler as t1 join friend as t2 on t1.id = t2.student_id where t1.name = 'Kyle',"select count( distinct friend.friend_id) from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.name = ""Kyle"""
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend),SELECT h.ID FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.student_id IS NULL;,SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend),SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend),SELECT Highschooler.ID FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL,select,select id from highschooler except select student_id from friend,select highschooler.id from Highschooler   except select friend.student_id from Friend
SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend),SELECT ID FROM Highschooler WHERE ID NOT IN (   SELECT student_id   FROM Friend );,SELECT ID FROM Highschooler EXCEPT SELECT student_id FROM Friend,SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend),SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend),select id from highschooler except select student_id from friend,select id from highschooler except select student_id from friend,select highschooler.id from Highschooler   except select friend.student_id from Friend
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE id NOT IN ( SELECT student_id FROM friend ),SELECT name FROM Highschooler WHERE ID NOT IN (   SELECT student_id   FROM Friend );,SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend),SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend),SELECT names FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend),select name from highschooler where id not in (select student_id from friend),select name from highschooler where id not in (select student_id from friend),select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )
SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE id NOT IN ( SELECT student_id FROM friend ),SELECT name FROM Highschooler WHERE ID NOT IN (   SELECT student_id   FROM Friend );,SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend),SELECT name FROM Highschooler WHERE ID NOT IN (SELECT T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id OR T1.ID  =  T2.friend_id),SELECT Highschooler.name FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id WHERE Friend.friend_id IS NULL,select name from highschooler where id not in (select student_id from friend),select name from highschooler where id not in (select student_id from friend),select highschooler.name from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT highschooler.id FROM highschooler WHERE id IN (SELECT friend_id FROM friend) AND id IN (SELECT liked_id FROM likes);,SELECT DISTINCT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.liked_id;,SELECT T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.liked_id,SELECT DISTINCT T1.student_id FROM Friend AS T1 JOIN Likes AS T2 ON T1.student_id = T2.liked_id,SELECT DISTINCT h.ID FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.liked_id,select student_id from friend intersect select student_id from likes,select t1.id from highschooler as t1 join friend as t2 on t1.id = t2.student_id intersect select t1.id from highschooler as t1 join likes as t2 on t1.id = t2.student_id,select highschooler.id from Highschooler   intersect select likes.student_id from Likes
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT highschooler.id FROM highschooler INNER JOIN friend ON friend.student_id = highschooler.id INNER JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.id HAVING COUNT(*) > 0;,SELECT DISTINCT l.student_id FROM Likes l INNER JOIN Friend f ON l.student_id = f.student_id;,SELECT T1.ID FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.liked_id GROUP BY T1.ID,SELECT T1.student_id FROM Friend AS T1 JOIN Likes AS T2 ON T1.student_id = T2.liked_id GROUP BY T1.student_id,SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes,select student_id from friend intersect select student_id from likes,select student_id from friend intersect select student_id from likes,select friend.student_id from Friend   intersect select likes.student_id from Likes
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT highschooler.name FROM highschooler INNER JOIN friend ON friend.student_id = highschooler.id INNER JOIN likes ON likes.liked_id = highschooler.id GROUP BY highschooler.name;,SELECT name FROM Highschooler h WHERE EXISTS (   SELECT 1    FROM Friend f   WHERE f.student_id = h.ID ) AND EXISTS (   SELECT 1   FROM Likes l   WHERE l.liked_id = h.ID );,SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.liked_id,SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes),SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes),select highschooler.name from highschooler join friend on highschooler.id = friend.student_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.student_id,select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id intersect select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id,select highschooler.name from Highschooler   intersect select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend) AND id IN (SELECT student_id FROM likes),SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Friend   INTERSECT   SELECT liked_id   FROM Likes );,SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.liked_id,SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend) AND ID IN (SELECT liked_id FROM Likes),SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.liked_id;,select highschooler.name from highschooler join friend on highschooler.id = friend.student_id intersect select highschooler.name from highschooler join likes on highschooler.id = likes.student_id,select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id intersect select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id,select highschooler.name from Highschooler   intersect select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID
"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT student_id, COUNT(*) AS like_count FROM likes GROUP BY student_id;","SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id;","SELECT student_id , count(*) FROM Likes GROUP BY student_id","SELECT count(T1.liked_id), T1.student_id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id","SELECT COUNT(liked_id) AS likes_count, student_id FROM Likes GROUP BY student_id","select count(*), student_id from likes group by student_id","select count(*), student_id from likes group by student_id","select count(*) , likes.student_id from Likes  group by likes.student_id"
"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT student_id, COUNT(*) as num_likes FROM likes GROUP BY student_id;","SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id;","SELECT student_id , count(*) FROM Likes GROUP BY student_id","SELECT student_id, count(liked_id) FROM Likes GROUP BY student_id","SELECT COUNT(liked_id) AS likes_count, student_id FROM Likes GROUP BY student_id","select student_id, count(*) from likes group by student_id","select student_id, count(*) from likes group by student_id","select likes.student_id , count(*) from Likes  group by likes.student_id"
"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT highschooler.name, COUNT(likes.student_id) FROM highschooler INNER JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;","SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name;","SELECT T1.name , count(*) FROM Likes AS T2 JOIN Highschooler AS T1 ON T2.student_id = T1.ID GROUP BY T2.student_id","SELECT T1.name, count(T2.liked_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name","SELECT name, COUNT(liked_id) AS number_of_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID, Highschooler.name","select highschooler.name, count(*) from highschooler join likes on highschooler.id = likes.student_id group by highschooler.id","select t1.name, count(*) from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.id","select highschooler.name , count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id"
"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT highschooler.name, COUNT(likes.liked_id) FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;","SELECT h.name, COUNT(l.student_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name;","SELECT T1.name , count(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID","SELECT T1.name, count(T2.liked_id) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID, T1.name","SELECT highschooler.name, COUNT(likes.liked_id) AS likes_count FROM highschooler JOIN likes ON highschooler.ID = likes.student_id GROUP BY highschooler.name","select highschooler.name, count(*) from highschooler join likes on highschooler.id = likes.student_id group by highschooler.id","select count(*), t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.name","select highschooler.name , count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id"
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 ),"SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.liked_id GROUP BY h.ID, h.name ORDER BY COUNT(*) DESC LIMIT 1;",SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID ORDER BY count(*) DESC LIMIT 1,SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID HAVING count(T2.liked_id) = (SELECT max(count_likes) FROM (SELECT count(liked_id) as count_likes FROM Likes GROUP BY liked_id) as subquery),"SELECT MAX(like_count) AS max_likes, name FROM (SELECT COUNT(L.liked_id) AS like_count, H.name       FROM Likes L       JOIN Highschooler H ON L.liked_id = H.ID       GROUP BY L.liked_id) AS like_counts;",select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by highschooler.id order by count(*) desc limit 1,select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id order by count(*) desc limit 1,select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id ORDER BY COUNT(*) DESC LIMIT 1;,SELECT name FROM Highschooler WHERE ID = (   SELECT liked_id   FROM Likes   GROUP BY liked_id   ORDER BY COUNT(*) DESC   LIMIT 1 );,SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.ID ORDER BY COUNT(*) DESC LIMIT 1,SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.liked_id GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1,SELECT name FROM Highschooler WHERE ID = (SELECT liked_id FROM Likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1),select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id order by count(*) desc limit 1,select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id order by count(*) desc limit 1,select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id  order by count(*) desc limit 1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT highschooler.name FROM highschooler JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.id HAVING COUNT(likes.liked_id) >= 2;,SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Likes   GROUP BY student_id   HAVING COUNT(*) >= 2 );,SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(*) >= 2,SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2,SELECT names FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(liked_id) >= 2),select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count(*) >= 2,select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id having count(*) >= 2,select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.id HAVING COUNT(likes.student_id) >= 2;,SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Likes   GROUP BY student_id   HAVING COUNT(*) >= 2 );,SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING count(*) >= 2,SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID  =  T2.student_id GROUP BY T2.student_id HAVING count(*)  >=  2,"SELECT COUNT(L.student_id) AS like_count, H.name FROM Likes L JOIN Highschooler H ON L.student_id = H.ID GROUP BY L.student_id HAVING like_count >= 2",select highschooler.name from highschooler join likes on highschooler.id = likes.student_id group by likes.student_id having count(*) >= 2,select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id having count(*) >= 2,select highschooler.name from Likes join Highschooler on Likes.student_id = Highschooler.ID  group by likes.student_id having  count(*) >= 2
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE grade > 5 AND id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 ),SELECT name FROM Highschooler h WHERE h.grade > 5   AND (SELECT COUNT(*) FROM Friend f WHERE f.student_id = h.ID) >= 2;,SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T2.friend_id) >= 2 AND AVG(T1.grade) > 5,SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5 AND T1.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) >= 2),SELECT highschooler.name FROM highschooler JOIN (SELECT student_id       FROM Friend       GROUP BY student_id       HAVING COUNT(friend_id) >= 2) AS friends_count ON highschooler.ID = friends_count.student_id WHERE highschooler.grade > 5,select highschooler.name from highschooler join friend on highschooler.id = friend.student_id where highschooler.grade > 5 group by highschooler.id having count(*) >= 2,select name from highschooler where grade > 5 intersect select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t2.student_id having count(*) >= 2,select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.student_id having  count(*) >= 2
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM highschooler WHERE grade > 5 AND id IN ( SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(friend_id) >= 2 );,SELECT name FROM Highschooler h WHERE h.grade > 5   AND (SELECT COUNT(*) FROM Friend f WHERE f.student_id = h.ID) >= 2;,SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(T2.friend_id) >= 2 AND AVG(T1.grade) > 5,SELECT T1.name FROM Highschooler AS T1 WHERE T1.grade > 5 AND T1.ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING count(*) >= 2),"SELECT COUNT(f.friend_id) AS friend_count, h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.grade > 5 GROUP BY h.ID HAVING COUNT(f.friend_id) >= 2",select highschooler.name from highschooler join friend on highschooler.id = friend.student_id where highschooler.grade > 5 group by highschooler.id having count(*) >= 2,select name from highschooler where grade > 5 intersect select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id group by t2.student_id having count(*) >= 2,select highschooler.name from Friend join Highschooler on Friend.friend_id = Highschooler.ID where  highschooler.grade > 5  group by friend.friend_id having  count(*) >= 2
"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');,SELECT COUNT(*) AS likes_count FROM Likes WHERE student_id = (   SELECT ID    FROM Highschooler   WHERE name = 'Kyle' );,SELECT count(*) FROM Likes WHERE liked_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle'),SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.ID WHERE T2.name = 'Kyle',SELECT COUNT(*) FROM Likes JOIN Highschooler ON Likes.student_id = Highschooler.ID WHERE Highschooler.name = 'Kyle';,select count(*) from highschooler join likes on highschooler.id = likes.student_id where highschooler.name = 'Kyle',select count(*) from highschooler as t1 join likes as t2 on t1.id = t2.student_id where t1.name = 'Kyle',"select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = ""Kyle"""
"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM likes INNER JOIN highschooler ON highschooler.id = likes.student_id WHERE highschooler.name = 'Kyle';,SELECT COUNT(*) AS num_likes FROM Likes WHERE student_id = (   SELECT ID    FROM Highschooler   WHERE name = 'Kyle' );,"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = ""Kyle""",SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle',SELECT COUNT(L.student_id) FROM Likes L JOIN Highschooler H ON L.student_id = H.ID WHERE H.name = 'Kyle';,select count(*) from highschooler join likes on highschooler.id = likes.student_id where highschooler.name = 'Kyle',select count(*) from highschooler as t1 join likes as t2 on t1.id = t2.student_id where t1.name = 'Kyle',"select count(*) from Likes join Highschooler on Likes.student_id = Highschooler.ID where  highschooler.name = ""Kyle"""
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT AVG(grade) FROM highschooler WHERE id IN ( SELECT DISTINCT student_id FROM friend ),SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (   SELECT DISTINCT student_id   FROM Friend );,SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend),SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend),SELECT AVG(h.grade) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID,select avg(grade) from highschooler where id in (select student_id from friend),select avg(t2.grade) from friend as t1 join highschooler as t2 on t1.student_id = t2.id,select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID
SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend.student_id FROM friend);,SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (   SELECT DISTINCT student_id   FROM Friend );,SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend),SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT DISTINCT student_id FROM Friend),SELECT AVG(h.grade) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id,select avg(highschooler.grade) from highschooler join friend on highschooler.id = friend.student_id,select avg(t2.grade) from friend as t1 join highschooler as t2 on t1.student_id = t2.id,select avg(highschooler.grade) from Friend join Highschooler on Friend.friend_id = Highschooler.ID
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT MIN(grade) FROM highschooler WHERE id NOT IN ( SELECT student_id FROM friend ),SELECT MIN(grade)  FROM Highschooler WHERE ID NOT IN (   SELECT student_id   FROM Friend );,SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend),SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend),SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend),select min(grade) from highschooler where id not in (select student_id from friend),select min(grade) from highschooler where id not in (select student_id from friend),select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )
SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);,SELECT MIN(grade) AS lowest_grade FROM Highschooler h WHERE NOT EXISTS (   SELECT 1    FROM Friend f   WHERE f.student_id = h.ID );,SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend),SELECT min(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend),SELECT MIN(highschooler.grade) FROM highschooler LEFT JOIN friend ON highschooler.ID = friend.student_id OR highschooler.ID = friend.friend_id WHERE friend.student_id IS NULL AND friend.friend_id IS NULL,select min(grade) from highschooler where id not in (select student_id from friend),select min(grade) from highschooler where id not in (select student_id from friend),select min(highschooler.grade) from Highschooler where  highschooler.id not in (select Friend.friend_id from Friend  )
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT state FROM owners WHERE state IN (SELECT state FROM professionals),SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state,SELECT DISTINCT O.state FROM Owners AS O JOIN Professionals AS P ON O.state = P.state,SELECT T1.state FROM Owners AS T1 JOIN Professionals AS T2 ON T1.state  =  T2.state GROUP BY T1.state,SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state,select state from owners intersect select state from professionals,select state from owners intersect select state from professionals,select owners.state from Owners   intersect select professionals.state from Professionals
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT DISTINCT state FROM owners INTERSECT SELECT DISTINCT state FROM professionals;,SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state,SELECT DISTINCT state FROM Owners INTERSECT SELECT DISTINCT state FROM Professionals,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,SELECT owners.state FROM owners JOIN professionals ON owners.state = professionals.state GROUP BY owners.state,select state from owners intersect select state from professionals,select state from owners intersect select state from professionals,select owners.state from Owners   intersect select professionals.state from Professionals
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT avg(age) FROM dogs WHERE dog_id IN (SELECT dog_id FROM treatments);,SELECT AVG(d.age) AS average_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;,SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments),SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments),SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);,select avg(age) from dogs where dog_id in (select dog_id from treatments),select avg(age) from dogs where dog_id in ( select dog_id from treatments ),select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id
SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT avg(age) as average_age FROM dogs WHERE dog_id in (SELECT DISTINCT dog_id FROM treatments);,SELECT AVG(d.age) AS avg_age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;,SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments),SELECT avg(T1.age) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id,SELECT AVG(age) FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id,select avg(age) from dogs where dog_id in (select dog_id from treatments),select avg(age) from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id,select avg(dogs.age) from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id
"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2);","SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' OR COUNT(t.treatment_id) > 2 GROUP BY p.professional_id, p.last_name, p.cell_number","SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.state = 'Indiana' OR T1.professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) > 2)","SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION (SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2)","SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING professionals.state = 'Indiana' OR COUNT(treatments.treatment_id) > 2","select professionals.professional_id, professionals.last_name, professionals.cell_number from treatments join professionals on treatments.professional_id = professionals.professional_id where professionals.state = ""Indiana"" group by professionals.professional_id having count(*) > 2","select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = ""Indiana"" union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2","select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = ""Indiana""   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2"
"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'Indiana' OR professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2 );","SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' OR COUNT(t.treatment_id) > 2 GROUP BY p.professional_id, p.last_name, p.cell_number","SELECT `professional_id`, `last_name`, `cell_number` FROM `Professionals` WHERE `state` = 'Indiana' OR `professional_id` IN (SELECT `professional_id` FROM `Treatments` GROUP BY `professional_id` HAVING COUNT(`treatment_id`) > 2)","SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION (SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.last_name, T1.cell_number HAVING count(*) > 2)","SELECT professionals.professional_id, professionals.last_name, professionals.cell_number FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id GROUP BY professionals.professional_id HAVING professionals.state = 'Indiana' OR COUNT(treatments.treatment_id) > 2","select professionals.professional_id, professionals.last_name, professionals.cell_number from treatments join professionals on treatments.professional_id = professionals.professional_id where professionals.state = ""Indiana"" union select professionals.professional_id, professionals.last_name, professionals.cell_number from treatments join professionals on treatments.professional_id = professionals.professional_id group by professionals.professional_id having count(*) > 2","select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id where t1.state = ""Indiana"" union select t1.professional_id, t1.last_name, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) > 2","select professionals.professional_id , professionals.last_name , professionals.cell_number from Professionals where  professionals.state = ""Indiana""   union select professionals.professional_id , professionals.last_name , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) > 2"
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.dog_id HAVING SUM(treatments.cost_of_treatment) <= 1000;,"SELECT d.name FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING COALESCE(SUM(t.cost_of_treatment), 0) <= 1000;",SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000),SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment) > 1000),SELECT dog.name FROM Dogs dog LEFT JOIN Treatments treat ON dog.dog_id = treat.dog_id GROUP BY dog.dog_id HAVING SUM(treat.cost_of_treatment) <= 1000 OR SUM(treat.cost_of_treatment) IS NULL;,select name from dogs except select dogs.name from dogs join treatments on dogs.dog_id = treatments.dog_id where treatments.cost_of_treatment > 1000,select name from dogs except select t1.name from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t2.cost_of_treatment > 1000,select dogs.name from Dogs   except select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id where  treatments.cost_of_treatment > 1000
select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE owners.owner_id NOT IN ( SELECT owners.owner_id FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment > 1000 );,"SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id, d.name HAVING SUM(t.cost_of_treatment) <= 1000;",SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000),SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT T1.dog_id FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id HAVING sum(T2.cost_of_treatment) > 1000),SELECT dogs.name FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY dogs.dog_id HAVING SUM(treatments.cost_of_treatment) <= 1000,select name from dogs where owner_id not in (select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000),select name from dogs where owner_id not in (select dog_id from treatments group by dog_id having sum(cost_of_treatment) > 1000),select dogs.name from Dogs   except select dogs.name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id where  treatments.cost_of_treatment > 1000
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT DISTINCT first_name FROM owners UNION SELECT DISTINCT first_name FROM professionals EXCEPT SELECT DISTINCT name FROM dogs;,SELECT DISTINCT first_name FROM (   SELECT first_name FROM Professionals   UNION   SELECT first_name FROM Owners ) AS human_names WHERE first_name NOT IN (   SELECT name FROM Dogs );,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS T1 WHERE first_name NOT IN (SELECT name FROM Dogs),SELECT first_name FROM (   SELECT first_name FROM Owners   UNION   SELECT first_name FROM Professionals ) AS CombinedNames WHERE first_name NOT IN (   SELECT name FROM Dogs ),select first_name from owners union select first_name from professionals,"select first_name, last_name, email_address from professionals except select t2.first_name from professionals as t1 join owners as t2 on t1.professional_id = t2.owner_id join dogs as t3 on t2.owner_id = t3.owner_id",select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id   union select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT name FROM dogs,SELECT DISTINCT first_name FROM (   SELECT first_name FROM Professionals   UNION   SELECT first_name FROM Owners   EXCEPT   SELECT name FROM Dogs ) AS combined_names;,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,SELECT first_name FROM (SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners) AS T1 WHERE first_name NOT IN (SELECT name FROM Dogs),SELECT first_name FROM (     SELECT first_name FROM Professionals     UNION     SELECT first_name FROM Owners ) AS CombinedNames WHERE first_name NOT IN (     SELECT name FROM Dogs ),select first_name from owners union select first_name from professionals,select first_name from professionals,select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id   union select professionals.first_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id join Treatments on Dogs.dog_id = Treatments.dog_id join Professionals on Treatments.professional_id = Professionals.professional_id
"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN ( SELECT DISTINCT professional_id FROM treatments );","SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL","SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)","SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)","SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.treatment_id IS NULL","select professional_id, role_code, email_address from professionals except select professionals.professional_id, professionals.role_code, professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id","select professional_id, role_code, email_address from professionals except select t2.professional_id, t2.role_code, t2.email_address from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id","select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (SELECT professional_id FROM treatments)","SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL","SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)","SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)","SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.treatment_id IS NULL","select professional_id, role_code, email_address from professionals except select professionals.professional_id, professionals.role_code, professionals.email_address from professionals join treatments on professionals.professional_id = treatments.professional_id","select professional_id, role_code, email_address from professionals except select t2.professional_id, t2.role_code, t2.email_address from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id","select professionals.professional_id , professionals.role_code , professionals.email_address from Professionals   except select professionals.professional_id , professionals.role_code , professionals.email_address from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;","SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;","SELECT `owner_id`, `first_name`, `last_name` FROM `Owners` WHERE `owner_id` IN (SELECT `owner_id` FROM `Dogs` GROUP BY `owner_id` ORDER BY COUNT(*) DESC LIMIT 1)","SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN (SELECT owner_id, count(*) as dog_count FROM Dogs GROUP BY owner_id) AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.dog_count DESC LIMIT 1","SELECT owner_id, first_name, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1","select owners.owner_id, owners.first_name, owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by owners.owner_id order by count(*) desc limit 1","select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1","select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners INNER JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;","SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;","SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1)","SELECT T2.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T2.first_name, T2.last_name ORDER BY COUNT(*) DESC LIMIT 1","SELECT owner_id, first_name, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1","select owners.owner_id, owners.first_name, owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id group by owners.owner_id order by count(*) desc limit 1","select t1.owner_id, t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count(*) desc limit 1","select owners.owner_id , owners.first_name , owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by count(*) desc limit 1"
"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2 );","SELECT p.professional_id, p.role_code, p.first_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(t.treatment_id) >= 2;","SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2","SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2","SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(treatment_id) >= 2 )","select professionals.professional_id, professionals.role_code, professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id group by professionals.professional_id having count(*) >= 2","select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2","select professionals.professional_id , professionals.role_code , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) >= 2 );","SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 );","SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2","SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2","SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(treatment_id) >= 2 )","select professionals.professional_id, professionals.role_code, professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id group by professionals.professional_id having count(*) >= 2","select t1.professional_id, t1.role_code, t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2","select professionals.professional_id , professionals.role_code , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT breeds.breed_name FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1,select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_code order by count(*) desc limit 1,select breed_name from breeds group by breed_code order by count(*) desc limit 1,select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by breeds.breed_name  order by count(*) desc limit 1
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT breeds.breed_name FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code GROUP BY breeds.breed_name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT breed_name FROM Breeds INNER JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT t2.breed_name FROM Dogs AS t1 JOIN Breeds AS t2 ON t1.breed_code = t2.breed_code GROUP BY t2.breed_name ORDER BY count(*) DESC LIMIT 1,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(T2.breed_code) DESC LIMIT 1,SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1,select breeds.breed_name from breeds join dogs on breeds.breed_code = dogs.breed_code group by breeds.breed_name order by count(*) desc limit 1,select breed_name from breeds group by breed_code order by count(*) desc limit 1,select breeds.breed_name from Dogs join Breeds on Dogs.breed_code = Breeds.breed_code  group by breeds.breed_name  order by count(*) desc limit 1
"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(*) DESC LIMIT 1;","SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;","SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1","SELECT T2.owner_id, T3.last_name FROM Treatments AS T1 JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id JOIN Owners AS T3 ON T2.owner_id = T3.owner_id GROUP BY T2.owner_id, T3.last_name ORDER BY COUNT(*) DESC LIMIT 1","SELECT owner_id, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1","select owners.owner_id, owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum(treatments.cost_of_treatment) desc limit 1","select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t2.dog_id = t1.owner_id group by t1.owner_id order by sum(t2.cost_of_treatment) desc limit 1","select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by owners.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;","SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;","SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT owner_id, last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1","select owners.owner_id, owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id join treatments on dogs.dog_id = treatments.dog_id group by owners.owner_id order by sum(treatments.cost_of_treatment) desc limit 1","select t1.owner_id, t1.last_name from owners as t1 join treatments as t2 on t2.treatment_id = t1.owner_id group by t1.owner_id order by sum(t2.cost_of_treatment) desc limit 1","select owners.owner_id , owners.last_name from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatments.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1;,SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 );,SELECT t1.treatment_type_description FROM Treatment_Types AS t1 JOIN Treatments AS t2 ON t1.treatment_type_code = t2.treatment_type_code GROUP BY t1.treatment_type_code ORDER BY sum(t2.cost_of_treatment) ASC LIMIT 1,"SELECT T2.treatment_type_description FROM Treatment_Types AS T2 JOIN (SELECT T1.treatment_type_code, SUM(T1.cost_of_treatment) as total_cost FROM Treatments AS T1 GROUP BY T1.treatment_type_code) AS T3 ON T2.treatment_type_code = T3.treatment_type_code ORDER BY T3.total_cost ASC LIMIT 1","SELECT MIN(Treatments.cost_of_treatment), Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatment_Types.treatment_type_description ORDER BY MIN(Treatments.cost_of_treatment) ASC LIMIT 1",select treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code group by treatments.treatment_type_code order by sum(treatments.cost_of_treatment) asc limit 1,select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t2.treatment_type_code order by sum(t2.cost_of_treatment) limit 1,select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1
SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description ORDER BY SUM(treatments.cost_of_treatment) LIMIT 1;,SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 );,SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;,SELECT T2.treatment_type_description FROM Treatment_Types AS T2 WHERE T2.treatment_type_code = (SELECT T1.treatment_type_code FROM Treatments AS T1 GROUP BY T1.treatment_type_code ORDER BY sum(T1.cost_of_treatment) ASC LIMIT 1),"SELECT MIN(cost_of_treatment) AS Lowest_Cost, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code GROUP BY Treatments.treatment_type_code ORDER BY Lowest_Cost ASC LIMIT 1",select treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code group by treatments.treatment_type_code order by sum(treatments.cost_of_treatment) limit 1,select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code = t2.treatment_type_code group by t2.treatment_type_code order by sum(t2.cost_of_treatment) limit 1,select treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code  group by treatments.treatment_type_code  order by sum(treatments.cost_of_treatment) asc limit 1
"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;","SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;","SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.zip_code ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT SUM(cost_of_treatment) AS total_cost, Owners.owner_id, Owners.zip_code FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id JOIN Owners ON Dogs.owner_id = Owners.owner_id GROUP BY Owners.owner_id, Owners.zip_code ORDER BY total_cost DESC LIMIT 1",error,"select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.cost_of_treatment","select dogs.owner_id , owners.zip_code from charges join dogs join owners  group by dogs.owner_id  order by sum(charges.charge_amount) desc limit 1"
"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1;","SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;","SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1","SELECT owner_id, zip_code FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1",error,"select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by sum(t2.cost_of_treatment","select dogs.owner_id , owners.zip_code from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id join Owners on Dogs.owner_id = Owners.owner_id  group by dogs.owner_id  order by sum(treatments.cost_of_treatment) desc limit 1"
"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );","SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;","SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2","SELECT T3.professional_id, T3.cell_number FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code JOIN Professionals AS T3 ON T1.professional_id = T3.professional_id GROUP BY T1.professional_id, T3.cell_number HAVING count(DISTINCT T1.treatment_type_code) >= 2","SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )","select treatments.professional_id, professionals.cell_number from treatments join professionals on treatments.professional_id = professionals.professional_id group by treatments.professional_id having count(*) >= 2","select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2","select treatments.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professional_id, cell_number FROM professionals WHERE professional_id IN ( SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 );","SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.cell_number HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;","SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)","SELECT T2.professional_id, T2.cell_number FROM Professionals AS T2 WHERE T2.professional_id IN (     SELECT T1.professional_id     FROM Treatments AS T1     GROUP BY T1.professional_id     HAVING COUNT(DISTINCT T1.treatment_type_code) >= 2 )","SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )","select treatments.professional_id, professionals.cell_number from treatments join professionals on treatments.professional_id = professionals.professional_id group by treatments.professional_id having count(*) >= 2","select t1.professional_id, t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count(*) >= 2","select professionals.professional_id , professionals.cell_number from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id  group by treatments.professional_id having  count(*) >= 2"
"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name FROM professionals WHERE professional_id IN (SELECT professional_id FROM treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments));","SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)","SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))","SELECT T1.first_name, T1.last_name  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)","SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING AVG(cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments) )","select professionals.first_name, professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < (select avg(cost_of_treatment) from treatments)","select t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t1.cost_of_treatment < (select avg(cost_of_treatment) from treatments)","select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professionals.first_name, professionals.last_name FROM professionals INNER JOIN treatments ON treatments.professional_id = professionals.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments);","SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)","SELECT P.first_name, P.last_name FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)","SELECT T1.first_name, T1.last_name  FROM Professionals AS T1  JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id  WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)","SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )","select professionals.first_name, professionals.last_name from treatments join professionals on treatments.professional_id = professionals.professional_id where treatments.cost_of_treatment < (select avg(cost_of_treatment) from treatments)","select t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id where t1.cost_of_treatment < (select avg(cost_of_treatment) from treatments)","select professionals.first_name , professionals.last_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id where  treatments.cost_of_treatment < (select avg(Treatments.cost_of_treatment) from Treatments  )"
"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;","SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;","SELECT T.date_of_treatment , P.first_name FROM Treatments AS T JOIN Professionals AS P ON T.professional_id = P.professional_id","SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id","SELECT date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id","select treatments.date_of_treatment, professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id","select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id","select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT treatments.date_of_treatment, professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id = professionals.professional_id;","SELECT t.date_of_treatment, p.first_name FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id;","SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id","SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id","SELECT date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id","select treatments.date_of_treatment, professionals.first_name from treatments join professionals on treatments.professional_id = professionals.professional_id","select t1.date_of_treatment, t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id","select treatments.date_of_treatment , professionals.first_name from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id"
"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;","SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;","SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code","SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code","SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code","select treatments.cost_of_treatment, treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code","select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code","select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT cost_of_treatment, treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;","SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;","SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code","SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code","SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code","select treatments.cost_of_treatment, treatment_types.treatment_type_description from treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code","select t1.cost_of_treatment, t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code = t2.treatment_type_code","select treatments.cost_of_treatment , treatment_types.treatment_type_description from Treatments join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;","SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;","SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code","SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code","SELECT first_name, last_name, size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code","select owners.first_name, owners.last_name, dogs.size_code from dogs join owners on dogs.owner_id = owners.owner_id","select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id","select owners.first_name , owners.last_name , dogs.size_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code;","SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code;","SELECT T1.first_name , T1.last_name , T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code","SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Sizes AS T3 ON T2.size_code = T3.size_code","SELECT first_name, last_name, size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code","select owners.first_name, owners.last_name, dogs.size_code from owners join dogs on owners.owner_id = dogs.owner_id","select t1.first_name, t1.last_name, t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id","select owners.first_name , owners.last_name , dogs.size_code from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;","SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id;","SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id","SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Dogs.owner_id = Owners.owner_id","SELECT first_name, name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id","select owners.first_name, dogs.name from owners join dogs on owners.owner_id = dogs.owner_id","select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id","select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id;","SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id","SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id","SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id","SELECT first_name, name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id","select owners.first_name, dogs.name from owners join dogs on owners.owner_id = dogs.owner_id","select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id","select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id"
"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON treatments.dog_id = dogs.dog_id WHERE breeds.breed_name = ( SELECT breed_name FROM breeds ORDER BY breed_code LIMIT 1 ) ORDER BY treatments.date_of_treatment;","SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 );","SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)","SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )","SELECT breeds.breed_name, dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.breed_code IN (   SELECT breed_code   FROM dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 )","select dogs.name, treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id group by dogs.breed_code order by count(*) asc limit 1","select t2.name, t3.date_of_treatment from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code join treatments as t3 on t2.dog_id = t3.dog_id order by t1.breed_code limit 1","select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id   order by dogs.breed_code asc limit 1"
"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code WHERE breeds.breed_code IN ( SELECT breed_code FROM breeds GROUP BY breed_code HAVING COUNT(*) = 1 );","SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code = (   SELECT breed_code   FROM Dogs   GROUP BY breed_code   ORDER BY COUNT(*) ASC   LIMIT 1 );","SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)","SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (     SELECT breed_code     FROM Dogs     GROUP BY breed_code     ORDER BY COUNT(*) ASC     LIMIT 1 )","SELECT Dogs.name, Treatments.date_of_treatment FROM Dogs JOIN (SELECT breed_code, COUNT(*) AS breed_count       FROM Dogs       GROUP BY breed_code       ORDER BY breed_count ASC       LIMIT 1) AS RarestBreed ON Dogs.breed_code = RarestBreed.breed_code JOIN Treatments ON Dogs.dog_id = Treatments.dog_id","select dogs.name, treatments.date_of_treatment from treatments join dogs on treatments.dog_id = dogs.dog_id group by dogs.breed_code order by count(*) asc limit 1","select t2.name, t3.date_of_treatment from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code join treatments as t3 on t2.dog_id = t3.dog_id group by t1.breed_code order by count(*) desc limit 1","select dogs.name , treatments.date_of_treatment from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id  group by dogs.dog_id  order by count(*) asc limit 1"
"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia';","SELECT o.first_name, d.name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE o.state = 'Virginia';","SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia'","SELECT Dogs.name, Owners.first_name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia'","SELECT first_name, name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE state = 'Virginia';","select dogs.name, owners.first_name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = ""Virginia""","select t2.name, t1.first_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = ""Virginia""","select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = ""Virginia"""
"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.street LIKE '%Virginia%'","SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';","SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'","SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'","SELECT owners.first_name, dogs.name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE owners.state = 'Virginia'","select owners.first_name, dogs.name from owners join dogs on owners.owner_id = dogs.owner_id where owners.state = ""Virginia""","select t1.first_name, t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = ""Virginia""","select owners.first_name , dogs.name from Dogs join Owners on Dogs.owner_id = Owners.owner_id where  owners.state = ""Virginia"""
"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;","SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id","SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id","SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id","SELECT date_arrived, date_departed FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);","select date_arrived, date_departed from dogs where dog_id in (select dog_id from treatments)","select t2.date_arrived, t2.date_departed from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id","select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT dogs.date_arrived, dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id","SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;","SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id","SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id","SELECT date_arrived, date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id","select date_arrived, date_departed from dogs where dog_id in (select dog_id from treatments)","select t2.date_arrived, t2.date_departed from treatments as t1 join dogs as t2 on t1.dog_id = t2.dog_id","select dogs.date_arrived , dogs.date_departed from Treatments join Dogs on Treatments.dog_id = Dogs.dog_id"
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = ( SELECT MIN(age) FROM dogs ),SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id ORDER BY d.date_of_birth DESC LIMIT 1;,SELECT Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1;,SELECT T2.last_name FROM Owners AS T2 JOIN Dogs AS T1 ON T1.owner_id = T2.owner_id WHERE T1.date_of_birth = (SELECT max(date_of_birth) FROM Dogs),SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1,select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age asc limit 1,select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.age asc limit 1,select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1
SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id WHERE dogs.age = (SELECT MIN(age) FROM dogs);,SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id ORDER BY d.date_of_birth DESC LIMIT 1;,SELECT O.last_name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id ORDER BY D.date_of_birth DESC LIMIT 1;,SELECT last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1),SELECT last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id ORDER BY Dogs.date_of_birth DESC LIMIT 1,select owners.last_name from owners join dogs on owners.owner_id = dogs.owner_id order by dogs.age limit 1,select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id order by t2.age asc limit 1,select owners.last_name from Dogs join Owners on Dogs.owner_id = Owners.owner_id   order by dogs.age asc limit 1
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT email_address FROM professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';,"SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');","SELECT email_address FROM Professionals WHERE state = ""Hawaii"" OR state = ""Wisconsin""",SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin',"SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');","select email_address from professionals where state = ""Hawaii"" or state = ""Wisconsin""","select email_address from professionals where state = ""Hawaii"" or state = ""Wisconsin""","select professionals.email_address from Professionals where  professionals.state = ""Hawaii"" or professionals.state = ""Wisconsin"""
SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT email_address FROM professionals WHERE state IN ('Hawaii', 'Wisconsin');","SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');","SELECT email_address FROM Professionals WHERE state = ""Hawaii"" OR state = ""Wisconsin"";",SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin',"SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');","select email_address from professionals where state = ""Hawaii"" or state = ""Wisconsin""","select email_address from professionals where state = ""Hawaii"" or state = ""Wisconsin""","select professionals.email_address from Professionals where  professionals.state = ""Hawaii"" or professionals.state = ""Wisconsin"""
"SELECT date_arrived ,  date_departed FROM Dogs",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT date_arrived, date_departed FROM dogs;","SELECT dog_id, date_arrived, date_departed FROM Dogs;","SELECT date_arrived, date_departed FROM Dogs;","SELECT date_arrived, date_departed FROM Dogs","SELECT date_arrived, date_departed FROM Dogs","select date_arrived, date_departed from dogs","select date_arrived, date_departed from dogs","select dogs.date_arrived , dogs.date_departed from Dogs"
"SELECT date_arrived ,  date_departed FROM Dogs",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT date_arrived, date_departed FROM dogs;","SELECT date_arrived, date_departed FROM Dogs;","SELECT date_arrived , date_departed FROM Dogs","SELECT date_arrived, date_departed FROM Dogs","SELECT arrival_date, departure_date FROM Dogs","select date_arrived, date_departed from dogs","select date_arrived, date_departed from dogs","select dogs.date_arrived , dogs.date_departed from Dogs"
SELECT count(DISTINCT dog_id) FROM Treatments,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(DISTINCT dog_id) FROM treatments;,SELECT COUNT(DISTINCT dog_id) AS num_dogs_with_treatments FROM Treatments;,SELECT count(DISTINCT dog_id) FROM Treatments,SELECT count(DISTINCT dog_id) FROM Treatments,SELECT COUNT(DISTINCT dog_id) FROM Treatments,select count(*) from treatments,select count(*) from treatments,select count(*) from Treatments
SELECT count(DISTINCT dog_id) FROM Treatments,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(DISTINCT dogs.dog_id) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id;,SELECT COUNT(DISTINCT dog_id) AS num_dogs_treated FROM Treatments;,SELECT count(DISTINCT dog_id) FROM Treatments,SELECT count(DISTINCT T1.dog_id) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id,SELECT COUNT(DISTINCT dog_id) FROM Treatments;,select count(distinct dog_id) from treatments,select count(*) from treatments,select count( distinct treatments.dog_id) from Treatments
SELECT count(DISTINCT professional_id) FROM Treatments,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(DISTINCT professional_id) FROM treatments;,SELECT COUNT(DISTINCT professional_id)  FROM Treatments;,SELECT COUNT(DISTINCT professional_id) FROM Treatments,SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id,SELECT COUNT(DISTINCT professional_id) FROM Treatments,select count(distinct professional_id) from treatments,select count(distinct professional_id) from treatments,select count( distinct treatments.professional_id) from Treatments
SELECT count(DISTINCT professional_id) FROM Treatments,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(DISTINCT professional_id) FROM treatments;,SELECT COUNT(DISTINCT professional_id)  FROM Treatments;,SELECT COUNT(DISTINCT professional_id) FROM Treatments,SELECT count(DISTINCT T1.professional_id) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id,SELECT COUNT(DISTINCT professional_id) FROM Treatments;,select count(distinct professional_id) from treatments,select count(distinct professional_id) from treatments,select count( distinct treatments.professional_id) from Treatments
"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%';","SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';","SELECT role_code, street, city, state FROM Professionals WHERE city LIKE ""%West%""","SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'","SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';","select role_code, street, city, state from professionals where city like ""%west%""","select role_code, street, city, state from professionals where city like '%west%'","select professionals.role_code , professionals.street , professionals.city , professionals.state from Professionals where  professionals.city like ""%West%"""
"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.city LIKE '%West%';","SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';","SELECT role_code, street, city, state FROM Professionals WHERE city LIKE ""%West%""","SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'","SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'","select role_code, street, city, state from professionals where city like ""%west%""","select role_code, street, city, state from professionals where city like '%west%'","select professionals.role_code , professionals.street , professionals.city , professionals.state from Professionals where  professionals.city like ""%West%"""
"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.state LIKE '%North%';","SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';","SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE ""%North%""","SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'","SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';","select first_name, last_name, email_address from owners where state like ""%north%""","select first_name, last_name, email_address from owners where state like ""%north%""","select owners.first_name , owners.last_name , owners.email_address from Owners where  owners.state like ""%North%"""
"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name, email_address FROM owners WHERE state LIKE '%North%';","SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';","SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE ""%North%""","SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'","SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';","select first_name, last_name, email_address from owners where state like ""%north%""","select first_name, last_name, email_address from owners where state like ""%north%""","select owners.first_name , owners.last_name , owners.email_address from Owners where  owners.state like ""%North%"""
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);,SELECT COUNT(*)  FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);,SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs),SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs),SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs),select count(*) from dogs where age < (select avg(age) from dogs),select count(*) from dogs where age < (select avg(age) from dogs),select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )
SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs);,SELECT COUNT(*)  FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);,SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs),SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs),SELECT COUNT(dog_id) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);,select count(*) from dogs where age < (select avg(age) from dogs),select count(*) from dogs where age < (select avg(age) from dogs),select count(*) from Dogs where  dogs.age < (select avg(dogs.age) from Dogs  )
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;,"SELECT MAX(date_of_treatment) AS most_recent_treatment_date, cost_of_treatment AS most_recent_treatment_cost FROM Treatments;",SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT max(date_of_treatment) FROM Treatments),SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,select cost_of_treatment from treatments order by date_of_treatment desc limit 1,select cost_of_treatment from treatments order by date_of_treatment desc limit 1,select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1;,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,SELECT cost_of_treatment FROM Treatments WHERE date_of_treatment = (SELECT max(date_of_treatment) FROM Treatments),"SELECT MAX(date_of_treatment), cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",select cost_of_treatment from treatments order by date_of_treatment desc limit 1,select cost_of_treatment from treatments order by date_of_treatment desc limit 1,select treatments.cost_of_treatment from Treatments   order by treatments.date_of_treatment desc limit 1
SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments),SELECT COUNT(*)  FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;,SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments),SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments),SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);,select count(*) from dogs where dog_id not in ( select dog_id from treatments ),select count(*) from dogs where dog_id not in ( select dog_id from treatments ),select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )
select count(*) from dogs where dog_id not in ( select dog_id from treatments ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments);,SELECT COUNT(*)  FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;,SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments),SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments),SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);,select count(*) from dogs where dog_id not in (select dog_id from treatments),select count(*) from dogs where dog_id not in ( select dog_id from treatments ),select count(*) from Dogs where  dogs.dog_id not in (select Treatments.dog_id from Treatments  )
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs);,SELECT COUNT(*) AS owners_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;,SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE abandoned_yn != 'Y'),SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs),SELECT COUNT(DISTINCT o.owner_id)  FROM Owners o  LEFT JOIN Dogs d ON o.owner_id = d.owner_id  WHERE d.dog_id IS NULL;,select count(*) from owners where owner_id not in (select owner_id from dogs),select count(*) from owners where owner_id not in ( select owner_id from dogs ),select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )
SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs ),SELECT COUNT(*) AS owners_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL;,SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_adopted IS NULL AND date_departed IS NULL),SELECT count(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs),SELECT COUNT(DISTINCT o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id AND d.date_departed IS NULL WHERE d.dog_id IS NULL,select count(*) from owners where owner_id not in (select owner_id from dogs),select count(*) from owners where owner_id not in (select owner_id from dogs),select count(*) from Owners where  owners.owner_id not in (select Dogs.owner_id from Dogs  )
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(DISTINCT professionals.professional_id) FROM professionals LEFT JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.professional_id IS NULL;,SELECT COUNT(*) AS professionals_without_treatments FROM Professionals p WHERE NOT EXISTS (   SELECT 1   FROM Treatments t   WHERE t.professional_id = p.professional_id );,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments),SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);,select count(*) from professionals where professional_id not in (select professional_id from treatments),select count(*) from professionals where professional_id not in ( select professional_id from treatments ),select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )
SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) FROM professionals WHERE professional_id NOT IN (SELECT professional_id FROM treatments);,SELECT COUNT(*)  FROM Professionals p WHERE NOT EXISTS (   SELECT 1    FROM Treatments t   WHERE t.professional_id = p.professional_id );,SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments),SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments),SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);,select count(*) from professionals where professional_id not in (select professional_id from treatments),select count(*) from professionals where professional_id not in ( select professional_id from treatments ),select count(*) from Professionals where  professionals.professional_id not in (select Treatments.professional_id from Treatments  )
"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1;","SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;","SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'","SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1","SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1","select name, age, weight from dogs where abandoned_yn = 1 and abandoned_yn = 0","select name, age, weight from dogs where abandoned_yn = 1 or abandoned_yn = 0","select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1"
"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.abandoned_yn = 1;","SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1;","SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'","SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1","SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1","select name, age, weight from dogs where abandoned_yn = 1 and abandoned_yn = 0","select name, age, weight from dogs where abandoned_yn = 1 and 0 = 'no'","select dogs.name , dogs.age , dogs.weight from Dogs where  dogs.abandoned_yn = 1"
SELECT avg(age) FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT AVG(age) FROM dogs;,SELECT AVG(age) AS average_age FROM Dogs;,SELECT avg(age) FROM Dogs,SELECT AVG(age) FROM Dogs,SELECT AVG(age) FROM Dogs;,select avg(age) from dogs,select avg(age) from dogs,select avg(dogs.age) from Dogs
SELECT avg(age) FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT AVG(age) FROM dogs;,SELECT AVG(age) AS average_age FROM Dogs;,SELECT avg(age) FROM Dogs,SELECT AVG(age) FROM Dogs,SELECT AVG(age) FROM Dogs;,select avg(age) from dogs,select avg(age) from dogs,select avg(dogs.age) from Dogs
SELECT max(age) FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT MAX(age) FROM dogs;,SELECT MAX(age) FROM Dogs;,SELECT max(age) FROM Dogs,SELECT MAX(age) FROM Dogs,SELECT MAX(age) FROM Dogs,select max(age) from dogs,select age from dogs order by age desc limit 1,select dogs.age from Dogs   order by dogs.age desc limit 1
SELECT max(age) FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT max(age) AS oldest_dog_age FROM dogs;,SELECT MAX(age) FROM Dogs;,SELECT Age FROM Dogs ORDER BY Age DESC LIMIT 1,SELECT MAX(age) FROM Dogs,SELECT MAX(age) FROM Dogs,select max(age) from dogs,select age from dogs order by age desc limit 1,select dogs.age from Dogs   order by dogs.age desc limit 1
"SELECT charge_type ,  charge_amount FROM Charges",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT charge_type, charge_amount FROM charges;","SELECT charge_type, charge_amount FROM Charges;","SELECT charge_type , sum(charge_amount) FROM Charges GROUP BY charge_type","SELECT charge_type, charge_amount FROM Charges","SELECT charge_type, charge_amount FROM Charges","select charge_type, charge_amount from charges group by charge_type","select charge_type, charge_amount from charges group by charge_type","select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
"SELECT charge_type ,  charge_amount FROM Charges",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT charge_type, charge_amount FROM charges;","SELECT charge_type, charge_amount FROM Charges;","SELECT charge_type , charge_amount FROM Charges;","SELECT charge_type, charge_amount FROM Charges","SELECT charge_type, charge_amount FROM Charges","select charge_type, charge_amount from charges group by charge_type","select charge_type, charge_amount from charges group by charge_type","select charges.charge_type , sum(charges.charge_amount) from Charges  group by charges.charge_type"
SELECT max(charge_amount) FROM Charges,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT MAX(charge_amount) FROM charges,SELECT MAX(charge_amount) AS most_expensive_charge FROM Charges;,"SELECT charge_type, charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1",SELECT MAX(charge_amount) FROM Charges,SELECT MAX(charge_amount) FROM Charges;,select charge_amount from charges order by charge_type desc limit 1,"select charge_type, charge_amount from charges group by charge_type order by sum(charge_amount) desc limit 1",select charges.charge_type from Charges   order by charges.charge_amount desc limit 1
SELECT max(charge_amount) FROM Charges,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT charge_amount FROM charges WHERE charge_type = ( SELECT charge_type FROM charges ORDER BY charge_amount DESC LIMIT 1 ),SELECT MAX(charge_amount) AS max_charge_amount FROM Charges;,SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1,SELECT MAX(charge_amount) FROM Charges,SELECT MAX(charge_amount) FROM Charges,select charge_amount from charges order by charge_amount desc limit 1,select charge_amount from charges group by charge_type order by sum(charge_amount) desc limit 1,select charges.charge_amount from Charges   order by charges.charge_type desc limit 1
"SELECT email_address ,  cell_number ,  home_phone FROM professionals",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT email_address, cell_number, home_phone FROM professionals;","SELECT email_address, cell_number, home_phone FROM Professionals;","SELECT email_address, cell_number, home_phone FROM Professionals","SELECT email_address, cell_number, home_phone FROM Professionals","SELECT email_address, cell_number, home_phone FROM Professionals","select email_address, cell_number, home_phone from professionals","select email_address, cell_number, home_phone from professionals","select professionals.email_address , professionals.cell_number , professionals.home_phone from Professionals"
"SELECT email_address ,  cell_number ,  home_phone FROM professionals",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals;","SELECT email_address, cell_number, home_phone FROM Professionals;","SELECT email_address , cell_number , home_phone FROM Professionals","SELECT email_address, cell_number, home_phone FROM Professionals","SELECT email_address, cell_number, home_phone FROM Professionals","select email_address, cell_number, home_phone from professionals","select email_address, cell_number, home_phone from professionals","select professionals.email_address , professionals.cell_number , professionals.home_phone from Professionals"
"SELECT DISTINCT breed_code ,  size_code FROM dogs",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT breeds.breed_name, sizes.size_description FROM breeds, sizes, dogs WHERE dogs.breed_code = breeds.breed_code AND dogs.size_code = sizes.size_code","SELECT b.breed_name, s.size_description FROM Breeds b CROSS JOIN Sizes s;","SELECT B.breed_name, S.size_description FROM Breeds B, Sizes S","SELECT breed_name, size_description FROM Breeds, Sizes","SELECT breeds.breed_name, sizes.size_description FROM breeds CROSS JOIN sizes;","select distinct breed_code, sizes.size_description from breeds join sizes on breeds.breed_code = sizes.size_code","select breeds.breed_name, sizes.size_code from breeds join sizes on breed_code = sizes.size_code union select breeds.breed_name, sizes.size_code from breeds join sizes on breed_code = sizes.size_code","select distinct dogs.breed_code , sizes.size_description from Dogs join Sizes on Dogs.size_code = Sizes.size_code"
"SELECT DISTINCT breed_code ,  size_code FROM dogs",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code;","SELECT DISTINCT breed_code, size_code FROM Dogs;","SELECT DISTINCT B.breed_name, S.size_description FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Sizes AS S ON D.size_code = S.size_code","SELECT DISTINCT T1.breed_name, T2.size_description FROM Dogs AS T3 JOIN Breeds AS T1 ON T3.breed_code = T1.breed_code JOIN Sizes AS T2 ON T3.size_code = T2.size_code","SELECT DISTINCT breeds.breed_name, sizes.size_description FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN sizes ON dogs.size_code = sizes.size_code","select distinct breed_code, size_code from dogs","select distinct t1.breed_name, t2.size_code from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code join sizes as t3 on t2.size_code = t3.size_code","select distinct dogs.breed_code , dogs.size_code from Dogs"
"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON treatments.professional_id = professionals.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;","SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code","SELECT T1.first_name , T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code","SELECT T1.first_name, T2.treatment_type_description FROM Professionals AS T1 JOIN Treatments AS T3 ON T1.professional_id = T3.professional_id JOIN Treatment_Types AS T2 ON T3.treatment_type_code = T2.treatment_type_code","SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code","select professionals.first_name, treatment_types.treatment_type_description from treatments join professionals on treatments.professional_id = professionals.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code","select t2.first_name, t3.treatment_type_description from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t1.treatment_type_code = t3.treatment_type_code","select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code;","SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code","SELECT T2.first_name , T3.treatment_type_description FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_Types AS T3 ON T1.treatment_type_code = T3.treatment_type_code","SELECT P.first_name, TT.treatment_type_description FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id JOIN Treatment_Types AS TT ON T.treatment_type_code = TT.treatment_type_code","SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id = treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code","select professionals.first_name, treatment_types.treatment_type_description from treatments join professionals on treatments.professional_id = professionals.professional_id join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code","select t2.first_name, t3.treatment_type_description from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t1.treatment_type_code = t3.treatment_type_code","select professionals.first_name , treatment_types.treatment_type_description from Treatments join Professionals on Treatments.professional_id = Professionals.professional_id join Treatment_Types on Treatments.treatment_type_code = Treatment_Types.treatment_type_code"
SELECT count(*) FROM singer,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT COUNT(*) FROM singer;,SELECT COUNT(*) FROM singer;,SELECT count(*) FROM singer,SELECT COUNT(*) FROM singer,SELECT COUNT(Singer_ID) FROM singer;,select count(*) from singer,select count(*) from singer,select count(*) from singer
SELECT count(*) FROM singer,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT COUNT(*) FROM singer;,SELECT COUNT(*) FROM singer;,SELECT count(*) FROM singer,SELECT COUNT(*) FROM singer,SELECT COUNT(*) FROM singer;,select count(*) from singer,select count(*) from singer,select count(*) from singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT name FROM singer ORDER BY net_worth_millions ASC;,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,select name from singer order by net_worth_millions asc,select name from singer order by net_worth_millions asc,select singer.name from singer   order by singer.net_worth_millions asc
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT name FROM singer ORDER BY net_worth_millions ASC;,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,select name from singer order by net_worth_millions asc,select name from singer order by net_worth_millions asc,select singer.name from singer   order by singer.net_worth_millions asc
"SELECT Birth_Year ,  Citizenship FROM singer",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT birth_year, citizenship FROM singer;","SELECT Birth_Year, Citizenship FROM singer;","SELECT Birth_Year , Citizenship FROM singer","SELECT Birth_Year, Citizenship FROM singer","SELECT Birth_Year, Citizenship FROM singer","select birth_year, citizenship from singer","select birth_year, citizenship from singer","select singer.birth_year , singer.citizenship from singer"
"SELECT Birth_Year ,  Citizenship FROM singer",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT birth_year, citizenship FROM singer;","SELECT Birth_Year, Citizenship FROM singer;","SELECT Birth_Year , Citizenship FROM singer","SELECT Birth_Year, Citizenship FROM singer","SELECT Birth_Year, Citizenship FROM singer","select birth_year, citizenship from singer","select birth_year, citizenship from singer","select singer.birth_year , singer.citizenship from singer"
"SELECT Name FROM singer WHERE Citizenship != ""France""",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT name FROM singer WHERE citizenship != 'France';,SELECT Name FROM singer WHERE Citizenship <> 'France';,"SELECT Name FROM singer WHERE Citizenship != ""France""",SELECT Name FROM singer WHERE Citizenship != 'France',SELECT Name FROM singer WHERE Citizenship != 'France';,"select name from singer where citizenship!= ""France""","select name from singer where citizenship!= ""France""","select singer.name from singer where  singer.citizenship != ""France"""
"SELECT Name FROM singer WHERE Citizenship != ""France""",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT name FROM singer WHERE citizenship != 'French';,SELECT Name FROM singer WHERE Citizenship <> 'France';,SELECT Name FROM singer WHERE Citizenship != 'French',SELECT Name FROM singer WHERE Citizenship != 'French',SELECT Name FROM singer WHERE Citizenship != 'France';,"select name from singer where citizenship!= ""France""","select name from singer where citizenship!= ""France""","select singer.name from singer where  singer.citizenship != ""French"""
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT name FROM singer WHERE birth_year = 1948 OR birth_year = 1949;,"SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);",SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949,"SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)","SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);",select name from singer where birth_year = 1948 or birth_year = 1949,select name from singer where birth_year = 1948 or birth_year = 1949,select singer.name from singer where  singer.birth_year = 1948 or singer.birth_year = 1949
SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT name FROM singer WHERE birth_year IN (1948, 1949);","SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);",SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949,"SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)","SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)",select name from singer where birth_year = 1948 or birth_year = 1949,select name from singer where birth_year = 1948 or birth_year = 1949,select singer.name from singer where  singer.birth_year = 1948 or singer.birth_year = 1949
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,select name from singer order by net_worth_millions desc limit 1,select name from singer order by net_worth_millions desc limit 1,select singer.name from singer   order by singer.net_worth_millions desc limit 1
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1;,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,select name from singer order by net_worth_millions desc limit 1,select name from singer order by net_worth_millions desc limit 1,select singer.name from singer   order by singer.net_worth_millions desc limit 1
"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT citizenship, COUNT(*) as num_singers FROM singer GROUP BY citizenship;","SELECT Citizenship, COUNT(*) AS num_singers FROM singer GROUP BY Citizenship;","SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship","SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship","SELECT COUNT(Singer_ID) AS Number_of_Singers, Citizenship FROM singer GROUP BY Citizenship","select citizenship, count(*) from singer group by citizenship","select citizenship, count(*) from singer group by citizenship","select singer.citizenship , count(*) from singer  group by singer.citizenship"
"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT citizenship, COUNT(singer_id) FROM singer GROUP BY citizenship;","SELECT Citizenship, COUNT(*) AS num_singers FROM singer GROUP BY Citizenship;","SELECT Citizenship , COUNT(*) FROM singer GROUP BY Citizenship","SELECT COUNT(*) ,  Citizenship FROM singer GROUP BY Citizenship","SELECT COUNT(Singer_ID) AS NumberOfSingers, Citizenship FROM singer GROUP BY Citizenship","select citizenship, count(*) from singer group by citizenship","select citizenship, count(*) from singer group by citizenship","select singer.citizenship , count(*) from singer  group by singer.citizenship"
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1,"SELECT Citizenship, COUNT(*) as count FROM singer GROUP BY Citizenship ORDER BY count DESC LIMIT 1","SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship ORDER BY NumberOfSingers DESC LIMIT 1;",select citizenship from singer group by citizenship order by count(*) desc limit 1,select citizenship from singer group by citizenship order by count(*) desc limit 1,select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1
select citizenship from singer group by citizenship order by count(*) desc limit 1,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1,"SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship ORDER BY NumberOfSingers DESC LIMIT 1;",select citizenship from singer group by citizenship order by count(*) desc limit 1,select citizenship from singer group by citizenship order by count(*) desc limit 1,select singer.citizenship from singer  group by singer.citizenship  order by count(*) desc limit 1
"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT citizenship, MAX(net_worth_millions) AS max_net_worth FROM singer GROUP BY citizenship;","SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;","SELECT ""Citizenship"", max(""Net_Worth_Millions"") FROM singer GROUP BY ""Citizenship""","SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",SELECT GROUP BY Citizenship ORDER BY MAX(Net_Worth_Millions) DESC;,"select citizenship, max(net_worth_millions) from singer group by citizenship","select citizenship, max(net_worth_millions) from singer group by citizenship","select singer.citizenship , max(singer.net_worth_millions) from singer  group by singer.citizenship"
"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT citizenship, MAX(net_worth_millions) FROM singer GROUP BY citizenship;","SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;","SELECT Citizenship , max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","SELECT MAX(Net_Worth_Millions), Citizenship FROM singer GROUP BY Citizenship","SELECT MAX(Net_Worth_Millions) AS Max_Net_Worth, Citizenship FROM singer GROUP BY Citizenship;","select citizenship, max(net_worth_millions) from singer group by citizenship","select max(net_worth_millions), citizenship from singer group by citizenship","select max(singer.net_worth_millions) , singer.citizenship from singer  group by singer.citizenship"
"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;","SELECT song.Title, singer.Name FROM song  JOIN singer ON song.Singer_ID = singer.Singer_ID;","SELECT T1.Title , T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID","SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID","SELECT titles, names FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID;","select song.title, singer.name from singer join song on singer.singer_id = song.singer_id","select t2.title, t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id","select song.title , singer.name from song join singer on song.Singer_ID = singer.Singer_ID"
"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;","SELECT song.Title, singer.Name FROM song  JOIN singer ON song.Singer_ID = singer.Singer_ID;","SELECT song.Title , singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID","SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID","SELECT Title, Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID","select song.title, singer.name from singer join song on singer.singer_id = song.singer_id","select t3.title, t2.name from song as t1 join singer as t2 on t1.singer_id = t2.singer_id join song as t3 on t1.song_id = t3.song_id","select song.title , singer.name from song join singer on song.Singer_ID = singer.Singer_ID"
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT DISTINCT singer.name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;,SELECT DISTINCT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000;,SELECT DISTINCT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song WHERE Sales > 300000),SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000,SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;,select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000,select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000,select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT name FROM singer WHERE singer_id IN ( SELECT singer_id FROM song WHERE sales > 300000 );,SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   WHERE Sales > 300000 );,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000,SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;,select distinct singer.name from singer join song on singer.singer_id = song.singer_id where song.sales > 300000,select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000,select distinct singer.name from song join singer on song.Singer_ID = singer.Singer_ID where  song.sales > 300000
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT name FROM singer WHERE singer_id IN ( SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(song_id) > 1 );,SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 );,SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name HAVING COUNT(*) > 1,"SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name HAVING count(*) > 1",SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(sg.Song_ID) > 1,select singer.name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count(*) > 1,select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t2.singer_id having count(*) > 1,select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT singer.name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1;,SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 );,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(*) > 1,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING count(*) > 1,SELECT s.Name FROM singer s JOIN song sg ON s.Singer_ID = sg.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(sg.Song_ID) > 1,select singer.name from singer join song on singer.singer_id = song.singer_id group by song.singer_id having count(*) > 1,select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id group by t2.singer_id having count(*) > 1,select singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id having  count(*) > 1
"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;","SELECT s.Name, SUM(g.Sales) AS Total_Sales FROM singer s JOIN song g ON s.Singer_ID = g.Singer_ID GROUP BY s.Name;","SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name","SELECT T1.Name, sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name","SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name","select singer.name, sum(song.sales) from singer join song on singer.singer_id = song.singer_id group by singer.name","select t2.name, sum(t1.sales) from song as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.name","select singer.name , sum(song.sales) from song join singer on song.Singer_ID = singer.Singer_ID  group by song.singer_id"
"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT name, SUM(sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY name;","SELECT s.Name, SUM(g.Sales) AS Total_Sales FROM singer s JOIN song g ON s.Singer_ID = g.Singer_ID GROUP BY s.Name;","SELECT T1.Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name","SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID, T1.Name","SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name","select singer.name, sum(song.sales) from singer join song on singer.singer_id = song.singer_id group by singer.name","select t2.name, sum(t1.sales) from song as t1 join singer as t2 on t1.singer_id = t2.singer_id group by t2.name","select sum(song.sales) , singer.name from song join singer on song.Singer_ID = singer.Singer_ID  group by singer.name"
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song),SELECT Name FROM singer WHERE Singer_ID NOT IN (   SELECT Singer_ID   FROM song );,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),SELECT Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL,select name from singer where singer_id not in (select singer_id from song),select name from singer where singer_id not in (select singer_id from song),select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL;,SELECT Name FROM singer WHERE Singer_ID NOT IN (   SELECT Singer_ID   FROM song );,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),SELECT Name FROM singer LEFT JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Song_ID IS NULL,select name from singer where singer_id not in (select singer_id from song),select name from singer where singer_id not in (select singer_id from song),select singer.name from singer where  singer.singer_id not in (select song.Singer_ID from song  )
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;,SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;,SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955,SELECT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) AND Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955),SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship,select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955,select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955,select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955;,SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;,SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955,SELECT Citizenship FROM singer WHERE Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year < 1945) AND Citizenship IN (SELECT Citizenship FROM singer WHERE Birth_Year > 1955),SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship,select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955,select citizenship from singer where birth_year < 1945 intersect select citizenship from singer where birth_year > 1955,select singer.citizenship from singer where  singer.birth_year < 1945   intersect select singer.citizenship from singer where  singer.birth_year > 1955
SELECT count(*) FROM Other_Available_Features,real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
",SELECT COUNT(*) FROM other_available_features;,SELECT COUNT(*) AS total_features FROM Other_Available_Features;,SELECT count(*) FROM Other_Available_Features,SELECT COUNT(*) FROM Other_Available_Features,SELECT COUNT(*) FROM Other_Available_Features,select count(*) from other_available_features,select count(*) from other_available_features,select count(*) from Other_Available_Features
"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  ""AirCon""",real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
",SELECT ref_feature_types.feature_type_name FROM other_available_features JOIN ref_feature_types ON other_available_features.feature_type_code = ref_feature_types.feature_type_code WHERE other_available_features.feature_name = 'AirCon';,SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (   SELECT feature_type_code   FROM Other_Available_Features   WHERE feature_name = 'AirCon' );,"SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = ""AirCon"";",SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon',SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon'),"select ref_feature_types.feature_type_name from ref_feature_types join other_available_features on ref_feature_types.feature_type_code = other_available_features.feature_type_code where other_available_features.feature_name = ""AirCon""","select t1.feature_type_name from ref_feature_types as t1 join other_available_features as t2 on t1.feature_type_code = t2.feature_type_code where t2.feature_name = ""AirCon""","select ref_feature_types.feature_type_name from Other_Available_Features join Ref_Feature_Types on Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code where  other_available_features.feature_name = ""AirCon"""
SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code,real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
","SELECT ref_property_types.property_type_description FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE properties.property_type_code = ""code"";","SELECT p.property_type_code, pt.property_type_description FROM Properties p JOIN Ref_Property_Types pt ON p.property_type_code = pt.property_type_code;",SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties),SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code,"SELECT property_type_code, property_type_description FROM Ref_Property_Types;",select ref_property_types.property_type_description from ref_property_types join properties on properties.property_type_code = ref_property_types.property_type_code,select t1.property_type_description from ref_property_types as t1 join properties as t2 on t1.property_type_code = t2.property_type_code,"select ref_property_types.property_type_description from Properties join Ref_Property_Types on Properties.property_type_code = Ref_Property_Types.property_type_code where  properties.property_type_code = ""C"""
"SELECT property_name FROM Properties WHERE property_type_code  =  ""House"" UNION SELECT property_name FROM Properties WHERE property_type_code  =  ""Apartment"" AND room_count  >  1",real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
","SELECT properties.property_name FROM properties JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE ref_property_types.property_type_description IN ('House', 'Apartment') AND properties.room_count > 1",SELECT property_name FROM Properties WHERE (property_type_code = 'Apartment' OR property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description LIKE '%House%')) AND room_count > 1;,"SELECT property_name FROM Properties WHERE (property_type_code IN (SELECT property_type_code FROM Ref_Property_Types WHERE property_type_description IN ('House', 'Apartment')) AND room_count > 1)",SELECT P.property_name FROM Properties AS P JOIN Ref_Property_Types AS RPT ON P.property_type_code = RPT.property_type_code WHERE (RPT.property_type_description = 'house' OR RPT.property_type_description = 'apartment') AND P.room_count > 1,SELECT property_name FROM Properties WHERE (property_type_code = 'House' OR property_type_code = 'Apartment') AND room_count > 1,"select property_name from properties where property_type_code = ""House"" or room_count > 1",select property_name from properties where property_type_code = 'House' or room_count > 1,"select properties.property_name from Properties where  properties.property_type_code = ""House""   union select properties.property_name from Properties where  properties.property_type_code = ""Apartment"" and properties.room_count > 1"
