gold,db_name,db_schema,Claude,GPT4Turbo,RASAT+PICARD,STAR
"SELECT Count ( * )  ,  T2.FullName  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT m.FullName, COUNT(l.ModelId) AS model_count FROM car_makers m JOIN model_list l ON m.Id = l.Maker GROUP BY m.FullName;","SELECT COUNT(model_list.ModelId) AS ModelCount, car_makers.FullName FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.FullName","select count(*), t1.fullname from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.fullname","SELECT model_list.Maker , COUNT(*) FROM model_list JOIN car_makers GROUP BY model_list.Maker"
SELECT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id order by count ( * )  desc limit 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT c.Model, COUNT(*) AS count FROM cars_data d JOIN car_names c ON d.Id = c.MakeId GROUP BY c.Model ORDER BY count DESC LIMIT 5;","SELECT car_names.Model, COUNT(*) AS Popularity FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.Model ORDER BY Popularity DESC",select model from model_list group by model order by count ( * ) desc limit 1,SELECT model_list.Model FROM model_list GROUP BY model_list.Model ORDER BY COUNT(*) DESC LIMIT 1
"SELECT Count ( * )  ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id GROUP BY T2.id having count ( * )   > =  3",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT m.FullName FROM car_makers m JOIN model_list l ON m.Id = l.Maker GROUP BY m.FullName HAVING COUNT(l.ModelId) >= 3;,"SELECT car_makers.FullName, COUNT(model_list.ModelId) AS ModelCount FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id GROUP BY car_makers.FullName HAVING COUNT(model_list.ModelId) >= 3",select t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.maker having count ( * ) > 3,"SELECT car_makers.Maker FROM model_list JOIN car_makers GROUP BY car_makers.Id HAVING COUNT(*) >= ""value"""
SELECT name FROM singer,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Name FROM singer,SELECT Name FROM singer;,select name from singer,SELECT singer.Name FROM singer
"SELECT T2.name ,  count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id GROUP BY T2.singer_id",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM singer s LEFT JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID LEFT JOIN concert c ON sic.concert_ID = c.concert_ID GROUP BY s.Name","SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS NumberOfConcerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;","select t1.name, count ( * ) from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id group by t1.singer_id","SELECT singer.Name , COUNT(*) FROM singer_in_concert JOIN singer GROUP BY singer_in_concert.Singer_ID"
SELECT count ( distinct template_id )  FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(DISTINCT Template_ID) FROM Templates;,SELECT COUNT(DISTINCT Template_ID) FROM Templates,select count ( distinct template_id ) from documents,SELECT COUNT(Documents.Template_ID) FROM Documents
SELECT count ( template_id )  FROM Documents GROUP BY template_id HAVING count ( * )   >  1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*)  FROM (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   HAVING COUNT(*) > 1 ) t;,SELECT COUNT(Template_ID)  FROM Documents  GROUP BY Template_ID  HAVING COUNT(Document_ID) > 1,select count ( * ) from ( select template_id from documents group by template_id having count ( * ) > 1 ),"SELECT COUNT(*) FROM ( SELECT Documents.Template_ID FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > ""value"" )"
SELECT document_id FROM Documents GROUP BY template_id HAVING count ( * )   >  1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT d.Document_ID, d.Document_Name, d.Template_ID FROM Documents d WHERE d.Template_ID IN (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   HAVING COUNT(*) > 1 );","SELECT Template_ID, Document_ID, Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1)","select t1.document_name, t2.template_id from documents as t1 join templates as t2 on t1.template_id = t2.template_id group by t2.template_id having count ( * ) > 1","SELECT Documents.Template_ID , Documents.Document_Name FROM Documents GROUP BY Documents.Template_ID HAVING COUNT(*) > ""value"""
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id   =   T2.address_id WHERE T2.country   =   'Haiti',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti';,SELECT first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti';,"select t2.first_name from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t1.country = ""Haiti""","SELECT Students.first_name FROM Students JOIN Addresses WHERE Addresses.country = ""value"""
SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT first_name  FROM Students WHERE cell_mobile_number = '09700166582';,SELECT first_name FROM Students WHERE cell_mobile_number = '09700166582';,"select first_name from students where cell_mobile_number = ""09700166582""","SELECT Students.first_name FROM Students WHERE Students.cell_mobile_number = ""value"""
"SELECT T1.last_name, * FROM Students as T1 join addresses as T2 on T1.current_address_id  =  T2.address_id WHERE T1.cell_mobile_number  =  '09700166582'",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT last_name, line_1, line_2, line_3, city, zip_postcode, state_province_county, country  FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE cell_mobile_number = '09700166582';","SELECT last_name, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Students.cell_mobile_number = '09700166582';","select t2.current_address_id from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t2.cell_mobile_number = ""09700166582""","SELECT Students.last_name , Students.current_address_id FROM Students WHERE Students.cell_mobile_number = ""value"""
SELECT email_address FROM Students where cell_mobile_number  =  '09700166582',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT last_name, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, email_address  FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE cell_mobile_number = '09700166582';","SELECT last_name, Addresses.line_1, Addresses.line_2, Addresses.line_3, Addresses.city, Addresses.zip_postcode, Addresses.state_province_county, Addresses.country, Students.email_address FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Students.cell_mobile_number = '09700166582';","select t2.email_address from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t2.cell_mobile_number = ""09700166582""","SELECT Students.email_address FROM Students WHERE Students.cell_mobile_number = ""value"""
SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.year   =   2014,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID AND c.Year = 2014 WHERE c.concert_ID IS NULL;,SELECT stadium.Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID AND concert.Year = 2014 WHERE concert.concert_ID IS NULL;,select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014,"SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN ( SELECT concert.Stadium_ID FROM concert WHERE concert.Year = ""value"" )"
select Capacity from stadium where name  =  'Balmoor',concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Capacity FROM stadium WHERE Name = 'Balmoor';,SELECT Capacity FROM stadium WHERE Name = 'Balmoor';,"select capacity from stadium where name = ""Balmoor""","SELECT stadium.Capacity FROM stadium WHERE stadium.Name = ""value"""
select T2.Theme from stadium as T1 join concert as T2 on T1.Stadium_ID  =  T2.Stadium_ID where T1.Name  =  'Balmoor',concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT c.Theme FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Name = 'Balmoor';,SELECT concert.Theme FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID WHERE stadium.Name = 'Balmoor';,"select t2.theme from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id where t1.name = ""Balmoor""","SELECT concert.Theme FROM stadium JOIN concert WHERE stadium.Name = ""value"""
SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*)  FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.gender = 0;,SELECT COUNT(DISTINCT dogs.dog_id) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.gender = 0;,"select count ( * ) from dogs where gender = ""F""","SELECT COUNT(*) FROM Treatments JOIN Dogs WHERE Dogs.gender = ""value"""
SELECT age FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT d.age FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.gender = 0;,SELECT DISTINCT dogs.age FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE dogs.gender = 0;,"select t1.age from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.gender = ""F""","SELECT Dogs.age FROM Treatments JOIN Dogs WHERE Dogs.gender = ""value"""
SELECT weight FROM Dogs WHERE age = 2 ORDER BY weight DESC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT MAX(weight) FROM Dogs WHERE age = 2;,SELECT MAX(weight) FROM dogs WHERE age = 2;,select max ( weight ) from dogs where age = 2,"SELECT MAX(Dogs.weight) FROM Dogs WHERE Dogs.age = ""value"""
SELECT COUNT ( * )  FROM teacher,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT COUNT(*) FROM teacher;,SELECT COUNT(*) FROM teacher,select count(*) from teacher,SELECT COUNT(*) FROM teacher
SELECT COUNT ( * )  FROM course_arrange,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT COUNT(*) FROM course;,SELECT COUNT(*) FROM course,select count ( * ) from course,SELECT COUNT(*) FROM course
"SELECT T2.Name , COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT t.Name, COUNT(ca.Course_ID) AS num_courses FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;","SELECT t.Name, COUNT(ca.Course_ID) AS NumberOfCourses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name","select t2.name, count ( * ) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id","SELECT teacher.Name , COUNT(*) FROM course_arrange JOIN course JOIN teacher GROUP BY course_arrange.Teacher_ID"
"SELECT Name , age FROM teacher",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT Name, Age FROM teacher;","SELECT Name, Age FROM teacher","select t2.name, t2.age from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.name",SELECT teacher.Age FROM teacher
"SELECT latin_commander FROM battle WHERE name  =  ""Battle of Serres""",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT latin_commander  FROM battle WHERE name = 'Battle of Serres';,SELECT latin_commander FROM battle WHERE name = 'Battle of Serres';,"select latin_commander from battle where name = ""Battle of Serres""","SELECT battle.latin_commander FROM battle WHERE battle.name = ""value"""
"SELECT result FROM battle WHERE date  =  ""31 January 1206""",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT result  FROM battle WHERE date = '31 January 1206';,SELECT result FROM battle WHERE date = '31 January 1206';,select result from battle where date = '31.01.1206',"SELECT battle.result FROM battle WHERE battle.date = ""value"""
"SELECT bulgarian_commander FROM battle WHERE date  =  ""June 1205""",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT bulgarian_commander FROM battle WHERE date = 'June 1205';,SELECT bulgarian_commander FROM battle WHERE date = 'June 1205';,"select bulgarian_commander from battle where date = ""June 1205""","SELECT battle.bulgarian_commander FROM battle WHERE battle.date = ""value"""
"SELECT name FROM battle WHERE latin_commander  =  ""Baldwin I""",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT name FROM battle WHERE latin_commander = 'Baldwin I';,SELECT name FROM battle WHERE latin_commander = 'Baldwin I';,"select name from battle where latin_commander = ""Baldwin I""","SELECT battle.name FROM battle WHERE battle.latin_commander = ""value"""
SELECT count ( * )  FROM TV_Channel,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT COUNT(*) FROM TV_Channel;,SELECT COUNT(*) FROM TV_Channel;,select count ( * ) from tv_channel,SELECT COUNT(*) FROM TV_Channel
SELECT language FROM TV_Channel where series_name = 'Sky Music',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Language  FROM TV_Channel WHERE series_name = 'Sky Music';,SELECT Language FROM TV_Channel WHERE series_name = 'Sky Music';,"select language from tv_channel where series_name = ""Sky Music""","SELECT TV_Channel.Language FROM TV_Channel WHERE TV_Channel.series_name = ""value"""
SELECT title FROM Cartoon where id = 2.0,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Title FROM Cartoon WHERE id = 2.0;,SELECT Title FROM Cartoon WHERE id = 2.0;,select title from cartoon where id = 2,"SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.id = ""value"""
SELECT Horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MAX(Horsepower) FROM cars_data;,SELECT MAX(Horsepower) FROM cars_data,select max ( horsepower ) from cars_data,SELECT MAX(cars_data.Horsepower) FROM cars_data
SELECT count ( * )  FROM CARS_DATA,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM cars_data;,SELECT COUNT(*) FROM cars_data,select count ( * ) from cars_data,SELECT COUNT(*) FROM cars_data
SELECT sum ( cylinders )  FROM CARS_DATA,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(DISTINCT Cylinders) FROM cars_data;,SELECT COUNT(DISTINCT Cylinders) FROM cars_data,select count ( cylinders ) from cars_data,SELECT COUNT(cars_data.Cylinders) FROM cars_data
SELECT district FROM shop ORDER BY number_products DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT District FROM shop ORDER BY Number_products DESC LIMIT 1;,"SELECT District, SUM(Number_products) AS TotalProducts FROM shop GROUP BY District ORDER BY TotalProducts DESC LIMIT 1;",select district from shop group by district order by sum(number_products) desc limit 1,SELECT shop.District FROM shop ORDER BY shop.Number_products DESC LIMIT 1
SELECT manager_name FROM shop ORDER BY number_products DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Manager_name  FROM shop WHERE District = (   SELECT District    FROM shop   ORDER BY Number_products DESC   LIMIT 1 );,SELECT Manager_name FROM shop WHERE District IN (SELECT District FROM shop GROUP BY District ORDER BY SUM(Number_products) DESC LIMIT 1);,select manager_name from shop order by number_products desc limit 1,SELECT shop.Manager_name FROM shop ORDER BY shop.Number_products DESC LIMIT 1
SELECT number_products FROM shop ORDER BY number_products DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Number_products FROM shop WHERE District = (   SELECT District   FROM shop   ORDER BY Number_products DESC   LIMIT 1 );,SELECT Number_products FROM shop WHERE Manager_name = (SELECT Manager_name FROM shop WHERE District IN (SELECT District FROM shop GROUP BY District ORDER BY SUM(Number_products) DESC LIMIT 1));,"select sum ( number_products ) from shop where manager_name = ""Zach""",SELECT shop.Number_products FROM shop ORDER BY shop.Number_products DESC LIMIT 1
SELECT location FROM shop ORDER BY number_products DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Location FROM shop WHERE District = (   SELECT District   FROM shop   ORDER BY Number_products DESC   LIMIT 1 );,SELECT Location FROM shop WHERE District IN (SELECT District FROM shop GROUP BY District ORDER BY SUM(Number_products) DESC LIMIT 1);,select location from shop order by number_products desc limit 1,SELECT shop.District FROM shop ORDER BY shop.Number_products DESC LIMIT 1
SELECT shop_ID FROM shop ORDER BY number_products DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Shop_ID FROM shop WHERE District = (   SELECT District   FROM shop   ORDER BY Number_products DESC   LIMIT 1 );,SELECT Shop_ID FROM shop WHERE District IN (SELECT District FROM shop GROUP BY District ORDER BY SUM(Number_products) DESC LIMIT 1);,select shop_id from shop where district = ( select district from shop group by district order by sum ( number_products ) desc limit 1 ),SELECT shop.Shop_ID FROM shop ORDER BY shop.Number_products DESC LIMIT 1
SELECT avg ( Population )  FROM city,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT AVG(Population) FROM city;,SELECT AVG(Population) FROM city,select avg ( population ) from city,SELECT AVG(city.Population) FROM city
SELECT District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city ) ,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT DISTINCT District  FROM city WHERE Population > (SELECT AVG(Population) FROM city);,SELECT DISTINCT District FROM city WHERE Population > (SELECT AVG(Population) FROM city),select distinct district from city where population > ( select avg ( population ) from city ),SELECT city.District FROM city WHERE city.Population > ( SELECT AVG(city.Population) FROM city )
"SELECT count ( * )  ,  District FROM city WHERE Population  >   ( SELECT avg ( Population )  FROM city )  GROUP BY District",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT District, COUNT(*) AS NumCitiesAboveAvg FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;","SELECT District, COUNT(*) AS CitiesCount FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District","select count ( * ), district from city where population > ( select avg ( population ) from city ) group by district","SELECT city.District , COUNT(*) FROM city WHERE city.Population > ( SELECT AVG(city.Population) FROM city ) GROUP BY city.District"
"SELECT Name FROM country WHERE GovernmentForm   =   ""US Territory""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Name FROM country WHERE GovernmentForm = 'US Territory';,SELECT Name FROM country WHERE GovernmentForm = 'US Territory',"select name from country where governmentform = ""US Territory""","SELECT country.Name FROM country WHERE country.GovernmentForm = ""value"""
"SELECT GNP, population FROM country WHERE GovernmentForm   =   ""US Territory""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Name, GNP, Population  FROM country WHERE GovernmentForm = 'US Territory';","SELECT Name, GNP, Population FROM country WHERE GovernmentForm = 'US Territory'","select name,gnp,population from country where governmentform = ""US Territory""","SELECT country.Name , country.GNP , country.Population FROM country WHERE country.GovernmentForm = ""value"""
"SELECT avg ( GNP )  ,  sum ( population )  FROM country WHERE GovernmentForm   =   ""US Territory""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT AVG(GNP) AS avg_gnp, SUM(Population) AS total_population FROM country  WHERE GovernmentForm = 'US Territory';","SELECT AVG(GNP) AS AverageGNP, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm = 'US Territory'","select avg ( gnp ), sum ( population ) from country where governmentform = ""US Territory""","SELECT AVG(country.GNP) , AVG(country.Population) FROM country WHERE country.GovernmentForm = ""value"""
"SELECT sum ( SurfaceArea )  FROM country WHERE Continent  =  ""Asia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent = 'Asia';,SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia',select sum ( surfacearea ) from country where continent = 'Asia',"SELECT SUM(country.SurfaceArea) FROM country WHERE country.Continent = ""value"""
SELECT LocalName FROM country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT LocalName FROM country;,SELECT LocalName FROM country,select localname from country,SELECT country.LocalName FROM country
"SELECT Code FROM country WHERE Name  =  ""Aruba""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Code FROM country WHERE Name = 'Aruba';,SELECT Code FROM country WHERE Name = 'Aruba',"select code from country where name = ""Aruba""","SELECT country.Code FROM country WHERE country.Name = ""value"""
SELECT count ( * )  FROM shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT COUNT(*) FROM shop;,SELECT COUNT(Shop_ID) FROM shop;,select count(*) from shop,SELECT COUNT(*) FROM shop
SELECT * FROM shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Name FROM shop;,SELECT Name FROM shop;,select name from shop,SELECT shop.Name FROM shop
SELECT count ( * )  FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t2.name,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT s.Name, COUNT(h.Employee_ID) AS num_employees FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;","SELECT Shop_ID, COUNT(Employee_ID) FROM hiring GROUP BY Shop_ID;","select t2.name, count ( * ) from hiring as t1 join employee as t2 on t1.employee_id = t2.employee_id group by t1.shop_id","SELECT shop.Name , COUNT(*) FROM hiring JOIN shop GROUP BY shop.Name"
SELECT name from singer,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Name FROM singer,SELECT Name FROM singer;,select name from singer,SELECT singer.Name FROM singer
"SELECT song_release_year from singer where Name  =  ""Joe Sharp"" and Song_Name  =  ""You""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Song_release_year FROM singer WHERE Name = 'Joe Sharp' AND Song_Name = 'You',SELECT Song_release_year FROM singer WHERE Name = 'Joe Sharp' AND Song_Name = 'You';,"select song_release_year from singer where name = ""Joe Sharp"" and song_name = ""You""","SELECT singer.Song_release_year FROM singer WHERE singer.Name = ""value"""
"SELECT count ( * )  FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id   =   T2.singer_id where T2.name  =  ""Joe Sharp"" GROUP BY T2.singer_id",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*)  FROM singer_in_concert sic JOIN singer s ON sic.Singer_ID = s.Singer_ID WHERE s.Name = 'Joe Sharp',SELECT COUNT(concert.concert_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Name = 'Joe Sharp';,"select count ( * ) from singer as t1 join singer_in_concert as t2 on t1.singer_id = t2.singer_id where t1.name = ""Joe Sharp""","SELECT COUNT(*) FROM concert JOIN singer_in_concert JOIN singer WHERE singer.Name = ""value"""
"SELECT country from singer where name  =  ""Joe Sharp""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Country FROM singer WHERE Name = 'Joe Sharp',SELECT Country FROM singer WHERE Name = 'Joe Sharp';,"select country from singer where name = ""Joe Sharp""","SELECT singer.Country FROM singer WHERE singer.Name = ""value"""
SELECT Continent FROM CONTINENTS,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Continent FROM continents;,SELECT Continents.Continent FROM continents,select continent from continents,SELECT continents.Continent FROM continents
"SELECT T1.ContId ,  T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;","SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent","select count ( * ), continent from countries group by continent","SELECT continents.Continent , countries.Continent , COUNT(*) FROM continents JOIN countries GROUP BY countries.Continent"
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T3.weight  <  3500,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Model  FROM model_list JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight < 3500;,SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Weight < 3500;,select t2.model from cars_data as t1 join model_list as t2 on t1.id = t2.modelid where t1.weight < 3500,"SELECT car_names.Model FROM car_names JOIN cars_data WHERE cars_data.Weight < ""value"""
"SELECT DISTINCT T3.Weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model   =   T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker   =   T4.Id WHERE T1.Model = ""bmw""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT cars_data.Weight FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'bmw';,SELECT Weight FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Make = 'BMW';,"select weight from cars_data where model = ""bmw"" and make = ""Made in Germany"" and weight = ""3500""","SELECT cars_data.Weight FROM car_names JOIN cars_data WHERE car_names.Model = ""value"""
SELECT Model FROM car_names WHERE MakeId = 2,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT FullName FROM car_makers WHERE Id = 2;,SELECT FullName FROM car_makers WHERE Id = 2;,select fullname from car_makers where id = 2,"SELECT car_names.Model FROM car_names WHERE car_names.MakeId = ""value"""
SELECT count ( * )  from country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM country;,SELECT COUNT(*) FROM country,select count ( * ) from country,SELECT COUNT(*) FROM country
SELECT count ( distinct GovernmentForm )  from country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT GovernmentForm) FROM country;,SELECT COUNT(DISTINCT GovernmentForm) FROM country,select count ( distinct governmentform ) from country,SELECT COUNT(country.GovernmentForm) FROM country
SELECT distinct GovernmentForm from country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT DISTINCT GovernmentForm FROM country;,SELECT DISTINCT GovernmentForm FROM country,select distinct governmentform from country,SELECT country.GovernmentForm FROM country
"SELECT count ( * )  from country where GovernmentForm  =  ""Republic""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';,SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%',"select count ( * ) from country where governmentform = ""Republic""","SELECT COUNT(*) FROM country WHERE country.GovernmentForm = ""value"""
"SELECT name from country where GovernmentForm  =  ""Republic""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Name FROM country WHERE GovernmentForm = 'Republic';,SELECT Name FROM country WHERE GovernmentForm LIKE '%Republic%',"select name from country where governmentform = ""Republic""","SELECT country.Name FROM country WHERE country.GovernmentForm = ""value"""
"SELECT T2.language from country as T1 join countrylanguage as T2 on T1.Code  =  T2.CountryCode where  T1.name  =  ""Latvia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Language FROM countrylanguage  WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Latvia');,SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Latvia'),"select t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.governmentform = ""Republic"" and t1.name = ""Latvia""","SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.Name = ""value"""
SELECT count ( * )  FROM AIRLINES,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM airlines;,SELECT COUNT(*) FROM airlines;,select count ( * ) from airlines,SELECT COUNT(*) FROM airlines
"SELECT Airline FROM AIRLINES WHERE Airline = ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT Airline  FROM airlines WHERE Country = 'USA';,SELECT Airline FROM airlines WHERE Country = 'USA';,select airline from airlines where country = 'United states of america',"SELECT airlines.Airline FROM airlines WHERE airlines.Country = ""value"""
"SELECT Abbreviation FROM AIRLINES WHERE Airline = ""US Airways""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT Abbreviation FROM airlines WHERE Airline = 'US Airways';,SELECT Abbreviation FROM airlines WHERE Airline = 'US Airways';,"select abbreviation from airlines where airline = ""US Airways""","SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = ""value"""
SELECT count ( * )  from singer,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT COUNT(*) FROM singer;,SELECT COUNT(Singer_ID) FROM singer;,select count ( * ) from singer,SELECT COUNT(*) FROM singer
"SELECT citizenship from singer where name  =  ""Alice Walton""",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT Citizenship FROM singer WHERE Name = 'Alice Walton';,SELECT Citizenship FROM singer WHERE Name = 'Alice Walton';,"select citizenship from singer where name = ""Alice Walton""","SELECT singer.Citizenship FROM singer WHERE singer.Name = ""value"""
SELECT Sales from song where song_id  =  3,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT Sales FROM song WHERE Song_ID = 3;,SELECT Sales FROM song WHERE Song_ID = 3;,select sales from song where song_id = 3,"SELECT song.Sales FROM song WHERE song.Song_ID = ""value"""
SELECT country FROM AIRLINES where Airline  =  'Delta Airlines',flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT Country  FROM airlines WHERE Airline = 'Delta Airlines';,SELECT Country FROM airlines WHERE Airline = 'Delta Airlines';,select country from airlines where airline = 'Delta',"SELECT airlines.Country FROM airlines WHERE airlines.Airline = ""value"""
SELECT DestAirport FROM flights where FlightNo  =  44,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT DestAirport FROM flights WHERE FlightNo = 44;,SELECT DestAirport FROM flights WHERE FlightNo = 44;,select destairport from flights where flightno = 44,"SELECT flights.DestAirport FROM flights WHERE flights.FlightNo = ""value"""
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  DESC LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1;","SELECT Airline, COUNT(*) AS NumberOfFlights FROM flights GROUP BY Airline ORDER BY NumberOfFlights DESC LIMIT 1;",select airline from flights group by airline order by count ( * ) desc limit 1,SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline ORDER BY COUNT(*) DESC LIMIT 1
SELECT  count ( distinct course_id )  from courses,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(DISTINCT course_id) FROM Courses;,SELECT COUNT(DISTINCT course_id) FROM Courses;,select count ( distinct course_id ) from courses,SELECT COUNT(Courses.course_id) FROM Courses
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id, c.course_name ORDER BY COUNT(sec.student_enrolment_id) ASC LIMIT 1;",SELECT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_id ORDER BY COUNT(Student_Enrolment_Courses.student_course_id) ASC LIMIT 1;,select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_id order by count ( * ) asc limit 1,SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses GROUP BY Courses.course_name ORDER BY COUNT(*) ASC LIMIT 1
SELECT  count ( * )  FROM concert,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*) FROM concert,SELECT COUNT(concert_ID) FROM concert;,select count ( * ) from concert,SELECT COUNT(*) FROM concert
"SELECT T2.name , count ( * )  FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name","SELECT s.Name, COUNT(c.concert_ID) AS NumberOfConcerts FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;","select t1.name, count ( * ) from stadium as t1 join concert as t2 on t1.stadium_id = t2.stadium_id group by t1.stadium_id","SELECT stadium.Name , COUNT(*) FROM concert JOIN stadium GROUP BY stadium.Stadium_ID"
"SELECT capacity from stadium where name  =  ""Stark s Park""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Capacity FROM stadium WHERE Name = 'Stark''s Park',SELECT Capacity FROM stadium WHERE Name = 'Stark's Park';,"select capacity from stadium where name = ""Stark's Park""","SELECT stadium.Capacity FROM stadium WHERE stadium.Name = ""value"""
SELECT concert_name from concert,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT concert_Name FROM concert,SELECT concert_Name FROM concert;,select distinct concert_name from concert,SELECT concert.concert_Name FROM concert
select count ( * )  from  ( SELECT distinct treatment_type_code from treatments ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(DISTINCT treatment_type_code) FROM Treatment_Types;,SELECT COUNT(DISTINCT treatment_type_code) FROM Treatment_Types,select count(distinct treatment_type_code) from treatments,SELECT COUNT(Treatments.treatment_id) FROM Treatments
SELECT * FROM Treatments ORDER BY cost_of_treatment DESC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT treatment_type_description FROM Treatment_Types INNER JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code ORDER BY cost_of_treatment DESC LIMIT 1;,"SELECT treatment_type_code, MAX(cost_of_treatment) FROM Treatments GROUP BY treatment_type_code ORDER BY MAX(cost_of_treatment) DESC LIMIT 1",select * from treatments order by cost_of_treatment desc limit 1,SELECT Treatments.treatment_id FROM Treatments ORDER BY Treatments.cost_of_treatment DESC LIMIT 1
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,select cost_of_treatment from treatments order by date_of_treatment desc limit 1,SELECT Treatments.cost_of_treatment FROM Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1
SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT a.Airline FROM airlines a LEFT JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200;,"SELECT COUNT(f.FlightNo), a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) < 200",select * from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t2.airline having count(*) < 200,"SELECT airlines.Airline FROM airlines JOIN flights GROUP BY airlines.Airline HAVING COUNT(*) < ""value"""
"SELECT T1.Airline, T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline HAVING count ( * )   <  200 limit 3",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT ap.Country FROM (   SELECT f.DestAirport   FROM airlines a   JOIN flights f ON a.uid = f.Airline   GROUP BY a.Airline   HAVING COUNT(f.FlightNo) < 200   LIMIT 3 ) t JOIN airports ap ON t.DestAirport = ap.AirportCode;,SELECT DISTINCT ap.Country FROM flights f JOIN airports ap ON f.DestAirport = ap.AirportCode ORDER BY f.FlightNo LIMIT 3,select t1.country from airlines as t1 join flights as t2 on t1.uid = t2.airline group by t2.airline having count ( * ) < 200,"SELECT airlines.Country FROM airlines JOIN flights GROUP BY airlines.Airline HAVING COUNT(*) < ""value"""
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )   >  1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) > 1;,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) > 1;,select nationality from people group by nationality having count ( * ) > 1,"SELECT people.Nationality FROM people GROUP BY people.Nationality HAVING COUNT(*) > ""value"""
SELECT People_ID FROM people WHERE Nationality  =  'Russia',poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT People_ID FROM people WHERE Nationality = 'Russia';,SELECT People_ID FROM people WHERE Nationality = 'Russia';,"select people_id from people where nationality = ""Russia""","SELECT people.People_ID FROM people WHERE people.Nationality = ""value"""
"SELECT People_ID, name FROM people WHERE Nationality  =  'Russia'",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Name FROM people WHERE Nationality = 'Russia';,"SELECT People_ID, Name FROM people WHERE Nationality = 'Russia';","select name, people_id from people where nationality = ""Russia""","SELECT people.People_ID , people.Name FROM people WHERE people.Nationality = ""value"""
SELECT avg ( loser_age )  FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT AVG(loser_age) FROM matches;,SELECT AVG(loser_age) FROM matches;,select avg(loser_age) from matches,SELECT AVG(matches.loser_age) FROM matches
SELECT avg ( winner_age )  FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT AVG(winner_age) FROM matches;,SELECT AVG(winner_age) FROM matches;,select avg ( winner_age ) from matches,SELECT AVG(matches.winner_age) FROM matches
SELECT avg ( minutes )  FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT AVG(minutes) FROM matches;,SELECT AVG(minutes) FROM matches;,select avg ( minutes ) from matches,SELECT AVG(matches.minutes) FROM matches
SELECT max ( minutes )  FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT MAX(minutes) FROM matches;,SELECT MAX(minutes) FROM matches;,select max ( minutes ) from matches,SELECT matches.minutes FROM matches WHERE matches.minutes = ( SELECT MIN(matches.minutes) FROM matches )
SELECT min ( minutes )  FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT MIN(minutes) FROM matches;,SELECT MIN(minutes) FROM matches;,select min ( minutes ) from matches,SELECT matches.minutes FROM matches WHERE matches.minutes = ( SELECT MIN(matches.minutes) FROM matches )
"SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city  like  ""%Aberdeen%"" OR T2.city  like  ""%Abilene%""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT COUNT(*)  FROM flights WHERE DestAirport IN (   SELECT AirportCode   FROM airports   WHERE City IN ('Aberdeen', 'Abilene') );","SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');","select count ( * ) from airports as t1 join flights as t2 on t1.airportcode = t2.destairport where t1.city = ""Aberdeen"" or t1.city = ""Abilene""","SELECT COUNT(*) FROM flights JOIN airports WHERE airports.City = ""value"" OR airports.City = ""value"""
SELECT name from museum,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Name FROM museum;,SELECT Name FROM museum,select name from museum,SELECT museum.Name FROM museum
"SELECT Title FROM Cartoon WHERE Directed_by  =  ""Ben Jones"" OR Directed_by  =  ""Brandon Vietti""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT Title  FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');","SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');","select title from cartoon where directed_by = ""Ben Jones"" or directed_by = ""Brandon Vietti""","SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = ""value"" OR Cartoon.Directed_by = ""value"""
"SELECT Title, original_air_date FROM Cartoon WHERE Directed_by  =  ""Ben Jones"" OR Directed_by  =  ""Brandon Vietti""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT Title, Original_air_date FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');","SELECT Title, Original_air_date FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');","select title,original_air_date from cartoon where directed_by = ""Ben Jones"" or directed_by = ""Brandon Vietti""","SELECT Cartoon.Title , Cartoon.Original_air_date FROM Cartoon WHERE Cartoon.Directed_by = ""value"" OR Cartoon.Directed_by = ""value"""
"SELECT Title, written_by FROM Cartoon WHERE Directed_by  =  ""Ben Jones"" OR Directed_by  =  ""Brandon Vietti""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT Title, Written_by  FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');","SELECT Title, Written_by FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti');","select written_by from cartoon where directed_by = ""Ben Jones"" or directed_by = ""Brandon Vietti""","SELECT Cartoon.Written_by FROM Cartoon WHERE Cartoon.Title IN ( SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Directed_by = ""value"" OR Cartoon.Directed_by = ""value"" )"
"SELECT * from Documents WHERE Document_Description LIKE ""%w%""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT Document_ID, Document_Name, Document_Description FROM Documents WHERE Document_Description LIKE '%w%';","SELECT Document_ID, Document_Name, Document_Description FROM Documents WHERE Document_Description LIKE '%w%'","select document_description from documents where document_name like ""%w%""","SELECT Documents.Document_Description FROM Documents WHERE Documents.Document_Description LIKE ""value"""
"SELECT document_name from Documents WHERE Document_Description LIKE ""%w%""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Document_Name FROM Documents WHERE Document_Description LIKE '%w%';,SELECT Document_Name FROM Documents WHERE Document_Description LIKE '%w%',"select document_name from documents where document_name like ""%w%""","SELECT Documents.Document_Name FROM Documents WHERE Documents.Document_Description LIKE ""value"""
"SELECT document_name , template_id FROM Documents WHERE Document_Description LIKE ""%w%""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';","SELECT Template_ID, Document_Name FROM Documents WHERE Document_Description LIKE '%w%'","select document_name,template_id from documents where document_name like ""%w%""","SELECT Documents.Document_Name , Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE ""value"""
SELECT avg ( loser_age )   FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT AVG(loser_age) FROM matches;,SELECT AVG(loser_age) FROM matches;,select avg(loser_age) from matches,SELECT AVG(matches.loser_age) FROM matches
SELECT avg ( winner_age )   FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT AVG(winner_age) FROM matches;,SELECT AVG(winner_age) FROM matches;,select avg ( winner_age ) from matches,SELECT AVG(matches.winner_age) FROM matches
"SELECT count ( * )  from matches where winner_hand  =  ""L""",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) FROM matches WHERE winner_hand = 'L';,SELECT COUNT(*) FROM players JOIN matches ON players.player_id = matches.winner_id WHERE players.hand = 'L';,"select count ( * ) from matches where winner_hand = ""left""","SELECT COUNT(*) FROM players JOIN matches WHERE players.hand = ""value"""
"SELECT winner_name, loser_name from matches where minutes  =   ( select max ( minutes )  from matches ) ",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);","SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;","select t2.winner_name, t2.loser_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id where t2.minutes = ( select max ( minutes ) from matches )","SELECT matches.winner_name , matches.loser_name FROM matches JOIN players WHERE matches.minutes = ( SELECT MAX(matches.minutes) FROM matches )"
SELECT name FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT name FROM Dogs;,SELECT name FROM Dogs,select name from dogs,SELECT Dogs.name FROM Dogs
SELECT name FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT d.name FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code WHERE b.breed_name = (   SELECT breed_name   FROM Dogs d   JOIN Breeds b ON d.breed_code = b.breed_code   GROUP BY breed_name   ORDER BY COUNT(*) ASC   LIMIT 1 );,SELECT name FROM Dogs WHERE breed_code IN (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1),select t1.name from dogs as t1 join breeds as t2 on t1.breed_code = t2.breed_code order by count ( * ) desc limit 1,SELECT Dogs.name FROM Dogs ORDER BY Dogs.breed_code ASC LIMIT 1
"SELECT name, gender FROM Dogs WHERE breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT d.name,         CASE d.gender             WHEN 1 THEN 'Male'            ELSE 'Female'        END AS gender FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code WHERE b.breed_name = (   SELECT breed_name   FROM Dogs d   JOIN Breeds b ON d.breed_code = b.breed_code   GROUP BY breed_name   ORDER BY COUNT(*) ASC   LIMIT 1 );",SELECT gender FROM Dogs WHERE breed_code IN (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1),select gender from dogs where breed_code = ( select breed_code from breeds order by count ( * ) desc limit 1 ),SELECT Dogs.gender FROM Dogs ORDER BY Dogs.breed_code ASC LIMIT 1
"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id   =   T2.dog_id WHERE T1.breed_code   =    (  SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count ( * )  ASC LIMIT 1  ) ",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id WHERE b.breed_name = (   SELECT breed_name   FROM Dogs d   JOIN Breeds b ON d.breed_code = b.breed_code   GROUP BY breed_name   ORDER BY COUNT(*) ASC   LIMIT 1 );",SELECT date_of_treatment FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs WHERE breed_code IN (SELECT breed_code FROM Breeds GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)),select t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id group by t2.dog_id order by count ( * ) desc limit 3,SELECT Treatments.date_of_treatment FROM Dogs JOIN Treatments ORDER BY Dogs.breed_code ASC LIMIT 1
SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*)  FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat';,SELECT COUNT(DISTINCT Student.StuID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat';,"select count(*) from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = ""cat""","SELECT COUNT(*) FROM Pets JOIN Has_Pet JOIN Student WHERE Pets.PetType = ""value"""
select count ( * )  from  ( SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' ) ,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*)  FROM Student s WHERE s.StuID NOT IN (   SELECT hp.StuID   FROM Has_Pet hp    JOIN Pets p ON hp.PetID = p.PetID   WHERE p.PetType = 'cat' );,SELECT COUNT(DISTINCT Student.StuID) FROM Student WHERE StuID NOT IN (SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');,"select count ( * ) from student where stuid not in ( select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = ""cat"" )","SELECT COUNT(*) FROM Student WHERE Student.StuID NOT IN ( SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = ""value"" )"
SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT s.StuID FROM Student s WHERE s.StuID NOT IN (   SELECT hp.StuID   FROM Has_Pet hp   JOIN Pets p ON hp.PetID = p.PetID   WHERE p.PetType = 'cat' );,SELECT Student.StuID FROM Student WHERE StuID NOT IN (SELECT Student.StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');,"select stuid from student except select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = ""cat""","SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN ( SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = ""value"" )"
SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < 2009 OR m.Open_Year > 2011 GROUP BY v.Name HAVING COUNT(DISTINCT CASE WHEN m.Open_Year < 2009 THEN m.Museum_ID END) > 0    AND COUNT(DISTINCT CASE WHEN m.Open_Year > 2011 THEN m.Museum_ID END) > 0;,SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 OR museum.Open_Year > 2011 GROUP BY visitor.Name HAVING COUNT(DISTINCT museum.Museum_ID) > 1,select t2.name from visit as t1 join visitor as t2 on t1.visitor_id = t2.id join museum as t3 on t1.museum_id = t3.museum_id where t3.open_year < 2009 intersect select t2.name from visit as t1 join visitor as t2 on t1.visitor_id = t2.id join museum as t3 on t1.museum_id = t3.museum_id where t3.open_year > 2011,"SELECT visitor.Name FROM visit JOIN museum JOIN visitor WHERE museum.Open_Year > ""value"" INTERSECT SELECT visitor.Name FROM visit JOIN museum JOIN visitor WHERE museum.Open_Year < ""value"""
SELECT t3.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 AND t1.name  =   ( SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID   =   t2.Museum_ID WHERE t3.open_year  >  2011 ) ,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT m.Name FROM museum m JOIN visit vi ON m.Museum_ID = vi.Museum_ID JOIN visitor v ON vi.visitor_ID = v.ID WHERE m.Open_Year < 2009   AND v.Name = (     SELECT v.Name     FROM visitor v     JOIN visit vi ON v.ID = vi.visitor_ID     JOIN museum m ON vi.Museum_ID = m.Museum_ID     WHERE m.Open_Year < 2009 OR m.Open_Year > 2011     GROUP BY v.Name     HAVING COUNT(DISTINCT CASE WHEN m.Open_Year < 2009 THEN m.Museum_ID END) > 0       AND COUNT(DISTINCT CASE WHEN m.Open_Year > 2011 THEN m.Museum_ID END) > 0   );,SELECT museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID JOIN visitor ON visit.visitor_ID = visitor.ID WHERE museum.Open_Year < 2009 AND visitor.Name IN (SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 OR museum.Open_Year > 2011 GROUP BY visitor.Name HAVING COUNT(DISTINCT museum.Museum_ID) > 1),select name from visitor where id in ( select t2.visitor_id from museum as t1 join visit as t2 on t1.museum_id = t2.museum_id where t1.open_year < 2009 ),"SELECT museum.Name FROM visit JOIN visitor JOIN museum WHERE museum.Open_Year < ""value"" INTERSECT SELECT museum.Name FROM visit JOIN visitor JOIN museum WHERE museum.Open_Year < ""value"""
"SELECT level_of_membership FROM visitor WHERE name  =  ""Fernando Gago""",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Level_of_membership FROM visitor WHERE Name = 'Fernando Gago';,SELECT Level_of_membership FROM visitor WHERE Name = 'Fernando Gago',"select level_of_membership from visitor where name = ""Fernando Gago""","SELECT visitor.Level_of_membership FROM visitor WHERE visitor.Name = ""value"""
"SELECT age FROM visitor WHERE name  =  ""Fernando Gago""",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Age FROM visitor WHERE Name = 'Fernando Gago';,SELECT Age FROM visitor WHERE Name = 'Fernando Gago',"select age from visitor where name = ""Fernando Gago""","SELECT visitor.Age FROM visitor WHERE visitor.Name = ""value"""
"SELECT T1.SourceAirport FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT a.AirportName AS SourceAirport FROM flights f JOIN airlines al ON f.Airline = al.uid JOIN airports a ON f.SourceAirport = a.AirportCode WHERE al.Airline = 'United Airlines',SELECT SourceAirport FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';,select t1.sourceairport from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode join airlines as t3 on t1.airline = t3.uid where t3.airline = 'United Airlines',"SELECT flights.SourceAirport FROM flights JOIN airports JOIN airlines WHERE airlines.Airline = ""value"""
"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid   =   T1.Airline WHERE T2.Airline   =   ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT FlightNo FROM flights f JOIN airlines al ON f.Airline = al.uid WHERE al.Airline = 'United Airlines',SELECT FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';,select flightno from airlines as t1 join flights as t2 on t1.uid = t2.airline where t1.airline = 'United Airlines',"SELECT flights.FlightNo FROM airlines JOIN flights WHERE airlines.Airline = ""value"""
SELECT DestAirport FROM flights WHERE FlightNo  =  28,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT a.AirportName AS Destination  FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE f.FlightNo = 28,SELECT DestAirport FROM flights WHERE FlightNo = 28;,select destairport from flights where flightno = 28,"SELECT flights.DestAirport FROM flights WHERE flights.FlightNo = ""value"""
SELECT DestAirport FROM flights WHERE FlightNo  =  29,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT a.AirportName AS Destination  FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE f.FlightNo = 29,SELECT DestAirport FROM flights WHERE FlightNo = 29;,select destairport from flights where airline = 'United Airlines' and flightno = 29,"SELECT flights.DestAirport FROM flights WHERE flights.FlightNo = ""value"""
"SELECT first_name,  last_name FROM players",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT first_name, last_name FROM players;","SELECT first_name, last_name FROM players","select first_name, last_name from players","SELECT players.last_name , players.first_name FROM players"
"SELECT first_name ,  last_name FROM players WHERE hand   =   'L'",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT I apologize, but I do not have enough context to generate a SQL query based on your message ""* I have left the chat *"". If you have a specific question related to the provided database schema, please let me know and I'll do my best to assist you.","SELECT first_name, last_name FROM players","select first_name, last_name from players except select t1.first_name, t1.last_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id","SELECT players.last_name , players.first_name FROM players WHERE players.first_name LIKE ""value"""
"SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline WHERE T2.City   =   ""Aberdeen"" AND T3.Airline   =   ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*)  FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City LIKE 'Aberdeen%';,SELECT COUNT(f.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen';,select count(*) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode join airlines as t3 on t1.airline = t3.uid where t2.city = 'Aberdeen' and t3.airline = 'United Airlines',"SELECT COUNT(*) FROM flights JOIN airports WHERE airports.City = ""value"""
"SELECT T2.city FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid   =   T1.Airline where T2.city ! =   'Aberdeen' and T3.airline  =  ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT DISTINCT ap.City FROM flights f JOIN airlines a ON f.Airline = a.uid   JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines';,SELECT DISTINCT ap.City FROM flights f JOIN airlines a ON f.Airline = a.uid JOIN airports ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines';,select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.city = 'Aberdeen' and t2.airline = 'United Airlines',"SELECT airports.City FROM flights JOIN airports JOIN airlines WHERE airlines.Airline = ""value"" AND airports.City != ""value"""
"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   ""Math""",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';,SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';,select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t3.course = 'Math',"SELECT teacher.Name FROM course JOIN course_arrange JOIN teacher WHERE course.Course = ""value"""
"SELECT T2.Staring_Date  FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID where T2.Course  =  ""Math""",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT ca.Grade, c.Staring_Date FROM course_arrange ca  JOIN course c ON ca.Course_ID = c.Course_ID JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID WHERE t.Teacher_ID IN (   SELECT ca.Teacher_ID   FROM course_arrange ca   JOIN course c ON ca.Course_ID = c.Course_ID   WHERE c.Course = 'Math' );","SELECT course.Staring_Date FROM course JOIN course_arrange ON course.Course_ID = course_arrange.Course_ID WHERE course_arrange.Grade IN (1, 3);",select t1.staring_date from course as t1 join course_arrange as t2 on t1.course_id = t2.course_id where t1.course = 'Math',"SELECT course.Staring_Date FROM course_arrange JOIN course JOIN teacher WHERE teacher.Name IN ( SELECT teacher.Name FROM course_arrange JOIN course JOIN teacher WHERE course.Course = ""value"" )"
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;,SELECT Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings ASC LIMIT 1,select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings limit 1,SELECT people.Birth_Date FROM poker_player JOIN people ORDER BY poker_player.Earnings ASC LIMIT 1
SELECT name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;,SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings ASC LIMIT 1,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings limit 1,SELECT people.Name FROM poker_player JOIN people ORDER BY poker_player.Earnings ASC LIMIT 1
SELECT Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Nationality  FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;,SELECT Nationality FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings ASC LIMIT 1,select t2.nationality from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings limit 1,SELECT people.Nationality FROM poker_player JOIN people ORDER BY poker_player.Earnings ASC LIMIT 1
SELECT count ( * )  FROM poker_player,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(*) FROM poker_player;,SELECT COUNT(Poker_Player_ID) FROM poker_player;,select count ( * ) from poker_player,SELECT COUNT(*) FROM poker_player
SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(*)  FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200;,SELECT COUNT(*) FROM people WHERE Height > 200;,select count ( * ) from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200,"SELECT COUNT(*) FROM people WHERE people.Height > ""value"""
SELECT avg ( T2.Earnings )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T1.Height  >  200,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT AVG(p.Earnings) FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200;,SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;,select avg ( t2.earnings ) from people as t1 join poker_player as t2 on t1.people_id = t2.people_id where t1.height > 200,"SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people WHERE people.Height > ""value"""
SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT s.StuID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog';,SELECT StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog',"select t1.stuid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""dog""","SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = ""value"""
SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' intersect SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT s.StuID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND s.StuID IN (   SELECT s2.StuID   FROM Student s2   JOIN Has_Pet hp2 ON s2.StuID = hp2.StuID   JOIN Pets p2 ON hp2.PetID = p2.PetID   WHERE p2.PetType = 'dog' );,SELECT StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' AND StuID IN (SELECT StuID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog'),"select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = ""cat"" intersect select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = ""dog""","SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = ""value"" INTERSECT SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets WHERE Pets.PetType = ""value"""
"SELECT T1.Fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog';","SELECT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog'","select t1.fname, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""dog""","SELECT Student.Fname , Student.Age FROM Student JOIN Has_Pet JOIN Pets WHERE Pets.PetType = ""value"""
SELECT count ( * )  from country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM country;,SELECT COUNT(*) FROM country;,select count ( * ) from country,SELECT COUNT(*) FROM country
"SELECT countrycode  from city where name  =  ""Herat""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT CountryCode  FROM city WHERE Name = 'Herat';,SELECT CountryCode FROM city WHERE Name = 'Herat';,select countrycode from city where name = 'Herat',"SELECT city.CountryCode FROM city WHERE city.Name = ""value"""
"SELECT population  from city where name  =  ""Qandahar""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Population FROM city WHERE Name = 'Qandahar';,SELECT Population FROM city WHERE Name = 'Qandahar';,"select population from city where name = ""Qandahar""","SELECT city.Population FROM city WHERE city.Name = ""value"""
select id from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT id FROM TV_Channel WHERE Country IN (   SELECT Country   FROM TV_Channel   GROUP BY Country   HAVING COUNT(*) > 2 );,"SELECT COUNT(id) AS ChannelCount, Country FROM TV_Channel GROUP BY Country HAVING ChannelCount > 2;",select id from tv_channel where country > 2,"SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > ""value"""
select package_option from tv_channel where country in  ( SELECT country FROM tv_channel GROUP BY country HAVING count ( * )   >  2 ) ,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Package_Option FROM TV_Channel WHERE id IN (   SELECT id   FROM TV_Channel   WHERE Country IN (     SELECT Country     FROM TV_Channel     GROUP BY Country     HAVING COUNT(*) > 2   ) );,SELECT Package_Option FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2);,select package_option from tv_channel where country in ( select country from tv_channel group by country having count ( * ) > 2 ),"SELECT TV_Channel.Package_Option FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > ""value"""
SELECT series_name FROM tv_channel order by series_name asc,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT series_name FROM TV_Channel ORDER BY series_name;,SELECT series_name FROM TV_Channel ORDER BY series_name ASC;,select series_name from tv_channel order by series_name,SELECT TV_Channel.series_name FROM TV_Channel ORDER BY TV_Channel.series_name ASC
SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(DISTINCT dog_id) AS num_dogs_treated FROM Treatments;,SELECT COUNT(DISTINCT dog_id) FROM Treatments,select count ( * ) from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id,SELECT COUNT(Treatments.dog_id) FROM Treatments
SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT MIN(age) AS youngest_dog_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);,SELECT MIN(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments),select min ( age ) from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id,SELECT Dogs.age FROM Treatments JOIN Dogs ORDER BY Dogs.age ASC LIMIT 1
SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT MAX(age) AS oldest_dog_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);,SELECT MAX(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments),select t1.age from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id order by t1.age desc limit 1,SELECT Dogs.age FROM Treatments JOIN Dogs ORDER BY Dogs.age DESC LIMIT 1
SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT AVG(age) AS avg_dog_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);,SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments),select avg ( age ) from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id group by t2.dog_id,SELECT AVG(Dogs.age) FROM Treatments JOIN Dogs
"SELECT Name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   ""English"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Name FROM country c WHERE c.Code NOT IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English' );,SELECT Country.Name FROM country LEFT JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.Language IS NULL,"select distinct countrycode from countrylanguage except select distinct t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""English""","SELECT country.Name FROM country EXCEPT SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"""
"SELECT Name,sum ( Population )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   ""English"" )  group by Name",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SUM(c.Population) AS TotalPopulation FROM country c WHERE c.Code NOT IN (   SELECT cl.CountryCode   FROM countrylanguage cl   WHERE cl.Language = 'English' );,SELECT SUM(country.Population) FROM country WHERE NOT EXISTS (SELECT 1 FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code AND countrylanguage.Language = 'English'),"select sum ( t1.population ) from city as t1 join country as t2 on t1.countrycode = t2.code where t1.name not in ( select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode = t2.countrycode where t2.language = ""English"" )","SELECT SUM(country.Population) FROM country WHERE country.Name != ""value"""
SELECT T2.Weight FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.MakeID  =  1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Weight FROM cars_data WHERE Id = 1;,SELECT Weight FROM cars_data WHERE Id = 1,select weight from cars_data where id = 1,"SELECT cars_data.Weight FROM cars_data WHERE cars_data.Id = ""value"""
"SELECT T2.Year FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  ""buick""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Year  FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'buick' LIMIT 1;,SELECT Year FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'buick',"select t2.year from car_names as t1 join cars_data as t2 on t1.make = t2.id where t1.model = ""buick""","SELECT cars_data.Year FROM car_names JOIN cars_data WHERE car_names.Model = ""value"""
"SELECT T2.Horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id WHERE T1.Model  =  ""plymouth""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'plymouth';,SELECT Horsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'plymouth',"select horsepower from car_names as t1 join cars_data as t2 on t1.make = t2.id where t1.model = ""plymouth""","SELECT cars_data.Horsepower FROM car_names JOIN cars_data WHERE car_names.Model = ""value"""
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.Model FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Cylinders = 4 ORDER BY cars_data.Horsepower DESC LIMIT 1;,SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Cylinders = 4 ORDER BY Horsepower DESC LIMIT 1,select t1.model from car_names as t1 join cars_data as t2 on t1.make = t2.id where t2.cylinders = 4 order by t2.horsepower desc limit 1,"SELECT car_names.Model FROM car_names JOIN cars_data WHERE cars_data.Cylinders = ""value"" ORDER BY cars_data.Horsepower DESC LIMIT 1"
select count ( * )  from cars_data where year = '1974',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(DISTINCT Id)  FROM cars_data WHERE Year = 1974;,SELECT COUNT(DISTINCT Id) FROM cars_data WHERE Year = 1974,select count ( distinct t1.make ) from car_names as t1 join cars_data as t2 on t1.make = t2.id where t2.year = 1974,"SELECT COUNT(*) FROM car_names JOIN cars_data WHERE cars_data.Year = ""value"""
select id  from cars_data where year = '1974' and Cylinders  =  '8',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Id FROM cars_data WHERE Year = 1974 AND Cylinders = 8;,SELECT Id FROM cars_data WHERE Year = 1974 AND Cylinders = 8,select id from cars_data where year = 1974 and cylinders = 8,"SELECT cars_data.Id FROM cars_data WHERE cars_data.Year = ""value"" AND cars_data.Cylinders = ""value"""
select name from shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Name FROM shop;,SELECT Name FROM shop;,select name from shop,SELECT shop.Name FROM shop
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID;,SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID;,select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id,SELECT shop.Name FROM hiring JOIN shop
SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id   =   t2.shop_id GROUP BY t1.shop_id ORDER BY count ( * )  DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;,SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;,select t2.name from hiring as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id order by count ( * ) desc limit 1,SELECT shop.Name FROM hiring JOIN shop GROUP BY hiring.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1
select count ( distinct Singer_ID )  from Singer,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT COUNT(*) FROM singer;,SELECT COUNT(*) FROM singer;,select count ( * ) from singer,SELECT COUNT(*) FROM singer
SELECT count ( DISTINCT T1.Name )  FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT COUNT(DISTINCT s.Singer_ID) FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;,SELECT COUNT(DISTINCT singer.Singer_ID) FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;,select count ( * ) from ( select t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000 ),"SELECT COUNT(song.Singer_ID) FROM song WHERE song.Sales > ""value"""
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales > 300000,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;,SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;,select distinct t1.name from singer as t1 join song as t2 on t1.singer_id = t2.singer_id where t2.sales > 300000,"SELECT singer.Name FROM singer JOIN song WHERE song.Sales > ""value"""
SELECT contestant_name FROM CONTESTANTS,voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT contestant_name FROM CONTESTANTS;,SELECT contestant_name FROM CONTESTANTS,select contestant_name from contestants,SELECT CONTESTANTS.contestant_name FROM CONTESTANTS
SELECT COUNT ( contestant_name )  FROM CONTESTANTS,voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT COUNT(*) AS total_contestants FROM CONTESTANTS;,SELECT COUNT(*) FROM CONTESTANTS,select sum ( contestant_number ) from contestants,SELECT CONTESTANTS.contestant_number FROM CONTESTANTS
SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  1,voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT contestant_name  FROM CONTESTANTS WHERE contestant_number = 1;,SELECT contestant_name FROM CONTESTANTS WHERE contestant_number = 1,select contestant_name from contestants where contestant_number = 1,"SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_number = ""value"""
SELECT contestant_name FROM CONTESTANTS WHERE contestant_number  =  2,voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT contestant_name FROM CONTESTANTS WHERE contestant_number = 2;,SELECT contestant_name FROM CONTESTANTS WHERE contestant_number = 2,select contestant_name from contestants where contestant_number = 2,"SELECT CONTESTANTS.contestant_name FROM CONTESTANTS WHERE CONTESTANTS.contestant_number = ""value"""
SELECT airportname FROM airports,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT AirportName FROM airports;,SELECT AirportName FROM airports,select airportname from airports,SELECT airports.AirportName FROM airports
SELECT COUNT ( DISTINCT Flightno )  FROM flights,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(FlightNo) AS total_flights FROM flights;,SELECT COUNT(FlightNo) FROM flights,select count ( flightno ) from flights,SELECT COUNT(flights.FlightNo) FROM flights
SELECT COUNT ( DISTINCT country )  FROM airports,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(DISTINCT Country) AS total_countries FROM airports;,SELECT COUNT(DISTINCT Country) FROM airports,select count ( distinct country ) from airports,SELECT COUNT(airports.Country) FROM airports
SELECT count ( * )  from Breeds,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) FROM Breeds;,SELECT COUNT(breed_code) FROM Breeds,select count(*) from breeds,SELECT COUNT(Breeds.breed_name) FROM Breeds JOIN Dogs
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT breed_name FROM Breeds WHERE breed_code = (   SELECT breed_code   FROM Dogs   WHERE size_code = (     SELECT size_code      FROM Sizes     WHERE size_description = 'Small'   )   LIMIT 1 );,"SELECT I'm unable to directly determine the ""biggest"" dog breed from the provided schema as it does not include specific data about the size of each breed. The schema provided does not link breeds directly to sizes or provide any measurements that could be used to determine the biggest breed.",select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code order by t2.weight desc limit 1,SELECT MAX(Dogs.size_code) FROM Dogs
"SELECT T2.size_code FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name = ""Bulldog""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT size_description  FROM Sizes WHERE size_code = (   SELECT size_code   FROM Dogs   WHERE breed_code = (     SELECT breed_code      FROM Breeds     WHERE breed_name = 'Bulldog'   )   LIMIT 1 );,SELECT size_description FROM Sizes JOIN Dogs ON Sizes.size_code = Dogs.size_code JOIN Breeds ON Dogs.breed_code = Breeds.breed_code WHERE Breeds.breed_name = 'Bulldog' LIMIT 1,"select weight from breeds as t1 join dogs as t2 on t1.breed_code = t2.breed_code where t1.breed_name = ""Bulldog""","SELECT Dogs.size_code FROM Breeds JOIN Dogs WHERE Breeds.breed_name = ""value"""
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(*) DESC LIMIT 1;,SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY Breeds.breed_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1,select breed_name from breeds group by breed_code order by count ( * ) desc limit 1,SELECT Breeds.breed_name FROM Breeds JOIN Dogs GROUP BY Dogs.breed_code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,select name from conductor order by year_of_work desc limit 1,SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work DESC LIMIT 1
SELECT Year_of_Work FROM conductor where name = 'Robert Craft',orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT Year_of_Work FROM conductor WHERE Name = 'Robert Craft';,SELECT Year_of_Work FROM conductor WHERE Name = 'Robert Craft',"select year_of_work from conductor where name = ""Robert Craft""","SELECT conductor.Year_of_Work FROM conductor WHERE conductor.Name = ""value"""
SELECT Name FROM conductor ORDER BY Year_of_Work asc LIMIT 1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT Name FROM conductor ORDER BY Year_of_Work ASC LIMIT 1;,SELECT Name FROM conductor ORDER BY Year_of_Work ASC LIMIT 1,select name from conductor order by year_of_work asc limit 1,SELECT conductor.Name FROM conductor ORDER BY conductor.Year_of_Work ASC LIMIT 1
SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   desc limit 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT p.first_name, p.last_name, COUNT(*) AS treatment_count FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id ORDER BY treatment_count DESC LIMIT 1;","SELECT professional_id, COUNT(*) AS treatment_count FROM Treatments GROUP BY professional_id ORDER BY treatment_count DESC LIMIT 1;","select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id order by count ( * ) desc limit 1",SELECT * FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by COUNT ( * )   limit 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT p.first_name, p.last_name, COUNT(*) AS treatment_count FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id ORDER BY treatment_count ASC LIMIT 1;","SELECT professional_id, COUNT(*) AS treatment_count FROM Treatments GROUP BY professional_id ORDER BY treatment_count ASC LIMIT 1;","select t1.first_name, t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id order by count ( * ) asc limit 1",SELECT * FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id ORDER BY COUNT(*) ASC LIMIT 1
select count ( * )  from  ( SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 group by T2.professional_id having count ( * )  < =  3 ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT COUNT(*) AS professional_count  FROM (   SELECT p.professional_id, COUNT(*) AS treatment_count   FROM Professionals p   LEFT JOIN Treatments t ON p.professional_id = t.professional_id   GROUP BY p.professional_id   HAVING COUNT(*) <= 3 ) AS subquery;",SELECT COUNT(*) FROM (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) <= 3) AS subquery;,select count ( * ) from ( select t1.professional_id from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count ( * ) < 3 ),"SELECT COUNT(*) FROM ( SELECT * FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id HAVING COUNT(*) <= ""value"" )"
"select name from country where code not in  ( SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   ""English"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Name FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.CountryCode IS NULL,SELECT Country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR countrylanguage.IsOfficial = 'F',"select name from country where countrycode not in ( select countrycode from countrylanguage where language = ""English"" ) and name not in ( select t2.name from countrylanguage as t1 join country as t2 on t1.countrycode = t2.countrycode","SELECT country.Code FROM country EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = ""value"""
"select name from country where code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   ""English"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Name FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' WHERE cl.CountryCode IS NULL AND c.GovernmentForm <> 'Republic';,SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language != 'English' OR countrylanguage.IsOfficial = 'F') AND country.GovernmentForm != 'Republic',"select name from country except select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""English"" and t1.governmentform = ""Republic""","SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"" EXCEPT SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"""
SELECT count ( * )  FROM votes WHERE state   =   'NY' or  state   =   'CA',voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT COUNT(*) AS total_votes FROM VOTES WHERE state IN ('NY', 'CA');","SELECT SUM(CASE WHEN state = 'NY' THEN 1 ELSE 0 END) AS NY_Votes, SUM(CASE WHEN state = 'CA' THEN 1 ELSE 0 END) AS CA_Votes FROM VOTES;","select sum ( vote_id ) from votes where state = ""NY"" or state = ""CA""","SELECT COUNT(*) FROM VOTES WHERE VOTES.state = ""value"" OR VOTES.state = ""value"""
SELECT distinct contestant_number FROM votes,voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT DISTINCT contestant_number FROM CONTESTANTS;,SELECT DISTINCT contestant_number FROM CONTESTANTS;,select distinct contestant_number from votes,SELECT VOTES.contestant_number FROM VOTES
SELECT count ( * )  from votes where contestant_number  =  '5',voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT COUNT(*) AS vote_count FROM VOTES WHERE contestant_number = 5;,SELECT COUNT(vote_id) FROM VOTES WHERE contestant_number = 5;,select count ( vote_id ) from votes where contestant_number = 5,"SELECT COUNT(VOTES.vote_id) FROM VOTES WHERE VOTES.contestant_number = ""value"""
SELECT distinct Nationality FROM people,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT DISTINCT Nationality FROM people;,SELECT Nationality FROM people GROUP BY Nationality,select nationality from people except select nationality from people where people_id in ( select people_id from people group by nationality having count ( * ) > 1 ),"SELECT people.Nationality FROM people EXCEPT SELECT people.Nationality FROM people WHERE people.People_ID = ""value"""
SELECT Nationality FROM people,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Nationality FROM people;,SELECT DISTINCT Nationality FROM people,select distinct nationality from people,SELECT people.Nationality FROM people
SELECT count ( * )  FROM people where Nationality  =  'Russia',poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(*) FROM people WHERE Nationality = 'Russia';,SELECT COUNT(*) FROM people WHERE Nationality = 'Russia',"select count ( * ) from people where nationality = ""Russia""","SELECT COUNT(*) FROM people WHERE people.Nationality = ""value"""
SELECT count ( * )  FROM people where Nationality  =  'Bulgaria',poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(*) FROM people WHERE Nationality = 'Bulgaria';,SELECT COUNT(*) FROM people WHERE Nationality = 'Bulgaria',"select count ( * ) from people where nationality = ""Bulgaria""","SELECT COUNT(*) FROM people WHERE people.Nationality = ""value"""
SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT Maker, COUNT(*) AS num_models FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY Maker HAVING COUNT(*) > 3;","SELECT Maker, COUNT(Model) AS ModelCount FROM model_list GROUP BY Maker HAVING COUNT(Model) > 3;",select maker from model_list group by maker having count ( * ) > 3,"SELECT car_makers.Maker FROM car_makers JOIN model_list GROUP BY model_list.Maker HAVING COUNT(*) > ""value"""
SELECT T1.id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT cm.Id, cm.Maker, COUNT(*) AS num_models FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(*) > 3;",SELECT car_makers.Id FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(model_list.Model) > 3;,select t1.id from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count ( * ) > 3,"SELECT car_makers.Id FROM car_makers JOIN model_list GROUP BY model_list.Maker HAVING COUNT(*) > ""value"""
"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker GROUP BY T1.Id HAVING count ( * )   >  3",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT cm.Id, cm.FullName, COUNT(*) AS num_models FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName HAVING COUNT(*) > 3;","SELECT car_makers.Id, car_makers.FullName FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName HAVING COUNT(model_list.Model) > 3;","select t1.id, t1.fullname from car_makers as t1 join model_list as t2 on t1.id = t2.maker group by t1.id having count ( * ) > 3","SELECT car_makers.FullName , car_makers.Id FROM car_makers JOIN model_list GROUP BY model_list.Maker HAVING COUNT(*) > ""value"""
SELECT avg ( Horsepower )  FROM cars_data,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT AVG(Horsepower) FROM cars_data;,SELECT AVG(Horsepower) FROM cars_data,select avg ( horsepower ) from cars_data,SELECT AVG(cars_data.Horsepower) FROM cars_data
SELECT Id FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT Make, Horsepower FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY Horsepower DESC LIMIT 1;","SELECT Make, MakeId FROM car_names WHERE MakeId = (SELECT Id FROM cars_data ORDER BY Horsepower DESC LIMIT 1)",select * from cars_data order by horsepower desc limit 1,SELECT * FROM cars_data ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Accelerate FROM cars_data WHERE Id = 39;,SELECT Accelerate FROM cars_data WHERE Id = 39,select accelerate from cars_data where id = 39,"SELECT cars_data.Accelerate FROM cars_data WHERE cars_data.Id = ""value"""
SELECT COUNT ( * )  FROM CARS_DATA WHERE Accelerate  >  19.0,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT Make, Accelerate  FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Accelerate > 19.0;","SELECT Make, MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Accelerate > 19.0)",select * from cars_data where accelerate > 19.0,"SELECT * FROM cars_data WHERE cars_data.Accelerate > ""value"""
"SELECT year from concert where concert_name  =  ""Auditions""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Year FROM concert WHERE concert_Name = 'Auditions';,SELECT Year FROM concert WHERE concert_Name = 'Auditions';,"select year from concert where concert_name = ""Auditions""","SELECT concert.Year FROM concert WHERE concert.concert_Name = ""value"""
"SELECT year from concert where concert_name  =  ""Super bootcamp""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Year FROM concert WHERE concert_Name = 'Super bootcamp';,SELECT Year FROM concert WHERE concert_Name = 'Super bootcamp';,"select year from concert where concert_name = ""Super bootcamp""","SELECT concert.Year FROM concert WHERE concert.concert_Name = ""value"""
"SELECT year from concert where concert_name  =  ""Home Visits""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Year FROM concert WHERE concert_Name = 'Home Visits';,SELECT Year FROM concert WHERE concert_Name = 'Home Visits';,"select year from concert where concert_name = ""Home Visits""","SELECT concert.Year FROM concert WHERE concert.concert_Name = ""value"""
SELECT count ( * )  FROM concert WHERE YEAR   =   2014 OR YEAR   =   2015,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);","SELECT COUNT(*) FROM concert WHERE Year IN (2014, 2015);",select count ( * ) from concert where year = 2014 or year = 2015,"SELECT COUNT(*) FROM concert WHERE concert.Year = ""value"" OR concert.Year = ""value"""
SELECT count ( * )  FROM concert WHERE YEAR   =   2014,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*) FROM concert WHERE Year = 2014;,SELECT COUNT(*) FROM concert WHERE Year = 2014;,select count ( * ) from concert where year = 2014,"SELECT COUNT(*) FROM concert WHERE concert.Year = ""value"""
SELECT count ( * )  FROM concert WHERE YEAR   =   2015,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*) FROM concert WHERE Year = 2015;,SELECT COUNT(*) FROM concert WHERE Year = 2015;,select count ( * ) from concert where year = 2015,"SELECT COUNT(*) FROM concert WHERE concert.Year = ""value"""
SELECT distinct tourney_name FROM matches,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT DISTINCT tourney_name FROM matches;,SELECT tourney_name FROM matches GROUP BY tourney_name;,select tourney_name from matches,SELECT matches.tourney_name FROM matches
SELECT count ( * )   from students,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*)  FROM Students WHERE date_left IS NOT NULL;,SELECT COUNT(DISTINCT student_id) FROM Students WHERE date_left IS NOT NULL,select count ( * ) from addresses as t1 join student_enrolment as t2 on t1.address_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id group by t2.degree_program_id,SELECT COUNT(*) FROM Degree_Programs
"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left LIMIT 1;","SELECT first_name, middle_name, last_name FROM Students WHERE date_left IS NOT NULL ORDER BY date_left ASC LIMIT 1","select first_name, middle_name, last_name from students order by date_first_registered limit 1","SELECT Students.first_name , Students.middle_name , Students.last_name FROM Students ORDER BY Students.date_first_registered ASC LIMIT 1"
SELECT SourceAirport FROM Flights WHERE FlightNo = '28',flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT SourceAirport  FROM flights WHERE FlightNo = 28;,SELECT SourceAirport FROM flights WHERE FlightNo = 28;,select * from flights where flightno = 28,"SELECT flights.SourceAirport FROM flights WHERE flights.FlightNo = ""value"""
select city from airports where airportcode = 'APG',flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT City FROM airports WHERE AirportCode = 'APG';,SELECT City FROM airports WHERE AirportCode = 'APG';,"select city from airports where airportcode = ""APG""","SELECT airports.City FROM airports WHERE airports.AirportCode = ""value"""
SELECT AirportName FROM Airports WHERE AirportCode NOT IN  ( SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights ) ,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT AirportName FROM airports WHERE AirportCode NOT IN (   SELECT SourceAirport FROM flights   UNION   SELECT DestAirport FROM flights );,SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights);,select airportname from airports where airportcode not in ( select sourceairport from flights ),SELECT airports.AirportName FROM airports WHERE airports.AirportCode NOT IN ( SELECT flights.DestAirport FROM flights )
SELECT * FROM Transcripts ORDER BY transcript_date ASC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT MIN(transcript_date) AS first_transcript_date FROM Transcripts;,SELECT MIN(transcript_date) FROM Transcripts;,select transcript_date from transcripts order by transcript_date asc limit 1,SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date ASC LIMIT 1
SELECT DISTINCT winner_name  FROM matches ORDER BY winner_age LIMIT 3,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT winner_name FROM matches ORDER BY winner_age ASC LIMIT 3;,"SELECT winner_name, MIN(winner_age) AS youngest_age FROM matches GROUP BY winner_name ORDER BY youngest_age ASC LIMIT 3",select winner_name from matches where winner_age = (select min(winner_age) from matches),SELECT matches.winner_name FROM matches ORDER BY matches.winner_age ASC LIMIT 1
SELECT loser_rank_points FROM matches ORDER BY winner_age LIMIT 3,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT winner_name, winner_rank_points FROM matches ORDER BY winner_age ASC LIMIT 3;","SELECT r.ranking_points FROM rankings r JOIN players p ON r.player_id = p.player_id JOIN (SELECT winner_id, MIN(winner_age) AS youngest_age FROM matches GROUP BY winner_id ORDER BY youngest_age ASC LIMIT 3) AS youngest_winners ON p.player_id = youngest_winners.winner_id",select t2.winner_rank_points from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t1.birth_date asc limit 3,SELECT matches.winner_rank_points FROM matches ORDER BY matches.winner_age ASC LIMIT 1
SELECT winner_age FROM matches ORDER BY winner_age LIMIT 3,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT winner_age FROM matches ORDER BY winner_age ASC LIMIT 3;,SELECT winner_age FROM (SELECT winner_age FROM matches GROUP BY winner_id ORDER BY winner_age ASC LIMIT 3) AS youngest_winners_age,select winner_age from matches order by winner_age asc limit 3,SELECT matches.winner_age FROM matches ORDER BY matches.winner_age ASC LIMIT 1
SELECT count ( * )  FROM Friend,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM Friend;,SELECT COUNT(*) FROM Friend;,select count ( * ) from friend,SELECT COUNT(*) FROM Friend
SELECT avg ( grade )  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT AVG(grade) FROM Highschooler;,SELECT AVG(grade) FROM Highschooler;,select avg ( grade ) from highschooler,SELECT AVG(Highschooler.grade) FROM Highschooler
SELECT DISTINCT name  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler;,SELECT name FROM Highschooler;,select name from highschooler,SELECT Highschooler.name FROM Highschooler
select count ( * )  from poker_player,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(*) FROM poker_player;,SELECT COUNT(Poker_Player_ID) FROM poker_player;,select count(*) from poker_player,SELECT COUNT(*) FROM poker_player
SELECT count ( * )  FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(*) FROM poker_player WHERE Earnings > 300000;,SELECT COUNT(Poker_Player_ID) FROM poker_player WHERE Earnings > 300000;,select count ( * ) from poker_player where earnings > 300000,"SELECT COUNT(*) FROM poker_player WHERE poker_player.Earnings > ""value"""
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;,SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.earnings > 300000,"SELECT people.Name FROM poker_player JOIN people WHERE poker_player.Earnings > ""value"""
SELECT count ( * )  from museum,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(*) FROM museum;,SELECT COUNT(Museum_ID) FROM museum;,select count ( * ) from museum,SELECT COUNT(*) FROM museum
SELECT Num_of_Staff from museum,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT Name, Num_of_Staff FROM museum;","SELECT Museum_ID, Num_of_Staff FROM museum;",select num_of_staff from museum,SELECT museum.Num_of_Staff FROM museum
"SELECT Museum_ID, Name from museum order by Num_of_Staff desc limit 1",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);","SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;","select name, museum_id from museum order by num_of_staff desc limit 1","SELECT museum.Museum_ID , museum.Name FROM museum ORDER BY museum.Num_of_Staff DESC LIMIT 1"
SELECT count ( * )  FROM Students,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) FROM Students;,SELECT COUNT(student_id) FROM Students;,select count ( distinct student_id ) from student_enrolment,SELECT COUNT(Students.student_id) FROM Students
"SELECT first_name,middle_name,last_name  FROM Students",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT first_name, middle_name, last_name FROM Students;","SELECT first_name, middle_name, last_name FROM Students;","select first_name, middle_name, last_name from students","SELECT Students.first_name , Students.middle_name , Students.last_name FROM Students"
SELECT date_first_registered  FROM Students,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT first_name, middle_name, last_name, date_first_registered  FROM Students;","SELECT first_name, middle_name, last_name, date_first_registered FROM Students;","select first_name, middle_name, last_name,date_first_registered from students","SELECT Students.first_name , Students.middle_name , Students.last_name , Students.date_first_registered , Students.date_first_registered FROM Students"
SELECT count ( StuID )  FROM student,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*) FROM Student;,SELECT COUNT(*) FROM Student,select count(*) from student,SELECT COUNT(*) FROM Student
SELECT Age  FROM student where LName = 'Smith',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT Age FROM Student WHERE LName = 'Smith';,SELECT Age FROM Student WHERE LName = 'Smith',select age from student where lname = 'Smith',"SELECT Student.Age FROM Student WHERE Student.LName = ""value"""
"SELECT T2.petid ,age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.Lname   =   'Smith'",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT s.Age, hp.PetID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.LName = 'Smith';","SELECT Age, PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE LName = 'Smith'","select t1.age,t2.petid from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.lname = 'Smith'","SELECT Student.Age , Has_Pet.PetID FROM Student JOIN Has_Pet JOIN Pets WHERE Student.LName = ""value"""
SELECT distinct T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT StuID FROM Has_Pet;,SELECT StuID FROM Has_Pet,select stuid from has_pet,SELECT Has_Pet.StuID FROM Has_Pet
"SELECT distinct T1.Fname, T1.Lname, T1.major, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT Student.Fname, Student.LName, Student.Major, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;","SELECT Fname, LName, Major, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet)","select t1.fname, t1.lname, t1.major, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid","SELECT Student.Fname , Student.LName , Student.Major FROM Student JOIN Has_Pet"
"SELECT Fname, Lname, major, age FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' ) ",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT Student.Fname, Student.LName, Student.Major, Student.Age FROM Student  INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType != 'cat';","SELECT Fname, LName, Major, Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID NOT IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))","select t1.stuid, t1.fname, t1.lname, t1.major, t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid except select t1.stuid from has_pet as t1 join pets as t3 on t1.petid = t3.petid where t3.pettype = ""cat""","SELECT Student.Fname , Student.LName , Student.Major , Student.Age FROM Has_Pet JOIN Student JOIN Pets WHERE Pets.PetType != ""value"""
SELECT count ( * )  FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) FROM Dogs;,SELECT COUNT(dog_id) FROM Dogs;,select count ( * ) from dogs,SELECT COUNT(*) FROM Dogs
"SELECT age FROM Dogs where name  =  ""Kacey""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT age FROM Dogs WHERE name = 'Kacey';,SELECT age FROM Dogs WHERE name = 'Kacey';,"select age from dogs where name = ""Kacey""","SELECT Dogs.age FROM Dogs WHERE Dogs.name = ""value"""
SELECT name FROM Dogs order by weight desc limit 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT name FROM Dogs WHERE weight = (SELECT MAX(weight) FROM Dogs);,SELECT name FROM Dogs ORDER BY weight DESC LIMIT 1;,select name from dogs order by weight desc limit 1,SELECT Dogs.name FROM Dogs ORDER BY Dogs.weight DESC LIMIT 1
"SELECT size_code FROM Dogs where breed_code  =  ""BUL""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT DISTINCT size_code  FROM Dogs WHERE breed_code = 'BUL';,SELECT DISTINCT size_code FROM Dogs WHERE breed_code = 'BUL';,"select size_code from dogs where breed_code = ""BUL""","SELECT Dogs.size_code FROM Dogs WHERE Dogs.breed_code = ""value"""
SELECT Name FROM country ORDER BY Population ASC LIMIT 3,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Name FROM country ORDER BY Population ASC LIMIT 3;,SELECT Population FROM country ORDER BY Population ASC LIMIT 3,select name from country order by population asc limit 3,SELECT country.Name FROM country ORDER BY country.Population ASC LIMIT 1
SELECT Name FROM country ORDER BY surfacearea desc LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Name FROM country ORDER BY SurfaceArea DESC LIMIT 1;,SELECT Name FROM country ORDER BY SurfaceArea DESC LIMIT 1,select name from country order by surfacearea desc limit 1,SELECT country.Name FROM country ORDER BY country.SurfaceArea DESC LIMIT 1
"SELECT population from country where name  =  ""Antarctica""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SUM(Population) AS TotalPopulation  FROM country WHERE Continent = 'Antarctica';,SELECT SUM(Population) FROM country WHERE Continent = 'Antarctica',select sum ( population ) from country where name = 'Antarctica',"SELECT SUM(country.Population) FROM country WHERE country.Continent = ""value"""
SELECT AVG ( friend_id )  FROM friend,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT AVG(friend_id) FROM Friend;,SELECT AVG(friend_id) FROM Friend;,select avg ( friend_id ) from friend,SELECT AVG(Friend.friend_id) FROM Friend
SELECT AVG ( grade )  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT AVG(grade) FROM Highschooler;,SELECT AVG(grade) FROM Highschooler;,select avg ( grade ) from highschooler,SELECT AVG(Highschooler.grade) FROM Highschooler
SELECT MAX ( grade )  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT MAX(grade) FROM Highschooler;,SELECT MAX(grade) FROM Highschooler;,select max ( grade ) from highschooler,SELECT MAX(Highschooler.grade) FROM Highschooler
SELECT count ( * )  FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*)  FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';,SELECT COUNT(DISTINCT se.student_id) FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';,select count ( * ) from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id where t2.degree_summary_name = 'Bachelor',"SELECT COUNT(*) FROM Student_Enrolment JOIN Degree_Programs WHERE Degree_Programs.degree_summary_name = ""value"""
SELECT t1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT se.student_id FROM Student_Enrolment se  JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';,SELECT DISTINCT se.student_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';,"select t2.student_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where t1.degree_summary_name = ""Bachelor""","SELECT Student_Enrolment.student_id FROM Student_Enrolment JOIN Degree_Programs WHERE Degree_Programs.degree_summary_name = ""value"""
"SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  9",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.student_id = 9;","SELECT first_name, middle_name, last_name FROM Students WHERE student_id = 9;","select first_name, middle_name, last_name from students where student_id = 9","SELECT Students.first_name , Students.middle_name , Students.last_name FROM Students WHERE Students.student_id = ""value"""
"SELECT DISTINCT t1.first_name, t1.middle_name, t1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE t1.student_id  =  7",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.first_name, s.middle_name, s.last_name FROM Students s WHERE s.student_id = 7;","SELECT first_name, middle_name, last_name FROM Students WHERE student_id = 7;","select distinct t1.first_name, t1.middle_name, t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id where t2.student_id = 7","SELECT Students.first_name , Students.middle_name , Students.last_name FROM Students WHERE Students.student_id = ""value"""
"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name, T3.degree_summary_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT dp.degree_summary_name FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';,"SELECT DISTINCT dp.degree_summary_name, dp.degree_summary_description FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';",select degree_summary_name from degree_programs where degree_summary_name = 'Bachelor',"SELECT Students.first_name , Students.middle_name FROM Students JOIN Student_Enrolment WHERE Student_Enrolment.degree_program_id = ""value"""
SELECT DISTINCT T3.degree_summary_description FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT DISTINCT degree_summary_description FROM Degree_Programs;,SELECT DISTINCT degree_summary_description FROM Degree_Programs;,select distinct degree_summary_description from degree_programs,SELECT Degree_Programs.degree_summary_description FROM Degree_Programs
SELECT DISTINCT T1.student_ID FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT se.student_id  FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';,SELECT DISTINCT se.student_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';,select t2.student_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id where t1.degree_summary_name = 'Bachelor',"SELECT Student_Enrolment.student_id FROM Student_Enrolment JOIN Degree_Programs WHERE Degree_Programs.degree_summary_name = ""value"""
"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id   =   T3.degree_program_id WHERE T3.degree_summary_name   =   'Bachelor'",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';","SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';","select t2.first_name, t2.middle_name, t2.last_name from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t1.degree_program_id = t3.degree_program_id where t3.degree_summary_name = 'Bachelor'","SELECT Students.first_name , Students.middle_name , Students.last_name , Student_Enrolment.degree_program_id FROM Student_Enrolment JOIN Students JOIN Degree_Programs WHERE Degree_Programs.degree_summary_name = ""value"""
SELECT count ( DISTINCT Make )  FROM CAR_NAMES WHERE Model  =  'chevrolet',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*)  FROM car_names WHERE Model = 'chevrolet';,SELECT COUNT(DISTINCT Make) FROM car_names WHERE Model = 'chevrolet';,select count(distinct make) from car_names where model = 'chevrolet',"SELECT COUNT(car_names.Make) FROM model_list JOIN car_names WHERE model_list.Model = ""value"""
SELECT count ( DISTINCT Model )  FROM CAR_NAMES,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM model_list;,SELECT COUNT(*) FROM model_list;,select count ( distinct model ) from car_names,SELECT COUNT(model_list.Model) FROM model_list
SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count ( DISTINCT Make )  DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT Model, COUNT(*) AS num_makes FROM model_list  JOIN car_names ON model_list.Model = car_names.Model GROUP BY Model ORDER BY num_makes DESC LIMIT 1;","SELECT Model, COUNT(Make) AS MakeCount FROM car_names GROUP BY Model ORDER BY MakeCount DESC LIMIT 1;",select model from car_names group by model order by count ( * ) desc limit 1,SELECT model_list.Model FROM model_list JOIN car_names GROUP BY car_names.Model ORDER BY COUNT(*) DESC LIMIT 1
"SELECT T2.Name, T1.course_id FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT t.Name, ca.Course_ID FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID;","SELECT teacher.Name, course_arrange.Course_ID FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID","select t2.name, t1.course_id from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id","SELECT teacher.Name , course_arrange.Course_ID FROM course_arrange JOIN course JOIN teacher"
"SELECT T2.Name ,  COUNT ( * )  FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT Teacher_ID, COUNT(Course_ID) AS num_courses FROM course_arrange GROUP BY Teacher_ID;","SELECT Teacher_ID, COUNT(Course_ID) AS NumberOfCourses FROM course_arrange GROUP BY Teacher_ID","select t2.teacher_id, count ( * ) from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t2.teacher_id","SELECT course_arrange.Teacher_ID , COUNT(*) FROM course_arrange JOIN course JOIN teacher GROUP BY course_arrange.Teacher_ID"
SELECT name from teacher where age < 30,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT Name FROM teacher WHERE Age < 30;,SELECT Name FROM teacher WHERE Age < 30,select name from teacher where age < 30,"SELECT teacher.Name FROM teacher WHERE teacher.Age < ""value"""
"SELECT date FROM performance WHERE TYPE LIKE ""%audition%""",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT Date FROM performance WHERE Type LIKE 'Auditions%';,SELECT Date FROM performance WHERE Type = 'Auditions';,"select date from performance where type = ""Auditions""","SELECT performance.Date FROM performance WHERE performance.Type = ""value"""
SELECT birth_date FROM players where player_id = 200002,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT birth_date FROM players WHERE player_id = 200002;,SELECT birth_date FROM players WHERE player_id = 200002;,select birth_date from players where player_id = 200002,"SELECT players.birth_date FROM players WHERE players.player_id = ""value"""
SELECT first_name FROM players where player_id = 200001,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT first_name FROM players WHERE player_id = 200001;,SELECT first_name FROM players WHERE player_id = 200001;,select first_name from players where player_id = 200001,"SELECT players.first_name FROM players WHERE players.player_id = ""value"""
SELECT country_code FROM players GROUP BY country_code HAVING count ( * )  > 50,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;,SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;,select country_code from players group by country_code having count ( * ) > 50,"SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) > ""value"""
"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   ""Kabul""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Region  FROM city ci JOIN country c ON ci.CountryCode = c.Code WHERE ci.Name = 'Kabul';,SELECT city.District FROM city WHERE city.Name = 'Kabul';,select t2.region from city as t1 join country as t2 on t1.countrycode = t2.code where t1.name = 'Kabul',"SELECT country.Region FROM country JOIN city WHERE city.Name = ""value"""
"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   ""Herat""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Region FROM city ci  JOIN country c ON ci.CountryCode = c.Code WHERE ci.Name = 'Herat';,SELECT city.District FROM city WHERE city.Name = 'Herat';,select t2.region from city as t1 join country as t2 on t1.countrycode = t2.code where t1.name = 'Herat',"SELECT country.Region FROM city JOIN country WHERE city.Name = ""value"""
"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Name   =   ""Qandahar""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Region  FROM city ci JOIN country c ON ci.CountryCode = c.Code WHERE ci.Name = 'Quandahar';,SELECT city.District FROM city WHERE city.Name = 'Quandahar';,select t2.region from city as t1 join country as t2 on t1.countrycode = t2.code where t1.name = 'Quandahar',"SELECT country.Region FROM city JOIN country WHERE city.Name = ""value"""
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  DESC LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT YEAR(tourney_date) AS Year, COUNT(*) AS NumberOfMatches FROM matches GROUP BY YEAR(tourney_date) ORDER BY NumberOfMatches DESC LIMIT 1",select year from matches group by year order by count ( * ) desc limit 1,SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT(*) DESC LIMIT 1
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) ASC LIMIT 1;,"SELECT YEAR(tourney_date) AS Year, COUNT(*) AS NumberOfMatches FROM matches GROUP BY YEAR(tourney_date) ORDER BY NumberOfMatches ASC LIMIT 1",select year from matches group by year order by count ( * ) limit 1,SELECT matches.year FROM matches GROUP BY matches.year ORDER BY COUNT(*) ASC LIMIT 1
"SELECT YEAR, count ( * )  FROM matches GROUP BY YEAR ORDER BY count ( * )  LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) AS match_count  FROM matches WHERE year = (   SELECT year    FROM matches    GROUP BY year    ORDER BY COUNT(*) ASC    LIMIT 1 );,SELECT COUNT(*) AS NumberOfMatches FROM matches WHERE YEAR(tourney_date) = (SELECT YEAR(tourney_date) FROM matches GROUP BY YEAR(tourney_date) ORDER BY COUNT(*) ASC LIMIT 1),select count ( * ) from matches where year = ( select year from matches group by year order by count ( * ) asc limit 1 ),"SELECT COUNT(*) FROM matches GROUP BY matches.year HAVING matches.year = ""value"""
"SELECT year, count ( * )  from matches where year  =  2016",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) AS match_count FROM matches WHERE year = 2016;,SELECT COUNT(*) AS NumberOfMatches FROM matches WHERE YEAR(tourney_date) = 2016,select count ( * ) from matches where year = 2016,"SELECT COUNT(*) FROM matches WHERE matches.year = ""value"""
"SELECT count ( * )  from matches where surface  =  ""Hard""",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) AS hard_surface_match_count FROM matches WHERE year = 2016 AND surface = 'Hard';,SELECT COUNT(*) AS NumberOfMatchesOnHard FROM matches WHERE YEAR(tourney_date) = 2016 AND surface = 'Hard',"select count ( * ) from matches where year = 2016 and surface = ""Hard""","SELECT COUNT(*) FROM matches WHERE matches.year = ""value"" AND matches.surface = ""value"""
SELECT  Id  FROM CAR_MAKERS,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT cm.FullName, COUNT(ml.ModelId) AS num_models FROM car_makers cm LEFT JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName;  SELECT Id FROM car_makers;","SELECT FULLNAME, COUNT(model_list.Model) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName;",select id from car_makers,SELECT car_makers.Id FROM car_makers
SELECT  Country  FROM CAR_MAKERS,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_makers.Id, car_makers.Country FROM car_makers;","SELECT car_makers.Id, car_makers.Country FROM car_makers;",select country from car_makers,SELECT car_makers.Country FROM car_makers
select avg ( percentage )  from countrylanguage,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT AVG(Percentage) FROM countrylanguage;,SELECT AVG(Percentage) FROM countrylanguage;,select avg ( percentage ) from countrylanguage,SELECT AVG(countrylanguage.Percentage) FROM countrylanguage
"select countrycode from countrylanguage where language  =  ""Dutch"" order by percentage desc limit 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' ORDER BY Percentage DESC LIMIT 1;,SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch' ORDER BY Percentage DESC LIMIT 1;,"select t2.code from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t1.language = ""Dutch"" order by population desc limit 1","SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = ""value"" GROUP BY countrylanguage.CountryCode ORDER BY COUNT(*) DESC LIMIT 1"
"select avg ( percentage )  from countrylanguage where language  =  ""Papiamento""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT    (MAX(Percentage) - MIN(Percentage)) AS difference FROM countrylanguage;,SELECT MAX(Percentage) - MIN(Percentage) FROM countrylanguage;,"select countrycode, avg ( percentage ) from countrylanguage group by countrycode order by avg ( percentage ) desc limit 1",SELECT AVG(countrylanguage.Percentage) FROM countrylanguage
"SELECT Level_of_membership FROM visitor WHERE name  =   ""Gonzalo HiguaÃ­n """,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Level_of_membership  FROM visitor WHERE Name = 'Gonzalo HiguaÃ­n';,SELECT Level_of_membership FROM visitor WHERE Name = 'Gonzalo HiguaÃ­n';,"select level_of_membership from visitor where name = ""Gonzalo Higuan""","SELECT visitor.Level_of_membership FROM visitor WHERE visitor.Name = ""value"""
SELECT name FROM visitor WHERE Level_of_membership =  5,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Name FROM visitor WHERE Level_of_membership = 5;,SELECT Name FROM visitor WHERE Level_of_membership = 5;,select name from visitor where level_of_membership = 5,"SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership = ""value"""
SELECT count ( * )  FROM visitor WHERE Level_of_membership>5,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(*) FROM visitor WHERE Level_of_membership > 5;,SELECT COUNT(*) FROM visitor WHERE Level_of_membership > 5;,select count ( * ) from visitor where level_of_membership > 5,"SELECT COUNT(*) FROM visitor WHERE visitor.Level_of_membership > ""value"""
SELECT age FROM visitor WHERE Level_of_membership   = 8,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Age FROM visitor WHERE Level_of_membership = 8;,SELECT Age FROM visitor WHERE Level_of_membership = 8;,select age from visitor where level_of_membership = 8,"SELECT visitor.Age FROM visitor WHERE visitor.Level_of_membership = ""value"""
SELECT count ( * )  FROM visitor WHERE Level_of_membership > 4,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(*) FROM visitor WHERE Level_of_membership > 4;,SELECT COUNT(*) FROM visitor WHERE Level_of_membership > 4;,select count ( * ) from visitor where level_of_membership > 4,"SELECT COUNT(*) FROM visitor WHERE visitor.Level_of_membership > ""value"""
"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT Name FROM visitor ORDER BY Level_of_membership DESC, Age DESC;","SELECT Name, Age FROM visitor ORDER BY Level_of_membership, Age DESC;",select name from visitor where level_of_membership > 4 order by age desc,"SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > ""value"" ORDER BY visitor.Name , visitor.Level_of_membership ASC"
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode GROUP BY T1.Name ORDER BY COUNT ( * )  DESC LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT CountryCode, COUNT(*) AS num_languages FROM countrylanguage GROUP BY CountryCode ORDER BY num_languages DESC LIMIT 1;","SELECT COUNT(Language) AS NumberOfLanguages, CountryCode FROM countrylanguage GROUP BY CountryCode ORDER BY NumberOfLanguages DESC LIMIT 1;",select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode group by t1.name order by count ( * ) desc limit 1,SELECT country.Name FROM country JOIN countrylanguage GROUP BY countrylanguage.Language ORDER BY COUNT(*) DESC LIMIT 1
"SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  ""Canada""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) AS num_languages FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Canada');,SELECT COUNT(Language) FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Canada');,select count ( distinct language ) from countrylanguage where countrycode = 'Canada',"SELECT COUNT(countrylanguage.Language) FROM country JOIN countrylanguage WHERE country.Name = ""value"""
"SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode where T1.name  =  ""Canada""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Canada');,SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Canada');,"select language from countrylanguage where countrycode = ""Canada""","SELECT countrylanguage.Language FROM countrylanguage JOIN country WHERE country.Name = ""value"""
"SELECT count ( distinct CountryCode )  FROM countrylanguage WHERE Language  =  ""Chinese""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT CountryCode) AS num_countries FROM countrylanguage WHERE Language = 'Chinese';,SELECT COUNT(CountryCode) FROM countrylanguage WHERE Language = 'Chinese';,"select count ( * ) from countrylanguage where language = ""Chinese""","SELECT COUNT(*) FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"""
"SELECT NAME FROM country WHERE Continent  =  ""North America""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Name FROM country WHERE Continent = 'North America';,SELECT Name FROM country WHERE Continent = 'North America';,select * from country where continent = 'North America',"SELECT country.Name FROM country WHERE country.Continent = ""value"""
"SELECT LANGUAGE FROM countrylanguage WHERE countrycode in  ( SELECT Code FROM country WHERE Continent  =  ""North America"" )  and IsOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT c.Name AS Country, cl.Language  FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Continent = 'North America' AND cl.IsOfficial = 'T';","SELECT country.Name, countrylanguage.Language FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'North America' AND countrylanguage.IsOfficial = 'T';","select t1.name, t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = 'Canada' or t1.region = 'North America'","SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.Continent = ""value"""
"SELECT LifeExpectancy FROM country WHERE name  =  ""Canada""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT LifeExpectancy FROM country WHERE Name = 'Canada';,SELECT LifeExpectancy FROM country WHERE Name = 'Canada';,select lifeexpectancy from country where name = 'Canada',"SELECT country.LifeExpectancy FROM country WHERE country.Name = ""value"""
SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*) AS num_students_with_multiple_pets FROM (   SELECT StuID   FROM Has_Pet   GROUP BY StuID   HAVING COUNT(PetID) > 1 ) t;,SELECT COUNT(DISTINCT StuID) FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1;,select count ( * ) from ( select * from has_pet as t1 join pets as t2 on t1.petid = t2.petid group by t1.stuid having count ( * ) > 1 ),"SELECT COUNT(*) FROM ( SELECT * FROM Student JOIN Has_Pet GROUP BY Has_Pet.StuID HAVING COUNT(*) > ""value"" )"
"SELECT T1.lname, T1.fname  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT s.Fname, s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID, s.Fname, s.LName HAVING COUNT(hp.PetID) > 1;","SELECT DISTINCT s.Fname, s.LName FROM Student s JOIN Has_Pet h ON s.StuID = h.StuID GROUP BY s.StuID HAVING COUNT(h.PetID) > 1;","select t1.lname, t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid group by t1.stuid having count ( * ) > 1","SELECT Student.Fname , Student.LName FROM Has_Pet JOIN Student GROUP BY Has_Pet.StuID HAVING COUNT(*) > ""value"""
"SELECT T1.lname, T1.fname, T1.sex  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid GROUP BY T1.stuid HAVING count ( * )   >  1",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT Sex FROM Student WHERE Fname = 'Tracy' AND LName = 'Kim';,SELECT Sex FROM Student WHERE LName = 'Kim' AND Fname = 'Tracy';,"select sex from student where lname = ""Kim"" and fname = ""Tracy""","SELECT Student.Sex FROM Student WHERE Student.LName = ""value"" AND Student.Fname = ""value"""
"select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   ""Asia"" group by region ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT Region)  FROM country WHERE Continent = 'Asia';,SELECT COUNT(DISTINCT Region) FROM country WHERE Continent = 'Asia';,select count ( region ) from country where continent = 'Asia',"SELECT COUNT(country.Region) FROM country WHERE country.Continent = ""value"""
"select count ( * )  from  ( SELECT region FROM country WHERE Continent   =   ""Europe"" group by region ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT Region) FROM country WHERE Continent = 'Europe';,SELECT COUNT(DISTINCT Region) FROM country WHERE Continent = 'Europe';,select count ( region ) from country where continent = 'Europe',"SELECT COUNT(country.Region) FROM country WHERE country.Continent = ""value"""
"SELECT sum ( SurfaceArea )  FROM country WHERE Continent   =   ""Asia"" OR Continent   =   ""Europe""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SUM(SurfaceArea) FROM (   SELECT SurfaceArea    FROM country   WHERE Continent = 'Europe'   ORDER BY SurfaceArea DESC   LIMIT 10 );,SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Europe';,"select region,surfacearea from country where continent = 'Europe'","SELECT country.SurfaceArea FROM country WHERE country.Continent = ""value"""
"SELECT count ( * )  FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   ""Presentation""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(DISTINCT t.Template_ID) FROM Templates t JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Description = 'Presentation';,SELECT COUNT(DISTINCT Templates.Template_ID) FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation',"select count ( template_id ) from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = ""Presentation""","SELECT COUNT(Templates.Template_ID) FROM Templates JOIN Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = ""value"""
"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   ""Presentation""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT t.Template_ID FROM Templates t JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Description = 'Presentation';,SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation',"select t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code = t2.template_type_code where t2.template_type_description = ""Presentation""","SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = ""value"""
"SELECT T2.template_id, T2.Template_Type_Code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code   =  T2.template_type_code WHERE T1.template_type_description   =   ""Presentation""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Description = 'Presentation' LIMIT 3;","SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation')","select t2.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code where t1.template_type_description = ""Presentation""","SELECT Ref_Template_Types.Template_Type_Code FROM Templates JOIN Ref_Template_Types WHERE Ref_Template_Types.Template_Type_Description = ""value"""
SELECT count ( * )   FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT COUNT(*) AS max_transcripts_per_course FROM (   SELECT student_course_id, COUNT(*) AS transcript_count   FROM Transcript_Contents   GROUP BY student_course_id ) t ORDER BY transcript_count DESC LIMIT 1;",SELECT COUNT(DISTINCT transcript_id) FROM Transcript_Contents,select count ( distinct t1.student_enrolment_id ) from student_enrolment_courses as t1 join transcript_contents as t2 on t1.student_course_id = t2.student_course_id group by t1.student_course_id order by count ( * ) desc limit 1,SELECT COUNT(*) FROM Student_Enrolment_Courses JOIN Transcript_Contents GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING COUNT(*) = (   SELECT COUNT(*) AS max_transcripts_per_course    FROM (     SELECT student_course_id, COUNT(*) AS transcript_count     FROM Transcript_Contents     GROUP BY student_course_id   ) t   ORDER BY transcript_count DESC   LIMIT 1 );",SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING COUNT(DISTINCT transcript_id) = (SELECT MAX(counts) FROM (SELECT COUNT(DISTINCT transcript_id) AS counts FROM Transcript_Contents GROUP BY student_course_id) AS subquery),select t1.student_enrolment_id from student_enrolment_courses as t1 join transcript_contents as t2 on t1.student_course_id = t2.student_course_id group by t1.student_course_id order by count ( * ) desc limit 1,SELECT Student_Enrolment_Courses.student_course_id FROM Student_Enrolment_Courses WHERE Student_Enrolment_Courses.student_course_id = ( SELECT Student_Enrolment_Courses.student_course_id FROM Student_Enrolment_Courses GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT count ( * )  FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT MIN(transcript_count) AS min_transcripts_per_course FROM (   SELECT student_course_id, COUNT(*) AS transcript_count   FROM Transcript_Contents   GROUP BY student_course_id ) t;",SELECT MIN(counts) FROM (SELECT COUNT(DISTINCT transcript_id) AS counts FROM Transcript_Contents GROUP BY student_course_id) AS subquery,select count ( * ) from ( select t1.student_enrolment_id from student_enrolment_courses as t1 join transcript_contents as t2 on t1.student_course_id = t2.student_course_id group by t2.student_course_id order by count ( * ) asc limit 1 ),SELECT COUNT(*) FROM Student_Enrolment_Courses JOIN Transcript_Contents JOIN Student_Enrolment_Courses GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count ( * )  LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING COUNT(*) = (   SELECT MIN(transcript_count)   FROM (     SELECT student_course_id, COUNT(*) AS transcript_count     FROM Transcript_Contents     GROUP BY student_course_id   ) t );",SELECT student_course_id FROM Transcript_Contents GROUP BY student_course_id HAVING COUNT(DISTINCT transcript_id) = (SELECT MIN(counts) FROM (SELECT COUNT(DISTINCT transcript_id) AS counts FROM Transcript_Contents GROUP BY student_course_id) AS subquery),select course_id from student_enrolment_courses group by course_id order by count ( * ) asc limit 1,SELECT Student_Enrolment_Courses.student_course_id FROM Student_Enrolment_Courses JOIN Transcript_Contents GROUP BY Student_Enrolment_Courses.student_course_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT avg ( student_course_id )  FROM Transcript_Contents,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT AVG(student_course_id) AS avg_student_course_id FROM Student_Enrolment_Courses;,SELECT AVG(student_course_id) FROM Student_Enrolment_Courses,select avg ( student_course_id ) from student_enrolment_courses,SELECT AVG(Student_Enrolment_Courses.student_course_id) FROM Student_Enrolment_Courses
SELECT property_name FROM Properties WHERE room_count  >  1,real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
",SELECT property_name FROM Properties WHERE room_count > 1;,SELECT property_name FROM Properties WHERE room_count > 1;,select property_name from properties where room_count > 1,"SELECT Properties.property_name FROM Properties WHERE Properties.room_count > ""value"""
"SELECT property_name FROM Properties WHERE property_type_code   =   ""House"" UNION SELECT property_name FROM Properties WHERE property_type_code   =   ""Apartment"" AND room_count  >  1",real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
","SELECT property_name FROM Properties WHERE room_count > 1 AND property_type_code IN ('Apartment', 'House');",SELECT Properties.property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE (Ref_Property_Types.property_type_description = 'House' OR Ref_Property_Types.property_type_description = 'Apartment') AND Properties.room_count > 1;,select property_name from properties where property_type_code = 'House' or property_type_code = 'Apt.' and room_count > 1,"SELECT Properties.property_name FROM Properties WHERE Properties.room_count > ""value"" OR Properties.property_type_code = ""value"""
"SELECT property_name, room_count FROM Properties WHERE property_type_code   =   ""House"" UNION SELECT property_name, room_count FROM Properties WHERE property_type_code   =   ""Apartment"" AND room_count  >  1",real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
","SELECT property_name, room_count  FROM Properties WHERE room_count > 1 AND property_type_code IN ('Apartment', 'House');","SELECT Properties.property_name, Properties.room_count FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE (Ref_Property_Types.property_type_description = 'House' OR Ref_Property_Types.property_type_description = 'Apartment') AND Properties.room_count > 1;","select property_name,room_count from properties where property_type_code = 'House' or property_type_code = 'Apt.'","SELECT Properties.room_count FROM Properties WHERE Properties.property_type_code = ""value"" OR Properties.room_count > ""value"""
"SELECT avg ( agreed_selling_price )  FROM Properties WHERE property_type_code   =   ""House"" AND room_count  >  1",real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
",SELECT AVG(agreed_selling_price) AS avg_selling_price FROM Properties  WHERE room_count > 1 AND property_type_code = 'House';,SELECT AVG(agreed_selling_price) FROM Properties WHERE property_type_code = 'House' AND room_count > 1;,select avg ( agreed_selling_price ) from properties where room_count > 1,"SELECT AVG(Properties.agreed_selling_price) FROM Properties WHERE Properties.room_count > ""value"""
SELECT count ( * )  from airports,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM airports;,SELECT COUNT(*) FROM airports,select count(*) from airports,SELECT COUNT(*) FROM airports
SELECT count ( distinct sourceairport )  from flights,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(DISTINCT SourceAirport)  FROM flights;,SELECT COUNT(DISTINCT SourceAirport) FROM flights,select count ( distinct destairport ) from flights,SELECT COUNT(*) FROM airports JOIN flights
"SELECT count ( * )  from flights where destairport like ""%ASY%""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights WHERE DestAirport = 'ASY';,SELECT COUNT(*) FROM flights WHERE DestAirport = 'ASY',"select count ( * ) from airports as t1 join flights as t2 on t1.airportcode = t2.destairport where t1.airportcode = ""ASY""","SELECT COUNT(*) FROM flights WHERE flights.DestAirport = ""value"""
"SELECT count ( * )  from flights where destairport like ""%ASY%"" and sourceairport like ""%APG%"" UNION SELECT count ( * )  from flights where destairport like ""%ASY%"" and sourceairport like ""%ABR%""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT COUNT(*)  FROM flights WHERE DestAirport = 'ASY' AND SourceAirport IN ('APG', 'ABR');","SELECT COUNT(*) FROM flights WHERE DestAirport = 'ASY' AND SourceAirport IN ('APG', 'ABR')",select count ( * ) from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.airportcode = 'APG' intersect select count ( * ) from airports as t1 join flights as t2 on t1.airportcode = t2.destairport where t2.sourceairport = 'ABR',"SELECT COUNT(*) FROM airports JOIN flights WHERE airports.AirportCode = ""value"" OR flights.DestAirport = ""value"""
SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'germany',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*)  FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'germany');,SELECT COUNT(car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'germany',"select count ( * ) from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.countryname = ""germany""","SELECT COUNT(*) FROM car_makers JOIN countries WHERE countries.CountryName = ""value"""
SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'germany',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT Maker, FullName FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'germany');",SELECT car_makers.FullName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'germany',"select t1.fullname from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.countryname = ""germany""","SELECT car_makers.FullName FROM car_makers JOIN countries WHERE countries.CountryName = ""value"""
SELECt count ( T1.maker )  FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa');,SELECT COUNT(car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa',"select count ( * ) from car_makers where country = ""USA""","SELECT COUNT(*) FROM car_makers JOIN countries WHERE countries.CountryName = ""value"""
SELECt T1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT Maker, FullName  FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'usa');",SELECT car_makers.FullName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'usa',"select distinct t1.fullname from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.countryname = ""usa""","SELECT car_makers.FullName FROM car_makers JOIN countries WHERE countries.CountryName = ""value"""
"SELECT first_name ,  last_name, state FROM Owners",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name, state FROM Owners;","SELECT first_name, last_name, state FROM Owners","select first_name, last_name, state from owners","SELECT Owners.first_name , Owners.last_name , Owners.state FROM Owners"
"SELECT first_name ,  last_name, email_address FROM Owners",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name, email_address, state FROM Owners;","SELECT first_name, last_name, email_address FROM Owners","select first_name,last_name,email_address from owners","SELECT Owners.first_name , Owners.last_name , Owners.email_address FROM Owners"
"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name, email_address  FROM Owners WHERE state LIKE '%North%';","SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'","select first_name, last_name, email_address from owners where state like ""%north%""","SELECT Owners.first_name , Owners.last_name , Owners.email_address , Owners.state FROM Owners WHERE Owners.state LIKE ""value"""
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;,SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1,select city from employee where age < 30 group by city having count(*) > 1,"SELECT employee.City FROM hiring JOIN employee GROUP BY hiring.Start_from HAVING COUNT(*) < ""value"""
SELECT city FROM employee WHERE age  >  30 GROUP BY city HAVING count ( * )   >  1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT City FROM employee WHERE Age > 30 GROUP BY City HAVING COUNT(*) > 1;,SELECT City FROM employee WHERE Age > 30 GROUP BY City HAVING COUNT(Employee_ID) > 1,select city from employee where age > 30 group by city having count ( * ) > 1,"SELECT employee.City FROM hiring JOIN employee WHERE employee.Age > ""value"" GROUP BY hiring.Start_from HAVING COUNT(*) > ""value"""
"SELECT Name, Age FROM employee WHERE age  >  30",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT Name, Age FROM employee WHERE Age > 30;","SELECT Name, Age FROM employee WHERE Age > 30","select name, age from employee where age > 30","SELECT employee.Name , employee.Age FROM employee WHERE employee.Age > ""value"""
"SELECT Name, Age FROM employee WHERE age  <  30",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT Name, Age FROM employee WHERE Age < 30;","SELECT Name, Age FROM employee WHERE Age < 30","select name, age from employee where age < 30","SELECT employee.Name , employee.Age FROM employee WHERE employee.Age < ""value"""
SELECT City FROM employee WHERE age  <  29,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT DISTINCT City FROM employee WHERE Age < 29;,SELECT City FROM employee WHERE Age < 29,select distinct city from employee where age < 29,"SELECT employee.City FROM employee WHERE employee.Age < ""value"""
SELECT count ( * )  FROM Owners,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) FROM Owners;,SELECT COUNT(DISTINCT owner_id) FROM Owners,select count ( * ) from owners,SELECT COUNT(*) FROM Owners
SELECT age FROM Dogs ORDER BY age ASC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT MIN(age) FROM Dogs;,SELECT MIN(age) FROM Dogs,select age from dogs order by age limit 1,SELECT Dogs.age FROM Dogs ORDER BY Dogs.age ASC LIMIT 1
SELECT name FROM Dogs ORDER BY age ASC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT name  FROM Dogs WHERE age = 1;,SELECT name FROM Dogs WHERE age = 1,select name from dogs where age = 1,"SELECT Dogs.name FROM Dogs WHERE Dogs.age = ""value"""
"SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  ""Evangeline""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.name = 'Evangeline';","SELECT Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Dogs.name = 'Evangeline'","select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.name = ""Evangeline""","SELECT Owners.first_name , Owners.last_name FROM Owners JOIN Dogs WHERE Dogs.name = ""value"""
SELECT Name FROM singer WHERE Singer_ID NOT IN  ( SELECT Singer_ID FROM song ) ,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT Singer_ID FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);,SELECT Singer_ID FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);,select singer_id from singer except select singer_id from song,SELECT singer.Singer_ID FROM singer EXCEPT SELECT song.Singer_ID FROM song
SELECT Name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);","SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949);",select name from singer where birth_year = 1948 or birth_year = 1949,"SELECT singer.Name FROM singer WHERE singer.Birth_Year = ""value"" OR singer.Birth_Year = ""value"""
SELECT Citizenship FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT Name, Citizenship  FROM singer WHERE Birth_Year IN (1948, 1949);","SELECT Citizenship FROM singer WHERE Birth_Year IN (1948, 1949);",select citizenship from singer where birth_year = 1948 or birth_year = 1949,"SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year = ""value"" OR singer.Birth_Year = ""value"""
SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT Name, Net_Worth_Millions FROM singer WHERE Birth_Year IN (1948, 1949) ORDER BY Net_Worth_Millions DESC LIMIT 1;","SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949) ORDER BY Net_Worth_Millions DESC LIMIT 1;",select name from singer where birth_year = 1948 or birth_year = 1949 order by net_worth_millions desc limit 1,"SELECT singer.Singer_ID FROM singer WHERE singer.Birth_Year = ""value"" OR singer.Birth_Year = ""value"" ORDER BY singer.Net_Worth_Millions DESC LIMIT 1"
"SELECT name,Net_Worth_Millions FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions desc limit 1",singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT    CASE WHEN Net_Worth_Millions > 30 THEN 'Yes' ELSE 'No' END AS Over_30_Million FROM singer  WHERE Birth_Year IN (1948, 1949) ORDER BY Net_Worth_Millions DESC LIMIT 1;","SELECT CASE WHEN Net_Worth_Millions > 30 THEN 'Yes' ELSE 'No' END FROM singer WHERE Birth_Year IN (1948, 1949) ORDER BY Net_Worth_Millions DESC LIMIT 1;",select name from singer where birth_year = 1948 or birth_year = 1949 and net_worth_millions > 30,"SELECT * FROM singer WHERE singer.Birth_Year = ""value"" OR singer.Net_Worth_Millions > ""value"" ORDER BY singer.Net_Worth_Millions DESC LIMIT 1"
SELECT name FROM singer WHERE Birth_Year   =   1948 OR Birth_Year   =   1949 order by Net_Worth_Millions limit 1,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT MIN(Net_Worth_Millions) AS Lowest_Net_Worth FROM singer WHERE Birth_Year BETWEEN 1948 AND 1949;,SELECT MIN(Net_Worth_Millions) FROM singer WHERE Birth_Year BETWEEN 1948 AND 1949;,select min ( net_worth_millions ) from singer where birth_year between 1948 and 1949,"SELECT MIN(singer.Net_Worth_Millions) FROM singer WHERE singer.Birth_Year >= ""value"" AND singer.Birth_Year <= ""value"""
SELECT count ( * )  FROM battle WHERE id NOT IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT COUNT(*)  FROM battle b WHERE NOT EXISTS (   SELECT 1    FROM ship s   WHERE s.lost_in_battle = b.id     AND s.tonnage = 225 );,SELECT COUNT(DISTINCT b.id) FROM battle b WHERE NOT EXISTS (   SELECT 1   FROM ship s   WHERE s.lost_in_battle = b.id AND s.tonnage = 225 ),select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage > 225 ),"SELECT COUNT(*) FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = ""value"" )"
SELECT count ( * )  FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT COUNT(*)  FROM battle b WHERE EXISTS (   SELECT 1   FROM ship s   WHERE s.lost_in_battle = b.id     AND s.tonnage = 225 );,SELECT COUNT(DISTINCT b.id) FROM battle b WHERE EXISTS (   SELECT 1   FROM ship s   WHERE s.lost_in_battle = b.id AND s.tonnage = 225 ),select count ( * ) from battle where id in ( select lost_in_battle from ship where tonnage > 225 ),"SELECT COUNT(*) FROM battle WHERE battle.id IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.tonnage = ""value"" )"
SELECT count ( * )  FROM ship WHERE tonnage   =   '225',battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT COUNT(*) FROM ship WHERE tonnage = 225;,SELECT COUNT(*) FROM ship WHERE tonnage = 225,select count ( * ) from ship where tonnage = 225,"SELECT COUNT(*) FROM ship WHERE ship.tonnage = ""value"""
SELECT result FROM battle WHERE id IN  (  SELECT lost_in_battle FROM ship WHERE tonnage   =   '225'  ) ,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT CASE   WHEN result = 'Latin victory' THEN latin_commander   WHEN result = 'Bulgarian victory' THEN bulgarian_commander END AS winner FROM battle b JOIN ship s ON s.lost_in_battle = b.id WHERE s.tonnage = 225;,SELECT b.result FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.tonnage = 225,select result from battle where id = ( select lost_in_battle from ship where tonnage = 225 ),"SELECT battle.result FROM ship JOIN battle WHERE ship.tonnage = ""value"""
"SELECT Fullname FROM car_makers WHERE maker  =  ""amc""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT FullName  FROM car_makers WHERE Maker = 'amc';,SELECT FullName FROM car_makers WHERE Maker = 'amc',"select fullname from car_makers where maker = ""amc""","SELECT car_makers.FullName FROM car_makers WHERE car_makers.Maker = ""value"""
SELECT countryname FROM countries WHERE countryid = 1 or countryid = 2 or countryid = 3 ,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT CountryName FROM countries WHERE CountryId IN (1, 2, 3);","SELECT CountryName FROM countries WHERE CountryId IN (1, 2, 3)",select country from car_makers where id = 1 or id = 2 or id = 3,"SELECT countries.CountryId , countries.CountryName FROM countries WHERE countries.CountryId = ""value"" OR countries.CountryId = ""value"" OR countries.CountryId = ""value"""
"SELECT modelid FROM model_list WHERE model  =  ""amc""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc');,SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc'),"select t2.modelid from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.maker = ""amc""","SELECT model_list.ModelId FROM model_list JOIN car_makers WHERE car_makers.Maker = ""value"""
"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN (   SELECT Country   FROM car_makers   GROUP BY Country   HAVING COUNT(*) > 3 ) OR c.CountryId IN (   SELECT cm.Country   FROM car_makers cm   JOIN model_list ml ON cm.Id = ml.Maker   WHERE ml.Model = 'fiat' );","SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country LEFT JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Model = 'fiat' OR countries.CountryId IN (   SELECT Country   FROM car_makers   GROUP BY Country   HAVING COUNT(Id) > 3 )","select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.fullname = 'Fiat' group by t1.countryid having count ( * ) > 3","SELECT countries.CountryId , countries.CountryName FROM countries JOIN model_list WHERE model_list.Model = ""value"" UNION SELECT countries.CountryId , countries.CountryName FROM car_makers JOIN model_list JOIN countries GROUP BY countries.CountryId HAVING COUNT(*) > ""value"""
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,select money_rank from poker_player order by earnings desc limit 1,SELECT poker_player.Money_Rank FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1;,SELECT People_ID FROM poker_player ORDER BY Earnings DESC LIMIT 1,select people_id from poker_player order by earnings desc limit 1,SELECT poker_player.People_ID FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
SELECT Best_Finish FROM poker_player ORDER BY Earnings DESC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Best_Finish FROM poker_player WHERE People_ID = (   SELECT People_ID   FROM poker_player   ORDER BY Earnings DESC   LIMIT 1 );,SELECT Best_Finish FROM poker_player ORDER BY Earnings DESC LIMIT 1,select best_finish from poker_player order by earnings desc limit 1,SELECT poker_player.Best_Finish FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
SELECT Earnings FROM poker_player order by Earnings desc limit 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Earnings FROM poker_player ORDER BY Earnings DESC LIMIT 1;,SELECT Earnings FROM poker_player ORDER BY Earnings DESC LIMIT 1,select earnings from poker_player order by earnings desc limit 1,SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
SELECT COUNT ( DISTINCT Orchestra )  FROM orchestra,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT COUNT(*) FROM orchestra;,SELECT COUNT(*) FROM orchestra;,select count(*) from orchestra,SELECT COUNT(*) FROM orchestra
SELECT COUNT ( Orchestra )  FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance ) ,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT COUNT(*)  FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Orchestra_ID IS NULL;,SELECT COUNT(*) FROM orchestra o WHERE NOT EXISTS (SELECT 1 FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID);,select count ( * ) from orchestra where orchestra_id not in ( select orchestra_id from performance ),SELECT COUNT(*) FROM orchestra WHERE orchestra.Orchestra_ID NOT IN ( SELECT performance.Orchestra_ID FROM performance )
"SELECT Orchestra_ID, Orchestra FROM orchestra WHERE Orchestra_ID NOT IN  ( SELECT Orchestra_ID FROM performance ) ",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT o.Orchestra_ID, o.Orchestra FROM orchestra o WHERE NOT EXISTS (   SELECT 1    FROM performance p   WHERE p.Orchestra_ID = o.Orchestra_ID );","SELECT o.Orchestra_ID, o.Orchestra FROM orchestra o WHERE NOT EXISTS (SELECT 1 FROM performance p WHERE p.Orchestra_ID = o.Orchestra_ID);","select orchestra_id, orchestra from orchestra where orchestra_id not in ( select orchestra_id from performance )","SELECT orchestra.Orchestra_ID , orchestra.Orchestra FROM orchestra WHERE orchestra.Orchestra_ID NOT IN ( SELECT performance.Orchestra_ID FROM performance )"
"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id   =   T2.stadium_id WHERE T1.Year   =   2015",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2;","SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2","select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 intersect select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2015","SELECT stadium.Name , stadium.Location FROM stadium JOIN concert WHERE concert.Year = ""value"" INTERSECT SELECT stadium.Name , stadium.Location FROM concert JOIN stadium WHERE concert.Year = ""value"""
"SELECT year from concert where concert_name like ""%Super bootcamp%""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Year FROM concert WHERE concert_Name = 'Super bootcamp';,SELECT concert.Year FROM concert WHERE concert_Name = 'Super bootcamp',"select year from concert where concert_name = ""Super bootcamp""","SELECT concert.Year FROM concert WHERE concert.concert_Name = ""value"""
"SELECT year from concert where concert_name like ""%Auditions%""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Year FROM concert WHERE concert_Name = 'Auditions';,SELECT concert.Year FROM concert WHERE concert_Name = 'Auditions',"select year from concert where concert_name = ""Auditions""","SELECT concert.Year FROM concert WHERE concert.concert_Name = ""value"""
"SELECT T1.name from stadium as T1 join  concert as T2 on T1.stadium_id  =  T2.stadium_id where T2.concert_name like ""%Auditions%""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT s.Name FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.concert_Name = 'Auditions';,SELECT stadium.Name FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.concert_Name = 'Auditions',"select t2.name from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.concert_name = ""Auditions""","SELECT stadium.Name FROM concert JOIN stadium WHERE concert.concert_Name = ""value"""
"SELECT T2.name , T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 or T1.Year  =  2015",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN (2014, 2015) GROUP BY s.Name, s.Location;","SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN (2014, 2015) GROUP BY stadium.Stadium_ID","select t2.name, t2.location from concert as t1 join stadium as t2 on t1.stadium_id = t2.stadium_id where t1.year = 2014 or t1.year = 2015","SELECT stadium.Name , stadium.Location FROM stadium JOIN concert WHERE concert.Year = ""value"" OR concert.Year = ""value"""
"SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) AS num_flights FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';,SELECT COUNT(f.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';,select count ( * ) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t1.airline = 'United Airlines',"SELECT COUNT(*) FROM flights JOIN airlines WHERE airlines.Airline = ""value"" AND airlines.Country = ""value"""
"SELECT count ( distinct T2.DestAirport )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(DISTINCT DestAirport) AS num_dest_airports FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';,SELECT COUNT(DISTINCT f.DestAirport) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines';,select count ( distinct destairport ) from flights as t1 join airlines as t2 on t1.airline = t2.uid where t2.airline = 'United Airlines',"SELECT COUNT(flights.DestAirport) FROM flights JOIN airlines WHERE airlines.Airline = ""value"" AND airlines.Country = ""value"""
"SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   ""United Airlines"" AND T2.DestAirport   =   ""ASY""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) AS num_flights_to_ASY FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY';,SELECT COUNT(f.FlightNo) FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY';,select count ( * ) from flights as t1 join airports as t2 on t1.destairport = t2.airportcode where t2.airportcode = 'ASY',"SELECT COUNT(*) FROM flights JOIN airlines WHERE airlines.Country = ""value"" AND flights.DestAirport = ""value"""
SELECT degree_program_id from Student_Enrolment,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT degree_program_id FROM Student_Enrolment;,SELECT degree_program_id FROM Student_Enrolment,select distinct degree_program_id from student_enrolment,SELECT Student_Enrolment.degree_program_id FROM Student_Enrolment
SELECT semester_id from Student_Enrolment,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT semester_id FROM Student_Enrolment;,SELECT semester_id FROM Student_Enrolment,select distinct semester_id from student_enrolment,SELECT Student_Enrolment.semester_id FROM Student_Enrolment
SELECT semester_name from semesters,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT semester_name FROM Semesters;,SELECT semester_name FROM Semesters,select semester_name from semesters,SELECT Semesters.semester_name FROM Semesters
"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id   =   T2.semester_id GROUP BY T1.semester_id ORDER BY count ( * )  DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;","SELECT semester_id, semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY semester_id, semester_name ORDER BY COUNT(student_id) DESC LIMIT 1","select t2.semester_name, t1.semester_id from student_enrolment as t1 join semesters as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count ( * ) desc limit 1","SELECT Semesters.semester_name , Semesters.semester_id FROM Semesters JOIN Student_Enrolment GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1"
"SELECT GovernmentForm, avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT GovernmentForm, AVG(LifeExpectancy) AS avg_life_expectancy FROM country GROUP BY GovernmentForm;","SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy, GovernmentForm FROM country GROUP BY GovernmentForm","select governmentform, avg(lifeexpectancy) from country group by governmentform","SELECT country.GovernmentForm , AVG(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm"
SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT GovernmentForm, AVG(LifeExpectancy) AS avg_life_expectancy FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;","SELECT GovernmentForm, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72",select governmentform from country group by governmentform having avg ( lifeexpectancy ) > 72,"SELECT country.GovernmentForm FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > ""value"""
"SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT GovernmentForm, SUM(Population) AS total_population FROM country WHERE GovernmentForm IN (   SELECT GovernmentForm   FROM country   GROUP BY GovernmentForm   HAVING AVG(LifeExpectancy) > 72 ) GROUP BY GovernmentForm;","SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE GovernmentForm IN (SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72) GROUP BY GovernmentForm","select governmentform, population from country group by governmentform having avg ( lifeexpectancy ) > 72","SELECT country.GovernmentForm , country.Population FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > ""value"""
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT id FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' );,SELECT TV_Channel.id FROM TV_Channel WHERE NOT EXISTS (   SELECT 1   FROM Cartoon   WHERE Cartoon.Directed_by = 'Ben Jones'   AND TV_Channel.id = Cartoon.Channel ),"select id from tv_channel except select channel from cartoon where directed_by = ""Ben Jones""","SELECT TV_Channel.id FROM TV_Channel EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = ""value"""
SELECT id FROM TV_Channel where id in  ( SELECT channel FROM cartoon WHERE directed_by   =   'Ben Jones' ) ,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones';,SELECT DISTINCT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones',"select channel from cartoon where directed_by = ""Ben Jones""","SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon WHERE Cartoon.Directed_by = ""value"""
SELECT Title FROM Cartoon where directed_by   =   'Ben Jones',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT c.Title, t.series_name FROM Cartoon c JOIN TV_Channel t ON c.Channel = t.id;",SELECT Cartoon.Title FROM Cartoon,select title from cartoon,"SELECT Cartoon.Title FROM TV_Channel JOIN Cartoon WHERE TV_Channel.id = ""value"""
SELECT document_id FROM Paragraphs,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Document_ID FROM Documents;,SELECT Document_ID FROM Documents,select document_id from documents,SELECT Documents.Document_ID FROM Documents
"SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID;","SELECT Document_ID, COUNT(Paragraph_ID) AS NumberOfParagraphs FROM Paragraphs GROUP BY Document_ID","select document_id, count ( * ) from paragraphs group by document_id","SELECT Documents.Document_Name , COUNT(*) FROM Documents JOIN Paragraphs GROUP BY Paragraphs.Document_ID"
"SELECT document_id ,  count ( * )  FROM Paragraphs GROUP BY document_id ORDER BY document_id",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT Document_ID, COUNT(*) AS Paragraph_Count FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID;","SELECT Document_ID, COUNT(Paragraph_ID) AS NumberOfParagraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID","select document_id, count ( * ) from paragraphs group by document_id order by document_id","SELECT Documents.Document_Name , COUNT(*) FROM Documents JOIN Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*) ASC"
"SELECT  owner_id,zip_code from Owners",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT owner_id, zip_code FROM Owners;","SELECT owner_id, zip_code FROM Owners","select owner_id, zip_code from owners","SELECT Owners.owner_id , Owners.zip_code FROM Owners"
"SELECT T1.owner_id , T2.dog_id ,T3.cost_of_treatment  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT o.owner_id, d.dog_id, t.cost_of_treatment FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id;","SELECT Owners.owner_id, Dogs.dog_id, Treatments.cost_of_treatment FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id","select t1.owner_id, t2.dog_id, t2.cost_of_treatment from owners as t1 join treatments as t2 on t1.owner_id = t2.professional_id","SELECT Owners.owner_id , Dogs.dog_id , Treatments.cost_of_treatment FROM Owners JOIN Dogs JOIN Treatments"
"SELECT  T1.first_name,T1.owner_id  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT o.first_name, o.owner_id, SUM(t.cost_of_treatment) AS total_cost FROM Owners o  JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id ORDER BY total_cost DESC LIMIT 1;","SELECT Owners.first_name, Owners.owner_id, SUM(Treatments.cost_of_treatment) AS total_cost FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id ORDER BY total_cost DESC LIMIT 1","select t1.first_name, t1.owner_id from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by sum ( t3.cost_of_treatment ) desc limit 1",SELECT Owners.first_name FROM Owners JOIN Dogs JOIN Treatments GROUP BY Dogs.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1
"SELECT last_name  from Owners where first_name = ""Jaclyn""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT o.first_name, o.last_name, o.owner_id, SUM(t.cost_of_treatment) AS total_cost FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id WHERE o.first_name = 'Jaclyn' GROUP BY o.owner_id ORDER BY total_cost DESC LIMIT 1;",SELECT last_name FROM Owners WHERE first_name = 'Jaclyn',"select t1.first_name, t1.last_name,t1.owner_id from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id join treatments as t3 on t2.dog_id = t3.dog_id group by t1.owner_id order by sum ( t3.cost_of_treatment ) desc limit 1","SELECT Owners.first_name , Owners.last_name , Treatments.cost_of_treatment FROM Owners JOIN Dogs JOIN Treatments GROUP BY Dogs.owner_id ORDER BY SUM(Treatments.cost_of_treatment) DESC LIMIT 1"
"SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum ( T3.cost_of_treatment )  DESC LIMIT 1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id WHERE o.first_name = 'Jaclyn' AND o.last_name = 'Stoltenberg' GROUP BY o.owner_id ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;","SELECT owner_id, zip_code FROM Owners WHERE first_name = 'Jaclyn' AND last_name = 'Stoltenberg'","select t1.owner_id, t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.first_name = ""Jaclyn"" and t1.last_name = ""Stoltenberg""","SELECT Owners.owner_id , Owners.zip_code FROM Owners JOIN Dogs WHERE Owners.first_name = ""value"" AND Owners.last_name = ""value"""
SELECT FlightNo FROM Flights,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT FlightNo FROM flights;,SELECT FlightNo FROM flights;,select flightno from flights,SELECT flights.FlightNo FROM flights
"SELECT FlightNo,DestAirport FROM Flights",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT FlightNo, DestAirport FROM flights;","SELECT FlightNo, DestAirport FROM flights;","select flightno,destairport from flights","SELECT flights.FlightNo , flights.DestAirport FROM flights"
"SELECT count ( * )  FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.city   =   ""Aberdeen"" OR T2.city   =   ""Abilene""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT COUNT(*) AS quantity  FROM flights WHERE DestAirport IN (   SELECT AirportCode   FROM airports   WHERE City IN ('Aberdeen', 'Abilene') );","SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene');",select count ( * ) from airports as t1 join flights as t2 on t1.airportcode = t2.destairport where t1.city = 'Aberdeen' or t1.city = 'Abilene',"SELECT COUNT(*) FROM flights JOIN airports WHERE airports.City = ""value"" OR airports.City = ""value"""
SELECT DESTAIRPORT FROM Flights GROUP BY DESTAIRPORT order by count ( * )  desc limit 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT City FROM airports WHERE AirportCode = (   SELECT DestAirport   FROM flights   GROUP BY DestAirport   ORDER BY COUNT(*) DESC   LIMIT 1 );,"SELECT City, COUNT(*) AS FlightCount FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY City ORDER BY FlightCount DESC LIMIT 1;",select city from airports group by city order by count ( * ) desc limit 1,SELECT airports.City FROM airports JOIN flights GROUP BY flights.DestAirport ORDER BY COUNT(*) DESC LIMIT 1
"SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =   T2.AirportCode WHERE T2.City   =   ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*)  FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';,SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';,select count(*) from airports as t1 join flights as t2 on t1.airportcode = t2.destairport where t1.city = 'Aberdeen',"SELECT COUNT(*) FROM flights JOIN airports WHERE airports.City = ""value"""
"SELECT count ( * )  FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.sourceAirport   =   T2.AirportCode WHERE T2.City   =   ""Aberdeen""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*)  FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';,SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';,select count ( * ) from airports as t1 join flights as t2 on t1.airportcode = t2.destairport where t1.city = 'Aberdeen',"SELECT COUNT(*) FROM airports JOIN flights WHERE airports.City = ""value"""
"SELECT Name FROM country WHERE Continent   =   ""Africa""  AND population  <   ( SELECT max ( population )  FROM country WHERE Continent   =   ""Asia"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Name FROM country c WHERE c.Continent = 'Africa' AND c.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');,SELECT C1.Name FROM country AS C1 WHERE C1.Continent = 'Africa' AND C1.Population < (SELECT MIN(C2.Population) FROM country AS C2 WHERE C2.Continent = 'Asia'),select name from country where continent = 'Africa' and population < ( select min ( population ) from country where continent = 'Asia' ),"SELECT country.Name FROM country WHERE country.Population < ( SELECT MIN(country.Population) FROM country WHERE country.Continent = ""value"" )"
"SELECT continent FROM country WHERE name  =  ""Aruba""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Continent FROM country WHERE Name = 'Aruba';,SELECT Continent FROM country WHERE Name = 'Aruba',select distinct t1.name from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = 'Africa' and t2.name = 'Aruba',"SELECT country.Continent FROM country WHERE country.Name = ""value"""
"SELECT localname FROM country WHERE name  =  ""Angola""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT LocalName FROM country WHERE Name = 'Angola';,SELECT LocalName FROM country WHERE Name = 'Angola',select localname from country where name = 'Angola',"SELECT country.LocalName FROM country WHERE country.Name = ""value"""
"SELECT SurfaceArea FROM country WHERE name  =  ""Afghanistan""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SurfaceArea FROM country WHERE Name = 'Afghanistan';,SELECT SurfaceArea FROM country WHERE Code = 'AFG',"select surfacearea from country where name = ""Afghanistan""","SELECT country.SurfaceArea FROM country WHERE country.Name = ""value"""
"SELECT Code FROM country WHERE name  =  ""Aruba""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Code FROM country WHERE Name = 'Aruba';,SELECT Code FROM country WHERE Name = 'Aruba',select code from country where name = 'Aruba',"SELECT country.Code FROM country WHERE country.Name = ""value"""
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT DISTINCT first_name FROM owners UNION SELECT DISTINCT first_name  FROM professionals EXCEPT SELECT DISTINCT name FROM dogs;,SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals EXCEPT SELECT name FROM Dogs;,"select first_name, last_name, street from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id except select t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id","SELECT Professionals.first_name , Professionals.last_name FROM Professionals EXCEPT SELECT Dogs.name FROM Owners JOIN Dogs"
"SELECT email_address FROM Professionals WHERE First_Name  =  ""Taryn""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT email_address  FROM professionals WHERE first_name = 'Taryn';,SELECT email_address FROM Professionals WHERE first_name = 'Taryn';,"select email_address from professionals where first_name = ""Taryn""","SELECT Professionals.email_address FROM Professionals WHERE Professionals.first_name = ""value"""
"SELECT state FROM Professionals WHERE First_Name  =  ""Jayson""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT state FROM professionals WHERE first_name = 'Jayson';,SELECT state FROM Professionals WHERE first_name = 'Jayson';,"select state from professionals where first_name = ""Jayson""","SELECT Professionals.state FROM Professionals WHERE Professionals.first_name = ""value"""
SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT DISTINCT cm.FullName FROM car_makers cm JOIN car_names cn ON cm.Id = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;,SELECT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT Model FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = 1970)));,select t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.modelid join cars_data as t3 on t3.id = t2.modelid where t3.year = 1970,"SELECT car_makers.FullName FROM car_makers JOIN cars_data WHERE cars_data.Year = ""value"""
"SELECT T3.model, T3.make FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker JOIN CAR_NAMES AS T3 ON T2.model   =   T3.model JOIN CARS_DATA AS T4 ON T3.MakeId   =   T4.id WHERE T4.year   =   '1970'",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT cn.Model, cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;","SELECT Model, Make FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year = 1970);","select t2.model, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.year = 1970","SELECT car_names.Model , car_names.Make FROM car_names JOIN cars_data WHERE cars_data.Year = ""value"""
SELECT T1.Fullname FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970' ORDER BY T4.weight DESC limit 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT cm.FullName FROM car_makers cm JOIN car_names cn ON cm.Id = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970 ORDER BY cd.Weight DESC LIMIT 1;,SELECT FullName FROM car_makers WHERE Id = (SELECT Maker FROM model_list WHERE ModelId = (SELECT Model FROM car_names WHERE MakeId = (SELECT Id FROM cars_data WHERE Year = 1970 ORDER BY Weight DESC LIMIT 1)));,select t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.maker join cars_data as t3 on t3.id = t2.model where t3.year = 1970 order by t3.weight desc limit 1,"SELECT car_makers.FullName FROM car_makers JOIN model_list JOIN cars_data WHERE cars_data.Year = ""value"" ORDER BY cars_data.Weight DESC LIMIT 1"
"SELECT channel, id FROM cartoon",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Title  FROM Cartoon WHERE Directed_by = 'Ben Jones';,SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';,"select t1.id from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = ""Ben Jones""","SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon WHERE Cartoon.Directed_by = ""value"""
SELECT series_name FROM TV_Channel EXCEPT SELECT series_name FROM TV_channel WHERE language  =  'Italian',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Language FROM TV_Channel WHERE Language != 'Italian';,"SELECT id, series_name FROM TV_Channel WHERE Language != 'Italian';","select * from cartoon as t1 join tv_series as t2 on t1.id = t2.channel join tv_channel as t3 on t1.channel = t3.id where t3.language!= ""Italian""","SELECT * FROM TV_Channel WHERE TV_Channel.Language != ""value"""
SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT DISTINCT TV_Channel.id FROM TV_Channel  LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel AND Cartoon.Directed_by = 'Ben Jones' WHERE Cartoon.id IS NULL;,SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');,"select t1.id from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel except select t1.id from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by = ""Ben Jones""","SELECT TV_Channel.id FROM TV_Channel EXCEPT SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Directed_by = ""value"""
select avg ( Number_products )  from shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT AVG(Number_products) AS avg_num_products FROM shop;,SELECT AVG(Number_products) FROM shop;,select avg(number_products) from shop,SELECT AVG(shop.Number_products) FROM shop
select Name from shop where Number_products > 6685,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Name  FROM shop WHERE Number_products > 6685;,SELECT Name FROM shop WHERE Number_products > 6685;,select name from shop where number_products > 6685,"SELECT shop.Name FROM shop WHERE shop.Number_products > ""value"""
select count ( * )  from shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT COUNT(*) AS total_stores FROM shop;,SELECT COUNT(*) FROM shop;,select count ( * ) from shop,SELECT COUNT(*) FROM shop
SELECT count ( * )  FROM flights,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights;,SELECT COUNT(*) FROM flights;,select count ( * ) from flights,SELECT COUNT(*) FROM flights
SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode   =   T2.SourceAirport GROUP BY T1.City ORDER BY count ( * )  ASC LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT a.City FROM airports a JOIN flights f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY COUNT(*) ASC LIMIT 1;,"SELECT City, COUNT(flights.SourceAirport) AS DepartingFlights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY City ORDER BY DepartingFlights ASC LIMIT 1;",select t1.city from airports as t1 join flights as t2 on t1.airportcode = t2.destairport group by t1.city order by count ( * ) asc limit 1,SELECT airports.City FROM airports JOIN flights GROUP BY airports.City ORDER BY COUNT(*) ASC LIMIT 1
"SELECT FlightNo FROM flights WHERE SourceAirport = ""APG""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT FlightNo FROM flights WHERE SourceAirport = 'APG' OR DestAirport = 'APG';,SELECT FlightNo FROM flights WHERE SourceAirport = 'APG' OR DestAirport = 'APG';,"select flightno from flights where sourceairport = ""APG""","SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = ""value"""
"SELECT AirportName FROM airports WHERE AirportCode = ""DYS""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT AirportName FROM airports WHERE AirportCode = 'DYS';,SELECT AirportName FROM airports WHERE AirportCode = 'DYS';,select airportname from airports where airportcode = 'DYS',"SELECT airports.AirportName FROM airports WHERE airports.AirportCode = ""value"""
"SELECT CITY FROM airports WHERE AirportCode = ""ABR""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT City FROM airports WHERE AirportCode = 'ABR';,SELECT City FROM airports WHERE AirportCode = 'ABR';,"select city from airports where airportcode = ""ABR""","SELECT airports.City FROM airports WHERE airports.AirportCode = ""value"""
"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   ""English"" AND IsOfficial   =   ""T"" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   ""Dutch"" AND IsOfficial   =   ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'",SELECT Country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE (countrylanguage.Language = 'English' OR countrylanguage.Language = 'Dutch') AND countrylanguage.IsOfficial = 'T',"select countrycode from countrylanguage where language = ""English"" or language = ""Dutch""","SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"" OR countrylanguage.Language = ""value"""
"SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  ""Belgium"" and T2.isofficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT cl.Language FROM countrylanguage cl WHERE cl.CountryCode = 'BEL' AND cl.IsOfficial = 'T',SELECT Language FROM countrylanguage WHERE CountryCode = 'BEL' AND IsOfficial = 'T',"select language from countrylanguage where countrycode = ""Belgium""","SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.Name = ""value"""
"SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.language  =  ""Arabic""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Name FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Arabic',SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Arabic',"select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""Arabic""","SELECT country.Name FROM countrylanguage JOIN country WHERE countrylanguage.Language = ""value"""
"SELECT T2.language FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T1.name  =  ""Egypt""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT cl.Language FROM countrylanguage cl WHERE cl.CountryCode = (SELECT Code FROM country WHERE Name = 'Egypt'),SELECT Language FROM countrylanguage WHERE CountryCode = 'EGY',"select distinct t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.name = ""Egypt""","SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.Name = ""value"""
"SELECT count ( T1.name )  FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  ""Arabic"" and T2.isOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM countrylanguage cl WHERE cl.Language = 'Arabic' AND cl.IsOfficial = 'T',SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Arabic' AND IsOfficial = 'T',"select count ( * ) from countrylanguage where language = ""Arabic""","SELECT COUNT(*) FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"" AND countrylanguage.IsOfficial = ""value"""
"SELECT T1.name FROM country as T1 join countrylanguage as T2 on T1.code  =  T2.countrycode where T2.Language  =  ""Arabic"" and T2.isOfficial  =  ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Arabic' AND cl.IsOfficial = 'T',SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Arabic' AND countrylanguage.IsOfficial = 'T',"select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""Arabic""","SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"""
"SELECT name,population FROM country WHERE Continent   =   ""Africa""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Name, Population  FROM country WHERE Continent = 'Africa';",SELECT Population FROM country WHERE Continent = 'Africa';,select population from country where continent = 'Africa',"SELECT country.Population FROM country WHERE country.Continent = ""value"""
"SELECT name,population FROM country WHERE Continent   =   ""Asia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Name, Population FROM country WHERE Continent = 'Asia';","SELECT Name, Population FROM country WHERE Continent = 'Asia';","select name, population from country where continent = 'Asia'","SELECT country.Name , country.Population FROM country WHERE country.Continent = ""value"""
"SELECT Name FROM country WHERE Continent   =   ""Asia""  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   ""Africa"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa');,SELECT Name FROM country AS AsiaCountries WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');,select name from country where continent = 'Asia' and population > ( select max ( population ) from country where continent = 'Africa' ),"SELECT country.Name FROM country WHERE country.Population > ( SELECT MIN(country.Population) FROM country WHERE country.Continent = ""value"" )"
"SELECT Name,population FROM country WHERE Continent   =   ""Asia""  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   ""Africa"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT c1.Name, c1.Population FROM country c1 WHERE c1.Continent = 'Asia'   AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa');",SELECT Population FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');,select t2.population from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = 'Asia' and t2.population > ( select max ( population ) from country where continent = 'Africa' ),"SELECT country.Population FROM country WHERE country.Population > ( SELECT MIN(country.Population) FROM country WHERE country.Continent = ""value"" )"
"SELECT Name,GovernmentForm FROM country WHERE Continent   =   ""Asia""  AND population  >   ( SELECT min ( population )  FROM country WHERE Continent   =   ""Africa"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT c1.Name, c1.Population, c1.GovernmentForm FROM country c1 WHERE c1.Continent = 'Asia'   AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa');",SELECT GovernmentForm FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');,select governmentform from country where population > ( select max ( population ) from country where continent = 'Asia' ),"SELECT country.GovernmentForm FROM country WHERE country.Population > ( SELECT MIN(country.Population) FROM country WHERE country.Continent = ""value"" )"
"SELECT Name FROM country WHERE Continent   =   ""Asia"" ORDER BY LifeExpectancy LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;,SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1,select name from country where continent = 'Asia' order by lifeexpectancy limit 1,"SELECT country.Name FROM country WHERE country.Continent = ""value"" ORDER BY country.LifeExpectancy ASC LIMIT 1"
"SELECT Name FROM country WHERE Continent   =   ""Africa"" ORDER BY LifeExpectancy LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy ASC LIMIT 1;,SELECT Name FROM country WHERE Continent = 'Africa' ORDER BY LifeExpectancy ASC LIMIT 1,select name from country where continent = 'Africa' order by lifeexpectancy limit 1,"SELECT country.Name FROM country WHERE country.Continent = ""value"" ORDER BY country.LifeExpectancy ASC LIMIT 1"
"SELECT GNP FROM country WHERE name = ""Afghanistan""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT GNP FROM country WHERE Name = 'Afghanistan';,SELECT GNP FROM country WHERE Code = 'AFG',"select gnp from country where name = ""Afghanistan""","SELECT country.GNP FROM country WHERE country.Name = ""value"""
"SELECT Population FROM country WHERE name = ""Afghanistan""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Population FROM country WHERE Name = 'Afghanistan';,SELECT Population FROM country WHERE Code = 'AFG',"select population from country where name = ""Afghanistan""","SELECT country.Population FROM country WHERE country.Name = ""value"""
SELECT Earnings FROM poker_player,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT MAX(Earnings) AS Winning_Amount FROM poker_player;,SELECT Earnings FROM poker_player WHERE Best_Finish = 1.0;,select earnings from poker_player order by earnings desc limit 1,SELECT poker_player.Earnings FROM poker_player JOIN people
SELECT Earnings FROM poker_player order by Earnings desc,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
","SELECT Name, Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings DESC;","SELECT Poker_Player_ID, Earnings FROM poker_player ORDER BY Earnings DESC;",select earnings from poker_player order by earnings desc,SELECT poker_player.Earnings FROM poker_player ORDER BY poker_player.Earnings ASC
SELECT Final_Table_Made FROM poker_player order by Earnings asc limit 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Final_Table_Made FROM poker_player WHERE Earnings = (SELECT MIN(Earnings) FROM poker_player);,SELECT Final_Table_Made FROM poker_player ORDER BY Earnings ASC LIMIT 1;,select final_table_made from poker_player order by earnings limit 1,SELECT COUNT(poker_player.Final_Table_Made) FROM poker_player ORDER BY poker_player.Earnings ASC LIMIT 1
SELECT Final_Table_Made FROM poker_player order by Earnings desc limit 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Final_Table_Made FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);,SELECT Final_Table_Made FROM poker_player ORDER BY Earnings DESC LIMIT 1;,select final_table_made from poker_player order by earnings desc limit 1,SELECT COUNT(poker_player.Final_Table_Made) FROM poker_player ORDER BY poker_player.Earnings DESC LIMIT 1
SELECT template_id FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT Templates.Template_ID, Documents.Document_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID;","SELECT Templates.Template_ID, Documents.Document_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID","select template_id,document_id from documents","SELECT Templates.Template_ID , Documents.Document_ID FROM Templates JOIN Documents"
"SELECT template_id ,Document_ID FROM Documents",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT Templates.Template_ID, Documents.Document_ID FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID;","SELECT Templates.Template_ID, Documents.Document_ID FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID","select t1.template_id, t2.document_id from templates as t1 join documents as t2 on t1.template_id = t2.template_id","SELECT Templates.Template_ID , Documents.Document_ID FROM Templates JOIN Documents"
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);,SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents),select template_id from templates except select template_id from documents,SELECT Templates.Template_ID FROM Templates EXCEPT SELECT Documents.Template_ID FROM Documents
"SELECT T1.template_id ,T1.Template_Type_Code FROM Templates as T1 join Documents as T2 on T1.Template_ID = T2.Template_ID",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT Templates.Template_ID, Ref_Template_Types.Template_Type_Code FROM Templates  LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Documents.Document_ID IS NULL;","SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)","select t1.template_id, t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id except select t1.template_id, t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id","SELECT Templates.Template_ID , Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID IN ( SELECT Templates.Template_ID FROM Templates EXCEPT SELECT Documents.Template_ID FROM Documents )"
SELECT count ( * )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(DISTINCT dog_id) AS dogs_with_treatments FROM Treatments;,SELECT COUNT(DISTINCT dog_id) FROM Treatments,select count(*) from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id,SELECT COUNT(*) FROM Dogs WHERE Dogs.dog_id IN ( SELECT Treatments.dog_id FROM Treatments )
SELECT min ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT MIN(age) AS youngest_age  FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);,SELECT MIN(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments),select min ( age ) from dogs where dog_id in ( select dog_id from treatments ),SELECT Dogs.age FROM Dogs WHERE Dogs.dog_id NOT IN ( SELECT Treatments.dog_id FROM Treatments ) ORDER BY Dogs.age ASC LIMIT 1
SELECT max ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT MAX(age) AS oldest_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);,SELECT MAX(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments),select max ( age ) from dogs where dog_id in ( select dog_id from treatments ),SELECT Dogs.age FROM Dogs WHERE Dogs.dog_id IN ( SELECT Treatments.dog_id FROM Treatments )
SELECT avg ( age )  FROM Dogs WHERE dog_id IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT AVG(age) AS average_age FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments);,SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments),select avg ( age ) from dogs where dog_id in ( select dog_id from treatments ),SELECT AVG(Dogs.age) FROM Dogs WHERE Dogs.dog_id IN ( SELECT Treatments.dog_id FROM Treatments )
SELECT distinct semester_name FROM Semesters,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(DISTINCT semester_name) FROM Semesters;,SELECT COUNT(DISTINCT semester_name) FROM Semesters;,select count ( distinct semester_name ) from semesters,SELECT COUNT(Semesters.semester_name) FROM Semesters
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL;,SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);,select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment ),SELECT COUNT(Semesters.semester_name) FROM Semesters WHERE Semesters.semester_id NOT IN ( SELECT Student_Enrolment.semester_id FROM Student_Enrolment )
"SELECT semester_id,semester_name,semester_description FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.semester_id, s.semester_name, s.semester_description FROM Semesters s WHERE s.semester_id NOT IN (   SELECT se.semester_id   FROM Student_Enrolment se );","SELECT semester_id, semester_name, semester_description FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);","select semester_id,semester_description from semesters where semester_id not in ( select semester_id from student_enrolment )","SELECT Semesters.semester_name , Semesters.semester_description FROM Semesters WHERE Semesters.semester_id NOT IN ( SELECT Student_Enrolment.semester_id FROM Student_Enrolment )"
"SELECT count ( * ) FROM student WHERE Sex = ""F""",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*)  FROM Student WHERE Sex = 'F';,SELECT COUNT(*) FROM Student WHERE Sex = 'F';,"select count ( * ) from student where sex = ""F""","SELECT COUNT(*) FROM Student WHERE Student.Sex = ""value"""
"SELECT LName,Fname  FROM student order  by  Age  limit 1",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT Fname, LName FROM Student WHERE Age = (SELECT MIN(Age) FROM Student);","SELECT Fname, LName FROM Student WHERE Age = (SELECT MIN(Age) FROM Student);","select fname,lname from student order by age limit 1","SELECT Student.Fname , Student.LName FROM Student ORDER BY Student.Age ASC LIMIT 1"
SELECT avg ( age )  FROM student WHERE stuid NOT IN  ( SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid ) ,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT AVG(Age)  FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);,SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);,select avg ( age ) from student where stuid not in ( select t2.stuid from has_pet as t1 join student as t2 on t1.stuid = t2.stuid ),SELECT AVG(Student.Age) FROM Student WHERE Student.StuID NOT IN ( SELECT Has_Pet.StuID FROM Has_Pet )
SELECT city_code  FROM student WHERE StuID = 1003,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT city_code FROM Student WHERE StuID = 1003;,SELECT city_code FROM Student WHERE StuID = 1003;,select city_code from student where stuid = 1003,"SELECT Student.city_code FROM Student WHERE Student.StuID = ""value"""
SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Country  FROM TV_Channel WHERE id IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' );,SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';,"select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = ""Todd Casey""","SELECT TV_Channel.Country FROM TV_Channel JOIN Cartoon WHERE Cartoon.Written_by = ""value"""
SELECT title FROM cartoon  WHERE written_by   =   'Todd Casey',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Title FROM Cartoon WHERE Written_by = 'Todd Casey';,SELECT Title FROM Cartoon WHERE Written_by = 'Todd Casey';,"select title from cartoon where written_by = ""Todd Casey""","SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = ""value"""
"SELECT directed_by FROM cartoon WHERE title  =  ""Enter the Outsiders!""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Directed_by  FROM Cartoon WHERE Title = 'Enter the Outsiders!';,SELECT Directed_by FROM Cartoon WHERE Title = 'Enter the Outsiders!';,select directed_by from cartoon where title = 'Enter the Outsiders!',"SELECT Cartoon.Directed_by FROM Cartoon WHERE Cartoon.Title = ""value"""
SELECT count ( distinct language )  from countrylanguage,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT Language) FROM countrylanguage;,SELECT COUNT(DISTINCT Language) FROM countrylanguage,select count ( distinct language ) from countrylanguage,SELECT COUNT(countrylanguage.Language) FROM countrylanguage
"SELECT population from country where name  =  ""Aruba""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Population FROM country WHERE Name = 'Aruba';,SELECT Population FROM country WHERE Name = 'Aruba',"select population from country where name = ""Aruba""","SELECT country.Population FROM country WHERE country.Name = ""value"""
"SELECT GNPOLD from country where name  =  ""Afghanistan""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT GNPOld FROM country WHERE Name = 'Afghanistan';,SELECT GNPOld FROM country WHERE Name = 'Afghanistan',"select gnpold from country where name = ""Afghanistan""","SELECT country.GNPOld FROM country WHERE country.Name = ""value"""
SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   >  50,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;,SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50,select country_code from players group by country_code having count(*) > 50,"SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) > ""value"""
SELECT country_code FROM players GROUP BY country_code HAVING count ( * )   <  40,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) < 40;,SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) < 40,select country_code from players group by country_code having count ( * ) < 40,"SELECT players.country_code FROM players GROUP BY players.country_code HAVING COUNT(*) < ""value"""
"SELECT first_name,last_name FROM players where country_code = 'AHO'",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT first_name, last_name  FROM players WHERE country_code = 'AHO';","SELECT first_name, last_name FROM players WHERE country_code = 'AHO'","select first_name, last_name from players where country_code = ""AHO""","SELECT players.first_name , players.last_name FROM players WHERE players.country_code = ""value"""
SELECT player_id FROM players where country_code = 'AHO',wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT player_id, first_name, last_name FROM players WHERE country_code = 'AHO';",SELECT player_id FROM players WHERE country_code = 'AHO',"select player_id from players where country_code = ""AHO""","SELECT players.player_id FROM players WHERE players.country_code = ""value"""
SELECT hand FROM players where player_id = 206449,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT hand FROM players WHERE player_id = 206449;,SELECT hand FROM players WHERE player_id = 206449,select hand from players where player_id = 206449,"SELECT players.hand FROM players WHERE players.player_id = ""value"""
SELECT count ( * )  FROM players where hand = 'U',wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) FROM players WHERE hand = (SELECT hand FROM players WHERE player_id = 206449);,SELECT COUNT(*) FROM players WHERE hand = (SELECT hand FROM players WHERE player_id = 206449),select count ( * ) from players where player_id = 206449,"SELECT COUNT(*) FROM players WHERE players.hand = ""value"" AND players.player_id = ""value"""
SELECT name FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel',battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT b.name FROM battle b WHERE b.id NOT IN (   SELECT s.lost_in_battle   FROM ship s   WHERE s.location = 'English Channel' );,SELECT b.name FROM battle b WHERE NOT EXISTS (   SELECT 1   FROM ship s   WHERE s.lost_in_battle = b.id AND s.location = 'English Channel' ),select name from battle except select t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.location = 'English Channel',"SELECT battle.name FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.location = ""value"" )"
SELECT RESULT  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT b.result FROM battle b WHERE b.id NOT IN (   SELECT s.lost_in_battle   FROM ship s   WHERE s.location = 'English Channel' );,SELECT b.result FROM battle b WHERE NOT EXISTS (   SELECT 1   FROM ship s   WHERE s.lost_in_battle = b.id AND s.location = 'English Channel' ),select result from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' ),"SELECT battle.result FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.location = ""value"" )"
SELECT bulgarian_commander FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT b.bulgarian_commander FROM battle b WHERE b.id NOT IN (   SELECT s.lost_in_battle   FROM ship s   WHERE s.location = 'English Channel' );,SELECT b.bulgarian_commander FROM battle b WHERE NOT EXISTS (   SELECT 1   FROM ship s   WHERE s.lost_in_battle = b.id AND s.location = 'English Channel' ),select bulgarian_commander from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' ),"SELECT battle.bulgarian_commander FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.location = ""value"" )"
SELECT date FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT b.date FROM battle b WHERE b.id NOT IN (   SELECT s.lost_in_battle   FROM ship s   WHERE s.location = 'English Channel' );,SELECT b.date FROM battle b WHERE NOT EXISTS (   SELECT 1   FROM ship s   WHERE s.lost_in_battle = b.id AND s.location = 'English Channel' ),select date from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' ),"SELECT battle.date FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.location = ""value"" )"
SELECT  latin_commander  FROM battle where name not in  ( SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle WHERE T2.location   =   'English Channel' ) ,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT b.latin_commander FROM battle b WHERE b.id NOT IN (   SELECT s.lost_in_battle   FROM ship s   WHERE s.location = 'English Channel' );,SELECT b.latin_commander FROM battle b WHERE NOT EXISTS (   SELECT 1   FROM ship s   WHERE s.lost_in_battle = b.id AND s.location = 'English Channel' ),select latin_commander from battle where id not in ( select lost_in_battle from ship where location = 'English Channel' ),"SELECT battle.latin_commander FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.location = ""value"" )"
SELECT COUNT ( * )  FROM shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT COUNT(*) FROM shop;,SELECT COUNT(*) FROM shop,select count ( * ) from shop,SELECT COUNT(*) FROM shop
SELECT MAX ( Number_products )  FROM shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT MAX(Number_products) FROM shop;,SELECT MAX(Number_products) FROM shop,select max ( number_products ) from shop,SELECT MAX(shop.Number_products) FROM shop
SELECT MIN ( Number_products )  FROM shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT MIN(Number_products) FROM shop;,SELECT MIN(Number_products) FROM shop,select min ( number_products ) from shop,SELECT MIN(shop.Number_products) FROM shop
SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code GROUP BY T1.breed_name ORDER BY count ( * )  DESC LIMIT 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT breed_name FROM Breeds ORDER BY breed_code LIMIT 1;,"SELECT The provided schema does not include information on rankings or any data that could be used to infer a ""top ranked"" breed. Therefore, I cannot generate a SQL query to answer this question based on the given schema.",select breed_name from breeds order by breed_name desc limit 1,SELECT Breeds.breed_name FROM Breeds JOIN Dogs GROUP BY Dogs.breed_code ORDER BY COUNT(*) DESC LIMIT 1
"SELECT count ( * )  FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code   =   T2.breed_code where T1.breed_name  =  ""Bulldog""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) FROM Dogs WHERE breed_code = 'BUL';,SELECT COUNT(dog_id) FROM Dogs WHERE breed_code = (SELECT breed_code FROM Breeds WHERE breed_name = 'Bulldog');,"select count ( * ) from breeds where breed_name = ""Bulldog""","SELECT COUNT(*) FROM Breeds JOIN Dogs WHERE Breeds.breed_name = ""value"""
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat';,SELECT Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog',"select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""dog""","SELECT Student.Fname FROM Has_Pet JOIN Pets JOIN Student WHERE Pets.PetType = ""value"""
SELECT count ( T2.StuId )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(DISTINCT StuID) FROM Has_Pet;,SELECT COUNT(DISTINCT Student.StuID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID,select count ( distinct stuid ) from has_pet,SELECT COUNT(*) FROM Student WHERE Student.StuID IN ( SELECT Has_Pet.StuID FROM Has_Pet )
"SELECT T3.pet_age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T1.Fname  =  ""Linda""",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT p.pet_age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Fname = 'Linda';,SELECT pet_age FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Fname = 'Linda',"select t1.age from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t1.fname = ""Linda"" and t3.pettype = ""cat""","SELECT Pets.pet_age FROM Pets JOIN Has_Pet JOIN Student WHERE Student.Fname = ""value"""
SELECT name FROM visitor WHERE Level_of_membership  >  4,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Name FROM visitor WHERE Level_of_membership > 4;,SELECT Name FROM visitor WHERE Level_of_membership > 4;,select name from visitor where level_of_membership > 4,"SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > ""value"""
"SELECT name, age FROM visitor WHERE Level_of_membership  >  4",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT Name, Age FROM visitor WHERE Level_of_membership > 4;","SELECT Name, Age FROM visitor WHERE Level_of_membership > 4;","select name, age from visitor where level_of_membership > 4","SELECT visitor.Name , visitor.Age FROM visitor WHERE visitor.Level_of_membership > ""value"""
"SELECT name ,  age FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT Name, Age FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;","SELECT Name, Age FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;","select name, age from visitor where level_of_membership > 4 order by age desc","SELECT visitor.Name , visitor.Age FROM visitor WHERE visitor.Level_of_membership > ""value"" ORDER BY visitor.Age ASC"
SELECT id FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT ID, Name, Age FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;","SELECT ID, Name, Age FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;","select name, id from visitor where level_of_membership > 4 order by age desc","SELECT visitor.ID FROM visitor WHERE visitor.Level_of_membership > ""value"""
"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) >= 2;","SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) = 2","select t2.first_name, t2.middle_name, t2.last_name from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id group by t1.student_id having count ( * ) = 2","SELECT Students.first_name , Students.middle_name , Students.last_name FROM Student_Enrolment JOIN Students GROUP BY Student_Enrolment.semester_id HAVING COUNT(*) = ""value"""
SELECT T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id   =   T2.student_id GROUP BY T1.student_id HAVING count ( * )    =   2,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) >= 2;","SELECT s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, se.semester_id HAVING COUNT(DISTINCT se.degree_program_id) = 2",select t2.student_id from student_enrolment as t1 join students as t2 on t1.student_id = t2.student_id group by t1.student_id having count ( * ) = 2,"SELECT Student_Enrolment.student_id FROM Student_Enrolment JOIN Students GROUP BY Student_Enrolment.semester_id HAVING COUNT(*) = ""value"""
SELECT email_address FROM Students where student_id  =  4,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT s.email_address FROM Students s WHERE s.student_id = 4;,SELECT email_address FROM Students WHERE student_id = 4,select email_address from students where student_id = 4,"SELECT Students.email_address FROM Students WHERE Students.student_id = ""value"""
SELECT date_first_registered FROM Students where first_name  =  'Timmothy' and middle_name  =  'Anna' and last_name  =  'Ward',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT s.date_first_registered FROM Students s WHERE s.first_name = 'Timmothy' AND s.middle_name = 'Anna' AND s.last_name = 'Ward';,SELECT date_first_registered FROM Students WHERE first_name = 'Timmothy' AND middle_name = 'Anna' AND last_name = 'Ward',"select date_first_registered from students where first_name = ""Timothy"" and middle_name = ""Anna"" and last_name = ""Ward""","SELECT Students.date_first_registered FROM Students WHERE Students.first_name = ""value"" AND Students.middle_name = ""value"" AND Students.last_name = ""value"""
SELECT count ( * )  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia',dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*)  FROM Owners WHERE state = 'Virginia';,SELECT COUNT(DISTINCT owner_id) FROM Owners WHERE state = 'Virginia';,"select count(*) from owners where state = ""Virginia""","SELECT COUNT(*) FROM Owners JOIN Dogs WHERE Owners.state = ""value"""
"SELECT T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia'",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name FROM Owners WHERE state = 'Virginia';","SELECT first_name, last_name FROM Owners WHERE state = 'Virginia';","select first_name, last_name from owners where state = ""Virginia""","SELECT Owners.first_name , Owners.last_name FROM Owners JOIN Dogs WHERE Owners.state = ""value"""
SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   =   'Virginia',dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT o.first_name, o.last_name, d.name  FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia';",SELECT Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia';,"select t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = ""Virginia""","SELECT Owners.first_name , Dogs.name FROM Owners JOIN Dogs WHERE Owners.state = ""value"""
"SELECT T2.breed_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  ""Bessie""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT b.breed_name FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code WHERE d.name = 'Bessie';,SELECT Breeds.breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code WHERE Dogs.name = 'Bessie';,"select breed_code from dogs where name = ""Bessie""","SELECT Dogs.breed_code FROM Dogs WHERE Dogs.name = ""value"""
"SELECT T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T2.name  =  ""Bessie""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT s.size_description  FROM Dogs d JOIN Sizes s ON d.size_code = s.size_code WHERE d.name = 'Bessie';,SELECT Sizes.size_description FROM Sizes JOIN Dogs ON Sizes.size_code = Dogs.size_code WHERE Dogs.name = 'Bessie';,"select t2.size_code from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t2.name = ""Bessie""","SELECT Dogs.size_code FROM Dogs WHERE Dogs.name = ""value"""
SELECT count ( Record_Company )  FROM orchestra,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT COUNT(DISTINCT Record_Company) FROM orchestra;,SELECT COUNT(DISTINCT Record_Company) FROM orchestra,select count ( distinct record_company ) from orchestra,SELECT COUNT(orchestra.Record_Company) FROM orchestra
SELECT count ( Orchestra_ID )  FROM orchestra,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT COUNT(*) FROM orchestra;,SELECT COUNT(*) FROM orchestra,select count ( * ) from orchestra,SELECT COUNT(*) FROM orchestra
select orchestra from orchestra order by Year_of_Founded,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT Orchestra, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded;","SELECT Orchestra, Year_of_Founded FROM orchestra ORDER BY Year_of_Founded ASC",select orchestra from orchestra order by year_of_founded desc,SELECT orchestra.Orchestra FROM orchestra ORDER BY orchestra.Year_of_Founded ASC
select year_of_founded  from orchestra where orchestra = 'Royal Danish Orchestra',orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT Year_of_Founded FROM orchestra WHERE Orchestra = 'Royal Danish Orchestra';,SELECT Year_of_Founded FROM orchestra WHERE Orchestra = 'Royal Danish Orchestra',"select year_of_founded from orchestra where orchestra = ""Royal Danish Orchestra""","SELECT orchestra.Year_of_Founded FROM orchestra WHERE orchestra.Orchestra = ""value"""
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT ( * )  DESC LIMIT 1,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT Record_Company, COUNT(*) AS NumberOfOrchestras FROM orchestra GROUP BY Record_Company ORDER BY NumberOfOrchestras DESC LIMIT 1",select record_company from orchestra group by record_company order by count ( * ) desc limit 1,SELECT orchestra.Record_Company FROM orchestra GROUP BY orchestra.Record_Company ORDER BY COUNT(*) DESC LIMIT 1
"SELECT count ( * )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline   =   T1.uid WHERE T1.Airline   =   ""United Airlines"" AND T2.DestAirport   =   ""ASY""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*)  FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY';,SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY',select count(*) from airlines as t1 join airports as t2 on t1.uid = t2.airportcode where t1.airline = 'United Airlines' and t2.airportcode = 'ASY',"SELECT COUNT(*) FROM flights JOIN airports JOIN airlines JOIN airlines WHERE airlines.Airline = ""value"""
"select uid from airlines where airline  =  ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT uid FROM airlines WHERE Airline = 'United Airlines';,SELECT uid FROM airlines WHERE Airline = 'United Airlines',select t1.uid from airlines as t1 join flights as t2 on t1.uid = t2.airline where t1.airline = 'United Airlines',"SELECT airlines.uid FROM airlines WHERE airlines.Airline = ""value"""
"SELECT count ( * )  FROM FLIGHTS WHERE airline  =  1 and DestAirport   =   "" ASY""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'ASY';,SELECT COUNT(*) FROM flights WHERE Airline = 1 AND DestAirport = 'ASY',select count ( * ) from airlines as t1 join flights as t2 on t1.uid = t2.airline where t2.destairport = 'ASY' and t1.uid = 1,"SELECT COUNT(*) FROM flights JOIN airports WHERE flights.DestAirport = ""value"" AND flights.Airline = ""value"""
"SELECT count ( * )  FROM CAR_names where model  =  ""volvo""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*)  FROM car_names WHERE Make LIKE 'volvo%';,SELECT COUNT(*) FROM car_names WHERE Make = 'volvo';,"select count(*) from car_names where model = ""volvo""","SELECT COUNT(*) FROM car_names WHERE car_names.Model = ""value"""
SELECT T1.id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT c.Id FROM cars_data c JOIN car_names n ON c.Id = n.MakeId WHERE n.Make LIKE 'volvo%' ORDER BY c.Accelerate ASC LIMIT 1;,SELECT MakeId FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Make = 'volvo' ORDER BY Accelerate ASC LIMIT 1;,select id from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.model = 'Volvo' order by accelerate limit 1,"SELECT cars_data.Id FROM car_names JOIN cars_data WHERE car_names.Model = ""value"" ORDER BY cars_data.Accelerate ASC LIMIT 1"
SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT c.Cylinders FROM cars_data c JOIN car_names n ON c.Id = n.MakeId WHERE n.Make LIKE 'volvo%' ORDER BY c.Accelerate ASC LIMIT 1;,SELECT Cylinders FROM cars_data WHERE Id = (SELECT MakeId FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE Make = 'volvo' ORDER BY Accelerate ASC LIMIT 1);,select cylinders from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t2.make = 'Volvo' order by t1.accelerate limit 1,"SELECT cars_data.Cylinders FROM car_names JOIN cars_data WHERE car_names.Model = ""value"" ORDER BY cars_data.Accelerate ASC LIMIT 1"
SELECT count ( * )  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM Highschooler;,SELECT COUNT(*) FROM Highschooler;,select count ( * ) from highschooler,SELECT COUNT(*) FROM Highschooler
SELECT count ( * )  FROM Friend,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM Friend;,SELECT COUNT(*) FROM Friend;,select count ( * ) from friend,SELECT COUNT(*) FROM Friend
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id;,SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id;,select distinct t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id,SELECT Highschooler.name FROM Highschooler JOIN Friend
SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id WHERE degree_summary_name   =   'Master',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelor';,SELECT semester_id FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor';,select distinct semester_id from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id where t2.degree_summary_name = 'Bachelor',"SELECT Student_Enrolment.semester_id FROM Student_Enrolment WHERE Student_Enrolment.degree_program_id = ""value"""
SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE T2.student_id  =  14,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT dp.degree_summary_description FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE se.student_id = 14;,SELECT Degree_Programs.degree_summary_description FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id WHERE Student_Enrolment.student_id = 14;,select degree_summary_description from degree_programs where degree_program_id = ( select degree_program_id from student_enrolment where student_id = 14 ),"SELECT Degree_Programs.degree_summary_description FROM Degree_Programs JOIN Student_Enrolment WHERE Student_Enrolment.student_id = ""value"""
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.mpg DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT Model, MAX(MPG) AS MaxMPG FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY Model ORDER BY MaxMPG DESC LIMIT 1;",SELECT car_names.Model  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  ORDER BY cars_data.MPG DESC  LIMIT 1,select t2.model from cars_data as t1 join model_list as t2 on t1.id = t2.modelid order by t1.mpg desc limit 1,SELECT car_names.Model FROM car_names JOIN cars_data ORDER BY cars_data.MPG DESC LIMIT 1
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId   =   T2.Id ORDER BY T2.horsepower DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT Model, MAX(Horsepower) AS MaxHP FROM cars_data  INNER JOIN car_names ON cars_data.Id = car_names.MakeId GROUP BY Model ORDER BY MaxHP DESC LIMIT 1;",SELECT car_names.Model FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY cars_data.Horsepower DESC LIMIT 1,select t2.model from cars_data as t1 join car_names as t2 on t1.id = t2.make order by t1.horsepower desc limit 1,SELECT car_names.Model FROM car_names JOIN cars_data ORDER BY cars_data.Horsepower DESC LIMIT 1
SELECT Age from employee where Name = 'George Chuter',employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Age FROM employee WHERE Name = 'George Chuter';,SELECT Age FROM employee WHERE Name = 'George Chuter',"select age from employee where name = ""George Chuter""","SELECT employee.Age FROM employee WHERE employee.Name = ""value"""
SELECT Age from employee where Name = 'Lee Mears',employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Age FROM employee WHERE Name = 'Lee Mears';,SELECT Age FROM employee WHERE Name = 'Lee Mears',"select age from employee where name = ""Lee Mears""","SELECT employee.Age FROM employee WHERE employee.Name = ""value"""
SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);,SELECT Name FROM employee WHERE Employee_ID = (SELECT Employee_ID FROM evaluation ORDER BY Bonus DESC LIMIT 1),select t1.name from employee as t1 join evaluation as t2 on t1.employee_id = t2.employee_id order by t2.bonus desc limit 1,SELECT employee.Name FROM employee JOIN evaluation ORDER BY evaluation.Bonus DESC LIMIT 1
SELECT Name FROM people WHERE People_ID NOT IN  ( SELECT People_ID FROM poker_player ) ,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Poker_Player_ID IS NULL;,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);,select name from people where people_id not in (select people_id from poker_player),SELECT people.Name FROM people WHERE people.People_ID NOT IN ( SELECT poker_player.People_ID FROM poker_player )
SELECT Name FROM people WHERE People_ID IN  ( SELECT People_ID FROM poker_player ) ,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Name FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID;,SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player);,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id,SELECT people.Name FROM people WHERE people.People_ID IN ( SELECT poker_player.People_ID FROM poker_player )
SELECT count ( * )  FROM players,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(DISTINCT player_id) AS num_players FROM players;,SELECT COUNT(player_id) FROM players,select count ( * ) from players,SELECT COUNT(*) FROM players
SELECT first_name FROM players,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT first_name FROM players;,SELECT first_name FROM players,select first_name from players,SELECT players.first_name FROM players
"SELECT country_code FROM players  where first_name  =  ""Mirjana""",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT country_code  FROM players WHERE first_name = 'Mirjana';,SELECT country_code FROM players WHERE first_name = 'Mirjana',"select country_code from players where first_name = ""Mirjana""","SELECT players.country_code FROM players WHERE players.first_name = ""value"""
"SELECT birth_date FROM players  where first_name  =  ""Mirjana""",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT birth_date FROM players WHERE first_name = 'Justine';,SELECT birth_date FROM players WHERE first_name = 'Justine',"select birth_date from players where first_name = ""Justine""","SELECT players.birth_date FROM players WHERE players.first_name = ""value"""
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Model  FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'General Motors';,SELECT Model  FROM model_list  JOIN car_makers ON model_list.Maker = car_makers.Id  WHERE car_makers.FullName = 'General Motors';,"select t2.model from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = ""General Motors""","SELECT model_list.Model FROM model_list JOIN car_makers WHERE car_makers.FullName = ""value"""
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight > 3500;,SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 3500;,select * from cars_data where weight > 3500,"SELECT model_list.Model FROM model_list JOIN car_makers JOIN cars_data WHERE cars_data.Weight > ""value"""
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' or T4.weight  < =   3500,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT DISTINCT Model FROM (   SELECT Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'General Motors'   UNION   SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight > 3500 ) t;,SELECT DISTINCT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 3500 UNION SELECT DISTINCT Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'General Motors';,select distinct ( t1.model ) from model_list as t1 join cars_data as t2 on t1.model = t2.id where t2.weight > 3500,"SELECT model_list.Model FROM model_list WHERE model_list.Model > ""value"" EXCEPT SELECT model_list.Model FROM model_list JOIN car_names JOIN car_makers WHERE car_makers.FullName = ""value"""
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' Or T4.weight  < =   3500 except SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and T4.weight  < =   3500,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Model FROM (   SELECT Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.FullName = 'General Motors'   UNION   SELECT cn.Model FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight > 3500 ) t GROUP BY Model HAVING COUNT(*) = 1;,SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 3500 EXCEPT SELECT Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'General Motors' UNION SELECT Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'General Motors' EXCEPT SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 3500;,select model from model_list where weight > 3500 or maker = 'General Motors',"SELECT model_list.Model FROM model_list JOIN car_makers WHERE car_makers.FullName = ""value"" EXCEPT SELECT model_list.Model FROM model_list JOIN car_makers WHERE car_makers.FullName = ""value"""
"SELECT height FROM people where name  =  ""Aleksey Ostapenko""",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Height  FROM people WHERE Name = 'Aleksey Ostapenko';,SELECT Height FROM people WHERE Name = 'Aleksey Ostapenko';,"select height from people where name = ""Aleksey Ostapenko""","SELECT people.Height FROM people WHERE people.Name = ""value"""
"SELECT name FROM people where birth_date  =  ""August 16, 1982""",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
","SELECT Name FROM people WHERE Birth_Date = 'August 16, 1982';","SELECT Name FROM people WHERE Birth_Date = 'August 16, 1982';","select name from people where birth_date = 'August 16, 1982'","SELECT people.Name FROM people WHERE people.Birth_Date = ""value"""
"SELECT people_id FROM people where nationality  =  ""Russia""",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT People_ID FROM people WHERE Nationality = 'Russia';,SELECT People_ID FROM people WHERE Nationality = 'Russia';,"select people_id from people where nationality = ""Russia""","SELECT people.People_ID FROM people WHERE people.Nationality = ""value"""
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT ( * )    > =    2,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;,select nationality from people group by nationality having count ( * ) > 2,"SELECT people.Nationality FROM people GROUP BY people.Nationality HAVING COUNT(*) >= ""value"""
"SELECT Population FROM country where Name   =   ""Afghanistan""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Population FROM country WHERE Name = 'Afghanistan';,SELECT Population FROM country WHERE Code = 'AFG';,"select population from country where name = ""Afghanistan""","SELECT country.Population FROM country WHERE country.Name = ""value"""
"SELECT Population FROM country where Name   =   ""Aruba""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Population FROM country WHERE Name = 'Aruba';,SELECT Population FROM country WHERE Code = 'ABW';,"select population from country where name = ""Aruba""","SELECT country.Population FROM country WHERE country.Name = ""value"""
"SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   ""Aruba""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Language, Percentage FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba');",SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW';,"select language from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t2.localname = ""Aruba""","SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.Name = ""value"""
"SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   ""Aruba"" and T2.IsOfficial = 'T'",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Language  FROM countrylanguage  WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Aruba') AND IsOfficial = 'T';,"SELECT IsOfficial, Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T';","select isofficial from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t2.name = ""Aruba""","SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.Name = ""value"""
"SELECT T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T1.Name   =   ""Afghanistan"" and T2.IsOfficial = 'T'",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Language FROM countrylanguage WHERE CountryCode = (SELECT Code FROM country WHERE Name = 'Afghanistan') AND IsOfficial = 'T';,"SELECT IsOfficial, Language FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';","select isofficial from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t2.name = ""Afghanistan""","SELECT countrylanguage.Language FROM country JOIN countrylanguage WHERE country.Name = ""value"""
SELECT count ( * )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.language = 'Dari' and T1.name ! =  'Afghanistan',world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*)  FROM countrylanguage  WHERE Language = 'Dari' AND CountryCode != (SELECT Code FROM country WHERE Name = 'Afghanistan');,SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Dari' AND CountryCode != 'AFG';,"select count ( * ) from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""Dari""","SELECT COUNT(*) FROM countrylanguage JOIN country WHERE countrylanguage.Language = ""value"" AND country.Name = ""value"""
"SELECT name,cost_of_treatment  FROM Dogs join Treatments",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT d.name, t.cost_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;","SELECT dogs.name, treatments.cost_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id","select t1.name, t2.cost_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id","SELECT Dogs.name FROM Treatments JOIN Dogs WHERE Treatments.cost_of_treatment < ""value"""
SELECT name FROM Dogs WHERE dog_id NOT IN (  SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum ( cost_of_treatment )   <  1000  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT d.name, t.cost_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment < 1000 ORDER BY t.cost_of_treatment DESC;","SELECT dogs.name, treatments.cost_of_treatment FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE treatments.cost_of_treatment < 1000 ORDER BY treatments.cost_of_treatment DESC",select t1.name from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id group by t1.dog_id having t2.cost_of_treatment < 1000,"SELECT Dogs.name FROM Treatments JOIN Dogs WHERE Treatments.cost_of_treatment < ""value"""
"SELECT age FROM visitor where name  =  ""Gonzalo HiguaÃ­n""",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Age FROM visitor WHERE Name = 'Gonzalo HiguaÃ­n';,SELECT Age FROM visitor WHERE Name = 'Gonzalo HiguaÃ­n';,"select age from visitor where name = ""Gonzalo Higuan""","SELECT visitor.Age FROM visitor WHERE visitor.Name = ""value"""
SELECT num_of_ticket FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where visitor_id  =  5,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Num_of_Ticket FROM visit WHERE visitor_ID = 5;,SELECT Num_of_Ticket FROM visit WHERE visitor_ID = 5;,select num_of_ticket from visit where visitor_id = 5,"SELECT visit.Num_of_Ticket FROM visit WHERE visit.visitor_ID = ""value"""
"SELECT Total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id where name  =  ""Arjen Robben""",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Total_spent  FROM visit v JOIN visitor vi ON v.visitor_ID = vi.ID WHERE vi.Name = 'Arjen Robben';,SELECT Total_spent FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Name = 'Arjen Robben';,"select sum ( total_spent ) from visit as t1 join visitor as t2 on t1.visitor_id = t2.id where t2.name = ""Arjen Robben""","SELECT visit.Total_spent FROM visitor JOIN visit WHERE visitor.Name = ""value"""
"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID WHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);","SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID ORDER BY visit.Num_of_Ticket DESC LIMIT 1;","select t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id order by sum ( t2.num_of_ticket ) desc limit 1","SELECT visitor.Name , visitor.Age FROM visitor JOIN visit WHERE visit.Total_spent = ( SELECT MAX(visit.Total_spent) FROM visit )"
"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   ""English""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English',SELECT Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' GROUP BY Region,"select distinct region from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""English""","SELECT country.Region FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"""
"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   ""Dutch""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Region FROM country c  JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Dutch',SELECT Region FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' GROUP BY Region,"select distinct region from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""Dutch""","SELECT country.Region FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"""
"SELECT DISTINCT T1.LifeExpectancy FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   ""Dutch""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT c.Region, c.LifeExpectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Dutch'","SELECT Region, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch' GROUP BY Region","select t2.lifeexpectancy from countrylanguage as t1 join country as t2 on t1.countrycode = t2.code where t1.language = ""Dutch""","SELECT country.LifeExpectancy FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"""
SELECT winner_name  FROM matches ORDER BY winner_age LIMIT 3,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT winner_name FROM matches ORDER BY winner_age ASC LIMIT 3;,"SELECT winner_name, MIN(winner_age) AS youngest_age FROM matches GROUP BY winner_name ORDER BY youngest_age ASC LIMIT 3",select winner_name from matches order by winner_age asc limit 3,SELECT matches.winner_name FROM players JOIN matches ORDER BY matches.winner_age ASC LIMIT 1
"SELECT DISTINCT winner_name,  winner_rank FROM matches ORDER BY winner_age LIMIT 3",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;","SELECT winner_name, winner_rank FROM matches WHERE winner_name IN (SELECT winner_name FROM matches ORDER BY winner_age ASC LIMIT 3) GROUP BY winner_name, winner_rank","select t2.winner_rank, t2.winner_name from rankings as t1 join matches as t2 on t1.ranking_date = t2.winner_rank order by t2.winner_age limit 3","SELECT matches.winner_name , matches.winner_rank FROM matches ORDER BY matches.winner_age ASC LIMIT 1"
SELECT loser_name FROM matches ORDER BY winner_age LIMIT 3,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT winner_name, winner_rank, loser_name FROM matches ORDER BY winner_age ASC LIMIT 3;","SELECT winner_name, loser_name FROM matches WHERE winner_name IN (SELECT winner_name FROM matches ORDER BY winner_age ASC LIMIT 3)",select t2.loser_name from players as t1 join matches as t2 on t1.player_id = t2.winner_id order by t1.birth_date limit 3,SELECT matches.loser_name FROM matches ORDER BY matches.winner_age ASC LIMIT 1
"SELECT first_name, last_name FROM professionals",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name FROM Professionals;","SELECT first_name, last_name FROM Professionals","select first_name, last_name from professionals","SELECT Professionals.first_name , Professionals.last_name FROM Professionals"
"SELECT first_name, last_name FROM professionals  WHERE city LIKE '%West%'",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name  FROM Professionals WHERE city LIKE '%West%';","SELECT first_name, last_name FROM Professionals WHERE city LIKE '%West%'","select first_name, last_name from professionals where city like ""%west%""","SELECT Professionals.first_name , Professionals.last_name FROM Professionals WHERE Professionals.city LIKE ""value"""
"SELECT role_code , street , city , state FROM professionals WHERE first_name  =  ""Taryn""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT role_code, street, city, state FROM Professionals WHERE first_name = 'Taryn';","SELECT role_code, street, city, state FROM Professionals WHERE first_name = 'Taryn'","select role_code, street, city, state from professionals where first_name = ""Taryn""","SELECT Professionals.role_code , Professionals.street , Professionals.state FROM Professionals WHERE Professionals.first_name = ""value"""
"SELECT first_name,state FROM professionals",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name, state FROM Professionals;","SELECT first_name, last_name, state FROM Professionals","select first_name, last_name, state from professionals","SELECT Professionals.first_name , Professionals.last_name , Professionals.state FROM Professionals"
"SELECT first_name FROM professionals WHERE state  =  ""Indiana""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name FROM Professionals WHERE state = 'Indiana';","SELECT first_name, last_name FROM Professionals WHERE state = 'Indiana'","select first_name, last_name from professionals where state = ""Indiana""","SELECT Professionals.first_name , Professionals.last_name FROM Professionals WHERE Professionals.state = ""value"""
SELECT count ( * )  FROM death,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT COUNT(*) FROM death;,SELECT COUNT(*) FROM death,select count(*) from death,SELECT COUNT(*) FROM death
SELECT * FROM death where killed  =   ( select max ( killed )  from death ) ,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT note, killed FROM death ORDER BY killed DESC LIMIT 1;",SELECT * FROM death ORDER BY killed DESC LIMIT 1,select * from death order by killed desc limit 1,SELECT death.note FROM death ORDER BY death.killed DESC LIMIT 1
"SELECT * FROM death where note like ""%East%""",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT b.name, b.date, b.bulgarian_commander, b.latin_commander, b.result, d.note, d.killed, d.injured FROM battle b JOIN ship s ON b.id = s.lost_in_battle   JOIN death d ON s.id = d.caused_by_ship_id ORDER BY d.killed DESC LIMIT 1;",SELECT * FROM death ORDER BY killed DESC LIMIT 1,select * from death order by killed desc limit 1,SELECT death.note FROM death ORDER BY death.killed DESC LIMIT 1
SELECT T1.killed FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't',battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';","SELECT note, killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')","select t2.killed from ship as t1 join death as t2 on t1.id = t2.caused_by_ship_id where t1.tonnage = ""t""","SELECT death.note FROM ship JOIN death WHERE ship.tonnage = ""value"""
SELECT T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't',battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT death.note, death.injured  FROM death  JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't' AND death.injured > 0;","SELECT note, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')",select t2.injured from ship as t1 join death as t2 on t1.id = t2.caused_by_ship_id where t1.tonnage = 't',"SELECT death.injured FROM ship JOIN death WHERE ship.tonnage = ""value"""
SELECT COUNT ( T1.id )  FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't',battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT COUNT(*) AS total_situations FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';,"SELECT SUM(killed) AS total_deaths, SUM(injured) AS total_injuries FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')",select count ( * ) from death as t1 join ship as t2 on t1.caused_by_ship_id = t2.id where t2.tonnage = 't',"SELECT SUM(death.killed) FROM ship JOIN death WHERE ship.tonnage = ""value"""
"SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT c.Continent, COUNT(cm.Id) AS num_car_makers FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;","SELECT COUNT(car_makers.Id) AS NumberOfCarMakers, continents.Continent FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId GROUP BY continents.Continent","select count ( * ), continent from continents group by continent","SELECT COUNT(*) , continents.Continent FROM car_makers JOIN countries JOIN continents GROUP BY continents.Continent"
"seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  ""usa""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) AS num_car_makers_usa FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa';,SELECT COUNT(*) AS NumberOfCarMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA',"select count ( * ) from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.countryname = ""USA""","SELECT COUNT(*) FROM car_makers JOIN countries WHERE countries.CountryName = ""value"""
"seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  ""germany""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) AS num_car_makers_germany FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'germany';,SELECT COUNT(*) AS NumberOfCarMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'Germany',"select count ( * ) from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.countryname = ""germany""","SELECT COUNT(*) FROM car_makers JOIN countries WHERE countries.CountryName = ""value"""
"seLECT count ( * )  FROM car_makers as T1 join countries as T2 on T2.CountryId   =   T1.Country where T2.countryname  =  ""france""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) AS num_car_makers_france FROM car_makers cm  JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'france';,SELECT COUNT(*) AS NumberOfCarMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France',"select count ( * ) from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.countryname = ""France""","SELECT COUNT(*) FROM car_makers JOIN countries WHERE countries.CountryName = ""value"""
SELECT count ( * )  FROM country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM country;,SELECT COUNT(*) FROM country,select count(*) from country,SELECT COUNT(*) FROM country
SELECT count ( * )  FROM city,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM city;,SELECT COUNT(*) FROM city,select count ( * ) from city,SELECT COUNT(*) FROM city
"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  ""Kabul""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Region  FROM city ci JOIN country c ON ci.CountryCode = c.Code WHERE ci.Name = 'Kabul';,SELECT District FROM city WHERE Name = 'Kabul',select t2.region from city as t1 join country as t2 on t1.countrycode = t2.code where t1.name = 'Kabul',"SELECT country.Region FROM city JOIN country WHERE city.Name = ""value"""
"SELECT count ( T2.name )  FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.region  =  ""Southern and Central Asia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*)  FROM city ci JOIN country c ON ci.CountryCode = c.Code WHERE c.Region = (   SELECT c.Region   FROM city ci    JOIN country c ON ci.CountryCode = c.Code   WHERE ci.Name = 'Kabul' );,SELECT COUNT(*) FROM city WHERE District IN (SELECT District FROM city WHERE Name = 'Kabul'),select count ( * ) from city as t1 join country as t2 on t1.countrycode = t2.code where t2.region = ( select t2.region from city as t1 join country as t2 on t1.countrycode = t2.code where t1.name = 'Kabul' ),"SELECT COUNT(*) FROM city JOIN country WHERE country.Region = ""value"""
"SELECT count ( * )  FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   ""BK""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*)  FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';,SELECT COUNT(Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';,"select count(*) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = ""BK""","SELECT COUNT(*) FROM Documents JOIN Templates WHERE Templates.Template_Type_Code = ""value"""
"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   ""BK""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';,SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';,"select document_name from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = ""BK""","SELECT Documents.Document_Name FROM Documents JOIN Templates WHERE Templates.Template_Type_Code = ""value"""
"Select count ( * )  from documents where document_name not in  ( SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id   =   T2.template_id WHERE T1.template_type_code   =   ""BK"" ) ",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code <> 'BK';,SELECT COUNT(Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code <> 'BK';,"select count ( * ) from documents where document_id not in ( select template_id from templates where template_type_code = ""BK"" )","SELECT COUNT(*) FROM Documents JOIN Templates WHERE Templates.Template_Type_Code != ""value"""
"SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  ! =   ""English""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Code FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' );,SELECT CountryCode FROM countrylanguage WHERE Language != 'English',"select countrycode from countrylanguage where language!= ""English""","SELECT country.Code FROM country EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = ""value"""
"SELECT Code FROM country WHERE GovernmentForm ! =  ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   ""English""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Code FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' ) AND GovernmentForm != 'Republic';,SELECT cl.CountryCode FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language != 'English' AND c.GovernmentForm != 'Republic',select code from country where governmentform!= 'Republic' and countrycode not in ( select distinct t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = 'English' and t1.governmentform!= 'Republic',"SELECT country.Code FROM country EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = ""value"""
"select countrycode, language from countrylanguage where countrycode in  ( SELECT Code FROM country WHERE GovernmentForm ! =  ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   ""English"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT c.Code, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' )  AND c.GovernmentForm != 'Republic';","SELECT cl.CountryCode, cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language != 'English' AND c.GovernmentForm != 'Republic'",select language from countrylanguage where countrycode in ( select distinct countrycode from city where name not in ( select t1.name from city as t1 join country as t2 on t1.countrycode = t2.code where t2.governmentform = 'Republic' ) ),"SELECT country.Name , country.LocalName FROM country WHERE country.Code IN ( SELECT country.Code FROM country WHERE country.GovernmentForm = ""value"" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = ""value"" )"
"select code from country where continent  =  ""North America"" and code in  ( SELECT Code FROM country WHERE GovernmentForm ! =  ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE   =   ""English"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT c.Code, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' )  AND c.GovernmentForm != 'Republic' AND c.Continent = 'North America';","SELECT cl.CountryCode, cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language != 'English' AND c.GovernmentForm != 'Republic' AND c.Continent = 'North America'","select name from country where continent = ""North America""","SELECT country.Name , country.LocalName FROM country WHERE country.Code IN ( SELECT country.Code FROM country WHERE country.Continent = ""value"" EXCEPT SELECT countrylanguage.CountryCode FROM countrylanguage WHERE countrylanguage.Language = ""value"" )"
SELECT * FROM Professionals WHERE state   =   'Indiana',dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone, cell_number FROM Professionals WHERE state = 'Indiana';",SELECT * FROM Professionals WHERE state = 'Indiana';,select * from professionals,"SELECT * FROM Professionals WHERE Professionals.state = ""value"""
"SELECT cell_number FROM Professionals WHERE first_name  =  ""Taryn""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT cell_number FROM Professionals WHERE first_name = 'Taryn';,SELECT cell_number FROM Professionals WHERE first_name = 'Taryn';,"select cell_number from professionals where first_name = ""Taryn""","SELECT Professionals.cell_number FROM Professionals WHERE Professionals.first_name = ""value"""
SELECT count ( * )  FROM Templates,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM Templates;,SELECT COUNT(Template_ID) FROM Templates,select count ( * ) from templates,SELECT COUNT(*) FROM Templates
"SELECT Date_Effective_From, Date_Effective_To FROM Templates where Template_ID = 1",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT Date_Effective_From, Date_Effective_To  FROM Templates WHERE Template_ID = 1;",SELECT Date_Effective_From FROM Templates WHERE Template_ID = 1,select date_effective_from from templates where template_id = 1,"SELECT Templates.Date_Effective_From FROM Templates WHERE Templates.Template_ID = ""value"""
SELECT Template_Type_Code  FROM Templates where Template_ID = 4,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Template_Type_Code FROM Templates WHERE Template_ID = 4;,SELECT Template_Type_Code FROM Templates WHERE Template_ID = 4,select template_type_code from templates where template_id = 4,"SELECT Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID = ""value"""
SELECT Version_Number  FROM Templates where Template_ID = 0,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Version_Number FROM Templates WHERE Template_ID = 0;,SELECT Version_Number FROM Templates WHERE Template_ID = 0,select version_number from templates where template_id = 0,"SELECT Templates.Version_Number FROM Templates WHERE Templates.Template_ID = ""value"""
SELECT country FROM singer WHERE age  >  40,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Country FROM singer WHERE Age > 40;,SELECT Country FROM singer WHERE Age > 40;,select country from singer where age > 40 and is_male = 'F',"SELECT singer.Country FROM singer WHERE singer.Age > ""value"""
SELECT DISTINCT ( country )  FROM singer WHERE age  < 30,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Country FROM singer WHERE Age < 30;,SELECT Country FROM singer WHERE Age < 30;,select country from singer where age < 30,"SELECT singer.Country FROM singer WHERE singer.Age < ""value"""
SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Country FROM singer WHERE Age > 40 OR Age < 30;,SELECT Country FROM singer WHERE Age > 40 OR Age < 30;,select country from singer where age > 40 intersect select country from singer where age < 30,"SELECT singer.Country FROM singer WHERE singer.Age > ""value"" INTERSECT SELECT singer.Country FROM singer WHERE singer.Age < ""value"""
SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T2.Make   =   'amc hornet sportabout  ( sw ) ',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Accelerate  FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'amc hornet sportabout(sw)';,SELECT ACCELERATE FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Make = 'amc hornet sportabout(sw)',select t2.accelerate from car_names as t1 join cars_data as t2 on t1.makeid = t2.id where t1.make = 'AMC hornet sportabout (sw)',"SELECT cars_data.Accelerate FROM cars_data JOIN car_names WHERE car_names.Make = ""value"""
SELECT T2.Model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId order by T1.Year desc limit 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT Model, Year FROM model_list  JOIN cars_data ON model_list.ModelId = cars_data.Id ORDER BY Year DESC LIMIT 1;",SELECT Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY Year DESC LIMIT 1,select t1.model from car_names as t1 join cars_data as t2 on t1.makeid = t2.id order by t2.year desc limit 1,SELECT car_names.Model FROM car_names JOIN cars_data ORDER BY cars_data.Year DESC LIMIT 1
SELECT template_id FROM Templates,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Template_ID FROM Templates;,SELECT Template_ID FROM Templates,select template_id from templates,SELECT Templates.Template_ID FROM Templates
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT t.Template_ID FROM Templates t LEFT JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Template_ID IS NULL;,SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents),select template_id from templates except select template_id from documents,SELECT Templates.Template_ID FROM Templates EXCEPT SELECT Documents.Template_ID FROM Documents
SELECT Date_effective_to FROM Templates WHERE template_id IN  (  SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents ) ,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT t.Template_ID, t.Date_Effective_To FROM Templates t WHERE t.Template_ID NOT IN (SELECT Template_ID FROM Documents) AND t.Date_Effective_To > CURRENT_TIMESTAMP;",SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents) AND Date_Effective_To > CURRENT_DATE,select date_effective_to from templates where template_id not in ( select template_id from documents ),"SELECT Templates.Template_ID , Templates.Date_Effective_To FROM Templates EXCEPT SELECT Templates.Template_ID , Templates.Date_Effective_To FROM Templates JOIN Documents"
SELECT count ( * )  FROM Templates WHERE template_id in  ( SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents ) ,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) AS templates_not_used_count FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents);,SELECT COUNT(*) FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents),select count ( * ) from templates where template_id not in ( select template_id from documents ),SELECT COUNT(Templates.Template_ID) FROM Templates EXCEPT SELECT Templates.Template_ID FROM Templates JOIN Documents
SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT DISTINCT Template_ID FROM Documents);,SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents),select template_id from templates except select template_id from documents,SELECT Templates.Template_ID FROM Templates EXCEPT SELECT Templates.Template_ID FROM Templates JOIN Documents
"SELECT T2.concert_name , T2.theme , count ( * )  FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT c.concert_Name, c.Theme, COUNT(s.Singer_ID) AS num_singers FROM concert c LEFT JOIN singer_in_concert sc ON c.concert_ID = sc.concert_ID LEFT JOIN singer s ON sc.Singer_ID = s.Singer_ID GROUP BY c.concert_ID, c.concert_Name, c.Theme;","SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS NumberOfSingers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme","select t1.concert_name, t1.theme, count(*) from concert as t1 join singer_in_concert as t2 on t1.concert_id = t2.concert_id group by t1.concert_id","SELECT concert.concert_Name , concert.Theme , COUNT(*) FROM singer_in_concert JOIN concert GROUP BY concert.concert_ID"
"SELECT Year FROM concert WHERE concert_Name  =  ""Super bootcamp""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Year FROM concert WHERE concert_Name = 'Super bootcamp',SELECT Year FROM concert WHERE concert_Name = 'Super bootcamp',"select year from concert where concert_name = ""Super bootcamp""","SELECT concert.Year FROM concert WHERE concert.concert_Name = ""value"""
"SELECT Stadium_ID FROM concert WHERE concert_Name  =  ""Super bootcamp""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Stadium_ID FROM concert WHERE concert_Name = 'Super bootcamp',SELECT Stadium_ID FROM concert WHERE concert_Name = 'Super bootcamp',"select stadium_id from concert where concert_name = ""Super bootcamp""","SELECT concert.Stadium_ID FROM concert WHERE concert.concert_Name = ""value"""
SELECT sum ( Population )  FROM country where Continent  =  'Asia',world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SUM(Population) FROM country WHERE Continent = 'Asia';,SELECT SUM(Population) FROM country WHERE Continent = 'Asia',select population from country where continent = 'Asia',"SELECT country.Population FROM country WHERE country.Continent = ""value"""
SELECT Language FROM countrylanguage where Percentage  =  9.5,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Language FROM countrylanguage WHERE Percentage = 9.5;,SELECT Language FROM countrylanguage WHERE Percentage = 9.5,"select distinct t2.language from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.percentage like ""9%""","SELECT countrylanguage.Language FROM countrylanguage WHERE countrylanguage.Percentage = ""value"""
SELECT LifeExpectancy FROM country where LocalName  =  'Angola',world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT LifeExpectancy FROM country WHERE Name = 'Angola';,SELECT LifeExpectancy FROM country WHERE Name = 'Angola',"select lifeexpectancy from country where name = ""Angola""","SELECT country.LifeExpectancy FROM country WHERE country.Name = ""value"""
SELECT GNP FROM country where LocalName  =  'Angola',world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT GNP FROM country WHERE Name = 'Aruba';,SELECT GNP FROM country WHERE Name = 'Aruba',"select gnp from country where name = ""Aruba""","SELECT country.GNP FROM country WHERE country.Name = ""value"""
SELECT GNPOld FROM country where Name  =  'Afghanistan',world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT GNPOld FROM country WHERE Name = 'Afghanistan';,SELECT GNPOld FROM country WHERE Name = 'Afghanistan',"select gnpold from country where name = ""Afghanistan""","SELECT country.GNPOld FROM country WHERE country.Name = ""value"""
SELECT song_name FROM singer WHERE song_release_year  >   ( SELECT avg ( song_release_year )  FROM singer ) ,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Name FROM singer WHERE Song_release_year > (SELECT AVG(Song_release_year) FROM singer);,SELECT AVG(Song_release_year) FROM singer) AS avg_year WHERE Song_release_year > avg_year;,select name from singer where song_release_year > ( select avg ( song_release_year ) from singer ),SELECT singer.Name FROM singer WHERE singer.Song_release_year > ( SELECT AVG(singer.Song_release_year) FROM singer )
SELECT avg ( song_release_year )  FROM singer,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT AVG(Song_release_year) FROM singer;,SELECT AVG(Song_release_year) FROM singer;,select avg ( song_release_year ) from singer,SELECT AVG(singer.Song_release_year) FROM singer
SELECT song_name from singer order by song_release_year,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Song_Name FROM singer ORDER BY Song_release_year ASC;,SELECT Song_Name FROM singer ORDER BY Song_release_year ASC;,select song_name from singer order by song_release_year,SELECT singer.Song_Name FROM singer ORDER BY singer.Song_release_year ASC
SELECT song_name FROM singer WHERE age  >   ( SELECT avg ( age )  FROM singer ) ,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Song_Name  FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);,SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);,select song_name from singer where age > ( select avg ( age ) from singer ),SELECT singer.Song_Name FROM singer WHERE singer.Age > ( SELECT AVG(singer.Age) FROM singer )
SELECT T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID   =   T2.Conductor_ID,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;","SELECT conductor.Name AS Conductor, orchestra.Orchestra AS Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID",select orchestra from orchestra as t1 join conductor as t2 on t1.conductor_id = t2.conductor_id,SELECT orchestra.Orchestra FROM orchestra
SELECT Name FROM conductor,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT Name FROM conductor;,SELECT Name FROM conductor,select name from conductor,SELECT conductor.Name FROM conductor
"SELECT Age FROM conductor WHERE Name  =  ""Colin Davis""",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT Age FROM conductor WHERE Name = 'Colin Davis';,SELECT Age FROM conductor WHERE Name = 'Colin Davis',"select age from conductor where name = ""Colin Davis""","SELECT conductor.Age FROM conductor WHERE conductor.Name = ""value"""
SELECT count ( * )  FROM Students,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) FROM Students;,SELECT COUNT(student_id) FROM Students,select count ( * ) from students,SELECT COUNT(*) FROM Students
SELECT first_name FROM Students where student_id = 3,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT first_name FROM Students WHERE student_id = 3;,SELECT first_name FROM Students WHERE student_id = 3,select first_name from students where student_id = 3,"SELECT Students.first_name FROM Students WHERE Students.student_id = ""value"""
SELECT email_address FROM Students where student_id = 2,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT email_address FROM Students WHERE student_id = 2;,SELECT email_address FROM Students WHERE student_id = 2,select email_address from students where student_id = 2,"SELECT Students.email_address FROM Students WHERE Students.student_id = ""value"""
SELECT count ( * )  FROM Student_Enrolment,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) FROM Student_Enrolment;,SELECT COUNT(student_enrolment_id) FROM Student_Enrolment,select count ( * ) from student_enrolment,SELECT COUNT(*) FROM Student_Enrolment
SELECT * FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID   =   T2.template_ID,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT DISTINCT t.Template_ID, t.Template_Type_Code, t.Date_Effective_From, t.Date_Effective_To  FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID;","SELECT DISTINCT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code, Templates.Date_Effective_From, Templates.Date_Effective_To, Templates.Template_Details FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID",select count ( * ) from templates,SELECT Templates.Template_Details FROM Templates
SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT DISTINCT t.Template_ID, t.Template_Type_Code, rtt.Template_Type_Description, t.Date_Effective_From, t.Date_Effective_To FROM Templates t  JOIN Documents d ON t.Template_ID = d.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code;",SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID,select t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code = t2.template_type_code join documents as t3 on t2.template_id = t3.template_id,SELECT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types
SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT DISTINCT rtt.Template_Type_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID   JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code;,SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID,select distinct template_type_description from ref_template_types,SELECT Ref_Template_Types.Template_Type_Description FROM Templates JOIN Ref_Template_Types JOIN Documents
SELECT Population FROM country ORDER BY SurfaceArea DESC LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Name, SurfaceArea, Population FROM country ORDER BY SurfaceArea DESC LIMIT 1;","SELECT SurfaceArea, Name, Population FROM country ORDER BY SurfaceArea DESC LIMIT 1",select population from country order by surfacearea desc limit 1,SELECT country.Population FROM country ORDER BY country.SurfaceArea DESC LIMIT 1
SELECT HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT HeadOfState FROM country WHERE Name = 'Russian Federation';,SELECT HeadOfState FROM country WHERE Name = 'Russian Federation',"select headofstate from country where name = ""Russian Federation""",SELECT country.HeadOfState FROM country ORDER BY country.SurfaceArea DESC LIMIT 1
SELECT Continent FROM country ORDER BY SurfaceArea DESC LIMIT 1,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Continent FROM country WHERE Name = 'Russian Federation';,SELECT Continent FROM country WHERE Name = 'Russian Federation',"select continent from country where name = ""Russian Federation""",SELECT country.Continent FROM country ORDER BY country.SurfaceArea DESC LIMIT 1
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID WHERE T2.Earnings  >  300000,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000,SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id where t1.earnings > 300000,"SELECT people.Name FROM poker_player JOIN people WHERE poker_player.Earnings > ""value"""
SELECT count ( Poker_Player_ID )  from poker_player,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT COUNT(*) FROM poker_player,SELECT COUNT(*) FROM poker_player,select count ( * ) from poker_player,SELECT COUNT(*) FROM poker_player
SELECT count ( * )  FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*)  FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'NorthCarolina';,SELECT COUNT(DISTINCT s.student_id) FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'NorthCarolina';,"select count ( * ) from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t1.state_province_county = ""NorthCarolina""","SELECT COUNT(*) FROM Addresses JOIN Students WHERE Addresses.state_province_county = ""value"""
"SELECT T1.first_name,T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina'",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.first_name, s.last_name FROM Students s  JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'NorthCarolina';","SELECT s.first_name, s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina';","select t2.first_name, t2.last_name from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t1.state_province_county = ""NorthCarolina""","SELECT Students.first_name , Students.last_name FROM Addresses JOIN Students WHERE Addresses.state_province_county = ""value"""
"SELECT T1.first_name, T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT T3.first_name, T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.first_name, s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'NorthCarolina' AND se.degree_program_id IS NULL;","SELECT s.first_name, s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'North Carolina' AND se.degree_program_id IS NULL;","select first_name, last_name from students where student_id not in ( select student_id from student_enrolment )","SELECT Students.first_name , Students.last_name FROM Students JOIN Student_Enrolment WHERE Students.student_id NOT IN ( SELECT Student_Enrolment.degree_program_id FROM Student_Enrolment )"
select area_code from AREA_CODE_STATE,voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
",SELECT area_code FROM AREA_CODE_STATE;,SELECT area_code FROM AREA_CODE_STATE,select area_code from area_code_state,SELECT AREA_CODE_STATE.area_code FROM AREA_CODE_STATE
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling',voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT DISTINCT SUBSTR(phone_number, 1, 3) AS area_code FROM VOTES WHERE contestant_number = (   SELECT contestant_number   FROM CONTESTANTS   WHERE contestant_name = 'Tabatha Gehling' );",SELECT area_code FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling',select t1.area_code from area_code_state as t1 join votes as t2 on t1.area_code = t2.vote_id join contestants as t3 on t2.contestant_number = t3.contestant_number where t3.contestant_name = 'Tabatha Gehling',"SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS JOIN AREA_CODE_STATE WHERE CONTESTANTS.contestant_name = ""value"""
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss',voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT DISTINCT SUBSTR(phone_number, 1, 3) AS area_code FROM VOTES  WHERE contestant_number = (   SELECT contestant_number   FROM CONTESTANTS   WHERE contestant_name = 'Kelly Clauss' );",SELECT area_code FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number JOIN AREA_CODE_STATE ON VOTES.state = AREA_CODE_STATE.state WHERE CONTESTANTS.contestant_name = 'Kelly Clauss',select distinct area_code from votes as t1 join contestants as t2 on t1.contestant_number = t2.contestant_number join area_code_state as t3 on t1.state = t3.area_code where t2.contestant_name = 'Kelly Clauss',"SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS JOIN AREA_CODE_STATE WHERE CONTESTANTS.contestant_name = ""value"""
SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss',voter_1,"CREATE TABLE `AREA_CODE_STATE` (
  `area_code` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  PRIMARY KEY (`area_code`)
);
CREATE TABLE `CONTESTANTS` (
  `contestant_number` integer
,  `contestant_name` varchar(50) NOT NULL
,  PRIMARY KEY (`contestant_number`)
);
CREATE TABLE `VOTES` (
  `vote_id` integer NOT NULL PRIMARY KEY
,  `phone_number` integer NOT NULL
,  `state` varchar(2) NOT NULL
,  `contestant_number` integer NOT NULL
,  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
, 	FOREIGN KEY (`state`) REFERENCES `AREA_CODE_STATE`(`state`)
, 	FOREIGN KEY (`contestant_number`) REFERENCES `CONTESTANTS`(`contestant_number`)
);
CREATE INDEX ""idx_VOTES_idx_votes_phone_number"" ON ""VOTES"" (`phone_number`);
","SELECT DISTINCT SUBSTR(phone_number, 1, 3) AS area_code FROM VOTES WHERE contestant_number IN (   SELECT contestant_number   FROM CONTESTANTS   WHERE contestant_name IN ('Kelly Clauss', 'Tabatha Gehling') ) GROUP BY SUBSTR(phone_number, 1, 3) HAVING COUNT(DISTINCT contestant_number) = 2;",SELECT area_code FROM VOTES AS V1 JOIN CONTESTANTS AS C1 ON V1.contestant_number = C1.contestant_number JOIN AREA_CODE_STATE AS ACS1 ON V1.state = ACS1.state WHERE C1.contestant_name = 'Kelly Clauss' INTERSECT SELECT area_code FROM VOTES AS V2 JOIN CONTESTANTS AS C2 ON V2.contestant_number = C2.contestant_number JOIN AREA_CODE_STATE AS ACS2 ON V2.state = ACS2.state WHERE C2.contestant_name = 'Tabatha Gehling',select t1.area_code from area_code_state as t1 join votes as t2 on t1.area_code = t2.vote_id join contestants as t3 on t2.contestant_number = t3.contestant_number where t3.contestant_name = 'Kelly Clauss' intersect select t1.area_code from area_code_state as t1 join votes as t2 on t1.area_code = t2.vote_id join contestants as t3 on t2.contestant_number = t3.contestant_number where t3.contestant_name = 'Tabatha Gehling',"SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS JOIN AREA_CODE_STATE WHERE CONTESTANTS.contestant_name = ""value"" INTERSECT SELECT AREA_CODE_STATE.area_code FROM VOTES JOIN CONTESTANTS JOIN AREA_CODE_STATE WHERE CONTESTANTS.contestant_name = ""value"""
SELECT count ( * )  FROM shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT COUNT(*) AS number_of_shops FROM shop;,SELECT COUNT(Shop_ID) FROM shop,select count ( * ) from shop,SELECT COUNT(*) FROM shop
SELECT name FROM shop,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Name FROM shop;,SELECT Name FROM shop,select name from shop,SELECT shop.Name FROM shop
"SELECT location FROM shop where name  =  ""FC Haka""",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Location FROM shop WHERE Name = 'FC Haka';,SELECT Location FROM shop WHERE Name = 'FC Haka',"select location from shop where name = ""FC Haka""","SELECT shop.Location FROM shop WHERE shop.Name = ""value"""
"SELECT Number_products FROM shop where name  =  ""HJK""",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Number_products FROM shop WHERE Name = 'HJK';,SELECT Number_products FROM shop WHERE Name = 'HJK',"select number_products from shop where name = ""HJK""","SELECT shop.Number_products FROM shop WHERE shop.Name = ""value"""
"select department_id,department_name from Departments",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT department_id, department_name FROM Departments;","SELECT department_id, department_name FROM Departments","select department_id,department_name from departments","SELECT Departments.department_name , Departments.department_id FROM Departments"
select T2.degree_summary_name from Departments as T1 JOIN Degree_Programs as T2 on T1.department_id  =  T2.department_id where T1.department_name  =  'statistics',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id;,SELECT degree_summary_name FROM Degree_Programs WHERE department_id = [department_id],select degree_summary_name from degree_programs as t1 join departments as t2 on t1.department_id = t2.department_id,"SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Departments WHERE Departments.department_name = ""value"""
SELECT professional_id  FROM Professionals,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT professional_id FROM Professionals;,SELECT professional_id FROM Professionals,select professional_id from professionals,SELECT Professionals.professional_id FROM Professionals
"SELECT professional_id, role_code  FROM Professionals",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT professional_id, role_code FROM Professionals;","SELECT professional_id, role_code FROM Professionals",select role_code from professionals,SELECT Professionals.role_code FROM Professionals
"SELECT professional_id , role_code , email_address FROM Professionals EXCEPT SELECT T1.professional_id , T1.role_code , T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT p.professional_id, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.treatment_id IS NULL;","SELECT p.professional_id, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.professional_id IS NULL",select email_address from professionals where professional_id not in ( select professional_id from treatments ),SELECT Professionals.email_address FROM Professionals WHERE Professionals.professional_id NOT IN ( SELECT Treatments.professional_id FROM Treatments )
SELECT Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Id  FROM car_makers WHERE Maker = 'amc';,SELECT Id FROM car_makers WHERE FullName = 'American Motor Company';,select id from car_makers where fullname = 'American Motor Company',"SELECT car_makers.Id FROM car_makers WHERE car_makers.FullName = ""value"""
SELECT ModelId FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.Maker   =   'amc',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT ModelId  FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'amc');,SELECT ModelId FROM model_list WHERE Maker = 1;,"select t2.modelid from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.maker = ""amc""","SELECT model_list.ModelId FROM car_makers JOIN model_list WHERE car_makers.Maker = ""value"""
SELECT DISTINCT ( T1.Maker )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.Id  =  2,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Maker FROM car_makers WHERE Id = 2;,SELECT Maker FROM car_makers WHERE Id = 2;,select maker from model_list where modelid = 2,"SELECT car_makers.Maker FROM car_makers WHERE car_makers.Id = ""value"""
SELECT count ( * )  FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id   =   T2.Maker WHERE T1.FullName   =   'American Motor Company',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*)  FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company');,SELECT COUNT(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company');,select count ( * ) from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = 'American motor Company',"SELECT COUNT(*) FROM model_list JOIN car_makers JOIN car_names WHERE car_makers.FullName = ""value"""
"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;","SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID","select t2.name, t3.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id","SELECT teacher.Name , course.Course FROM course_arrange JOIN course JOIN teacher"
"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;","SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC","select t2.name, t3.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id order by t2.name asc","SELECT teacher.Name , course.Course FROM course_arrange JOIN course JOIN teacher ORDER BY teacher.Name ASC"
"SELECT T3.Name ,  T2.Course, T1.teacher_ID FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID ORDER BY T3.Name",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT t.Teacher_ID, t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;","SELECT teacher.Teacher_ID, teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC","select t2.name, t1.teacher_id, t3.course from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id order by t2.name asc","SELECT teacher.Name , course.Course , teacher.Teacher_ID FROM course_arrange JOIN course JOIN teacher ORDER BY teacher.Name ASC"
SELECT Name FROM country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Name FROM country;,SELECT Name FROM country;,select name from country,SELECT country.Name FROM country
SELECT GovernmentForm FROM country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Name, GovernmentForm FROM country;",SELECT GovernmentForm FROM country;,select governmentform from country,SELECT country.GovernmentForm FROM country
SELECT SurfaceArea FROM country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Name, SurfaceArea FROM country;",SELECT SurfaceArea FROM country;,select surfacearea from country,SELECT country.SurfaceArea FROM country
SELECT Language FROM TV_Channel where series_name = 'Sky Music',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Language  FROM TV_Channel WHERE series_name = 'Sky Music';,SELECT Language FROM TV_Channel WHERE series_name = 'Sky Music';,"select language from tv_channel where series_name = ""Sky Music""","SELECT TV_Channel.Language FROM TV_Channel WHERE TV_Channel.series_name = ""value"""
SELECT distinct Package_Option FROM TV_Channel,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT series_name, Package_Option FROM TV_Channel;","SELECT id, Package_Option FROM TV_Channel;",select package_option from tv_channel,SELECT TV_Channel.Package_Option FROM TV_Channel
SELECT distinct  Content FROM TV_Channel,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT series_name, Content FROM TV_Channel;","SELECT id, Content FROM TV_Channel;",select content from tv_channel,SELECT TV_Channel.Content FROM TV_Channel
SELECT LANGUAGE FROM TV_Channel GROUP BY LANGUAGE ORDER BY count ( * )  ASC LIMIT 1,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Language FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) ASC LIMIT 1;,"SELECT Language, COUNT(*) AS LanguageCount FROM TV_Channel GROUP BY Language ORDER BY LanguageCount ASC LIMIT 1;",select language from tv_channel group by language order by count ( * ) limit 1,SELECT TV_Channel.Language FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY COUNT(*) ASC LIMIT 1
SELECT LANGUAGE FROM TV_Channel GROUP BY LANGUAGE ORDER BY count ( * )  desc LIMIT 1,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Language FROM TV_Channel GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT Language, COUNT(*) AS LanguageCount FROM TV_Channel GROUP BY Language ORDER BY LanguageCount DESC LIMIT 1;",select language from tv_channel group by language order by count ( * ) desc limit 1,SELECT TV_Channel.Language FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT content from tv_channel group by content order by count ( * )  desc limit 1,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Content FROM TV_Channel GROUP BY Content ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT Content, COUNT(*) AS ContentCount FROM TV_Channel GROUP BY Content ORDER BY ContentCount DESC LIMIT 1;",select content from tv_channel group by content order by count ( * ) desc limit 1,SELECT TV_Channel.Content FROM TV_Channel GROUP BY TV_Channel.Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT content from tv_channel group by content order by count ( * )  limit 1,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Content FROM TV_Channel GROUP BY Content ORDER BY COUNT(*) ASC LIMIT 1;,"SELECT Content, COUNT(*) AS ContentCount FROM TV_Channel GROUP BY Content ORDER BY ContentCount ASC LIMIT 1;",select content from tv_channel group by content order by count ( * ) limit 1,SELECT TV_Channel.Content FROM TV_Channel GROUP BY TV_Channel.Content ORDER BY COUNT(*) ASC LIMIT 1
SELECT series_name from tv_channel,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT series_name FROM TV_Channel WHERE Content = (SELECT Content FROM TV_Channel GROUP BY Content ORDER BY COUNT(*) ASC LIMIT 1);,SELECT series_name FROM TV_Channel;,select series_name from tv_channel where id not in ( select t1.id from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel group by t1.id order by count ( * ) limit 1 ),SELECT TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Content = ( SELECT TV_Channel.Content FROM TV_Channel GROUP BY TV_Channel.Content ORDER BY COUNT(*) ASC LIMIT 1 )
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT first_name FROM Owners UNION SELECT first_name FROM Professionals;,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners,select first_name from professionals union select first_name from owners,SELECT Professionals.first_name FROM Professionals UNION SELECT Professionals.first_name FROM Professionals
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT first_name FROM (   SELECT first_name FROM Owners   UNION   SELECT first_name FROM Professionals ) AS human_names WHERE first_name NOT IN (   SELECT name FROM Dogs );,SELECT first_name FROM Professionals  UNION  SELECT first_name FROM Owners EXCEPT  SELECT name FROM Dogs,select first_name from professionals union select first_name from owners except select t1.first_name from professionals as t1 join dogs as t2 on t1.professional_id = t2.owner_id,SELECT Professionals.first_name FROM Professionals EXCEPT SELECT Owners.first_name FROM Owners JOIN Dogs
SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners UNION SELECT name FROM Dogs,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT first_name FROM (   SELECT first_name FROM Owners   UNION   SELECT first_name FROM Professionals ) AS human_names WHERE first_name IN (   SELECT name FROM Dogs );,SELECT first_name FROM Professionals WHERE first_name IN (SELECT name FROM Dogs) UNION SELECT first_name FROM Owners WHERE first_name IN (SELECT name FROM Dogs),select first_name from professionals intersect select t1.first_name from professionals as t1 join owners as t2 on t1.professional_id = t2.owner_id union select t1.first_name from professionals as t1 join dogs as t2 on t1.professional_id = t2.owner_id,SELECT Professionals.first_name FROM Professionals INTERSECT SELECT Professionals.first_name FROM Professionals
select lname from Student AS T1 JOIN Has_Pet AS T2 ON T2.stuid = T1.stuid,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID;,SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID,select distinct t1.lname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid,SELECT Student.LName FROM Has_Pet JOIN Student
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE  T3.pettype  =  'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat';,SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat',"select t2.lname from has_pet as t1 join student as t2 on t1.stuid = t2.stuid join pets as t3 on t1.petid = t3.petid where t3.pettype = ""cat""","SELECT Student.LName FROM Has_Pet JOIN Student JOIN Pets WHERE Pets.PetType = ""value"""
SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3;,SELECT LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' AND pet_age = 3,select lname from student where stuid in ( select t1.stuid from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pet_age = 3 ),"SELECT Student.LName FROM Has_Pet JOIN Pets JOIN Student WHERE Pets.pet_age = ""value"""
"SELECT orchestra, Major_Record_Format  FROM orchestra",orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT Orchestra, Major_Record_Format FROM orchestra;","SELECT orchestra.Orchestra, orchestra.Major_Record_Format FROM orchestra","select orchestra, major_record_format from orchestra","SELECT orchestra.Orchestra , orchestra.Major_Record_Format FROM orchestra"
SELECT orchestra FROM orchestra order by orchestra,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
",SELECT Orchestra FROM orchestra ORDER BY Orchestra ASC;,SELECT orchestra.Orchestra FROM orchestra ORDER BY orchestra.Orchestra ASC,select orchestra from orchestra order by orchestra asc,SELECT orchestra.Orchestra FROM orchestra ORDER BY orchestra.Orchestra ASC
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT ( * )  ASC,orchestra,"CREATE TABLE ""conductor"" (
""Conductor_ID"" int,
""Name"" text,
""Age"" int,
""Nationality"" text,
""Year_of_Work"" int,
PRIMARY KEY (""Conductor_ID"")
);
CREATE TABLE ""orchestra"" (
""Orchestra_ID"" int,
""Orchestra"" text,
""Conductor_ID"" int,
""Record_Company"" text,
""Year_of_Founded"" real,
""Major_Record_Format"" text,
PRIMARY KEY (""Orchestra_ID""),
FOREIGN KEY (`Conductor_ID`) REFERENCES `conductor`(`Conductor_ID`)
);
CREATE TABLE ""performance"" (
""Performance_ID"" int,
""Orchestra_ID"" int,
""Type"" text,
""Date"" text,
""Official_ratings_(millions)"" real,
""Weekly_rank"" text,
""Share"" text,
PRIMARY KEY (""Performance_ID""),
FOREIGN KEY (`Orchestra_ID`) REFERENCES `orchestra`(`Orchestra_ID`)
);
CREATE TABLE ""show"" (
""Show_ID"" int,
""Performance_ID"" int,
""If_first_show"" bool,
""Result"" text,
""Attendance"" real,
FOREIGN KEY (`Performance_ID`) REFERENCES `performance`(`Performance_ID`)
);
","SELECT Major_Record_Format, COUNT(*) AS format_count  FROM orchestra GROUP BY Major_Record_Format ORDER BY format_count ASC;","SELECT Major_Record_Format, COUNT(*) AS Format_Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Format_Count ASC",select major_record_format from orchestra group by major_record_format order by count ( * ) asc,"SELECT orchestra.Major_Record_Format FROM orchestra GROUP BY orchestra.Major_Record_Format HAVING COUNT(*) > ""value"" ORDER BY COUNT(*) ASC"
SELECT count ( Museum_ID  )  FROM museum,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(DISTINCT Museum_ID) FROM museum;,SELECT COUNT(DISTINCT Museum_ID) FROM museum;,select count ( distinct museum_id ) from museum,SELECT COUNT(museum.Museum_ID) FROM museum
SELECT Num_of_Staff FROM museum where museum.Museum_ID  =  3,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Num_of_Staff FROM museum WHERE Museum_ID = 3;,SELECT Num_of_Staff FROM museum WHERE Museum_ID = 3;,select num_of_staff from museum where museum_id = 3,"SELECT museum.Num_of_Staff FROM museum WHERE museum.Museum_ID = ""value"""
SELECT Open_year FROM museum where Name = 'Capital Plaza Museum',museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Open_Year FROM museum WHERE Name = 'Capital Plaza Museum';,SELECT Open_Year FROM museum WHERE Name = 'Capital Plaza Museum';,"select open_year from museum where name = ""Capital Plaza Museum""","SELECT museum.Open_Year FROM museum WHERE museum.Name = ""value"""
SELECT  t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id GROUP BY t1.id HAVING count ( * )   >  1,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.Name HAVING COUNT(vi.Museum_ID) > 1;,SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.Name HAVING COUNT(visit.Museum_ID) > 1,select t2.name from visit as t1 join visitor as t2 on t1.visitor_id = t2.id group by t1.visitor_id having count ( * ) > 1,"SELECT visitor.Name FROM visit JOIN visitor GROUP BY visit.visitor_ID HAVING COUNT(*) > ""value"""
"SELECT  t1.name, t1.id, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id GROUP BY t1.id HAVING count ( * )   >  1",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT v.ID, v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID, v.Name, v.Age HAVING COUNT(vi.Museum_ID) > 1;","SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(visit.Museum_ID) > 1","select t1.id, t1.name, t1.age from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by t2.visitor_id having count ( * ) > 1","SELECT visitor.Name , visitor.ID , visitor.Age FROM visitor JOIN visit GROUP BY visit.visitor_ID HAVING COUNT(*) > ""value"""
"SELECT  name, Level_of_membership FROM visitor where age > 20",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT Name, Level_of_membership FROM visitor WHERE Age > 20;","SELECT Name, Level_of_membership FROM visitor WHERE Age > 20","select name, level_of_membership from visitor where age > 20","SELECT visitor.Name , visitor.Level_of_membership FROM visitor WHERE visitor.Age > ""value"""
"SELECT  t1.name , t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id where t2.total_spent > 100",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID WHERE vi.Total_spent > 100;","SELECT visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE visit.Total_spent > 100","select t2.name, t2.age from visit as t1 join visitor as t2 on t1.visitor_id = t2.id where t1.total_spent > 100","SELECT visitor.Name , visitor.Age FROM visitor JOIN visit WHERE visit.Total_spent > ""value"""
SELECT count ( GovernmentForm )  FROM country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT GovernmentForm) FROM country;,SELECT COUNT(DISTINCT GovernmentForm) FROM country,select count ( distinct governmentform ) from country,SELECT COUNT(country.GovernmentForm) FROM country
SELECT GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT COUNT(*)  FROM (   SELECT GovernmentForm, AVG(LifeExpectancy) AS avg_life_expectancy   FROM country   GROUP BY GovernmentForm   HAVING AVG(LifeExpectancy) > 72 );",SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE LifeExpectancy > 72,select count ( governmentform ) from country where lifeexpectancy > 72,"SELECT COUNT(*) FROM ( SELECT country.GovernmentForm FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > ""value"" )"
"SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT GovernmentForm, SUM(Population) AS total_population FROM country WHERE GovernmentForm IN (   SELECT GovernmentForm   FROM country   GROUP BY GovernmentForm   HAVING AVG(LifeExpectancy) > 72 ) GROUP BY GovernmentForm;","SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm","select governmentform, population from country where lifeexpectancy > 72 group by governmentform","SELECT country.GovernmentForm , AVG(country.Population) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > ""value"""
SELECT avg ( LifeExpectancy )  FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT GovernmentForm, AVG(LifeExpectancy) AS life_expectancy FROM country WHERE GovernmentForm IN (   SELECT GovernmentForm   FROM country   GROUP BY GovernmentForm   HAVING AVG(LifeExpectancy) > 72 ) GROUP BY GovernmentForm;","SELECT GovernmentForm, AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm","select governmentform, lifeexpectancy from country where lifeexpectancy > 72 group by governmentform","SELECT country.GovernmentForm , AVG(country.LifeExpectancy) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > ""value"""
"SELECT sum ( Population )  ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg ( LifeExpectancy )   >  72",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT GovernmentForm, SUM(Population) AS total_population FROM country WHERE GovernmentForm IN (   SELECT GovernmentForm   FROM country   GROUP BY GovernmentForm   HAVING AVG(LifeExpectancy) > 72 ) GROUP BY GovernmentForm;","SELECT GovernmentForm, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm","select governmentform, population from country where lifeexpectancy > 72","SELECT country.GovernmentForm , AVG(country.Population) FROM country GROUP BY country.GovernmentForm HAVING AVG(country.LifeExpectancy) > ""value"""
SELECT Level_of_membership FROM visitor WHERE ID  =  1,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Level_of_membership FROM visitor WHERE ID = 1;,SELECT Level_of_membership FROM visitor WHERE ID = 1,select level_of_membership from visitor where id = 1,"SELECT visitor.Level_of_membership FROM visitor WHERE visitor.ID = ""value"""
SELECT Name FROM visitor WHERE ID  =  1,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Name FROM visitor WHERE ID = 1;,SELECT Name FROM visitor WHERE ID = 1,select name from visitor where id = 1,"SELECT visitor.Name FROM visitor WHERE visitor.ID = ""value"""
SELECT Age FROM visitor WHERE ID  =  1,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Age FROM visitor WHERE ID = 1;,SELECT Age FROM visitor WHERE ID = 1,select age from visitor where id = 1,"SELECT visitor.Age FROM visitor WHERE visitor.ID = ""value"""
SELECT T1.airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  desc LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1;","SELECT COUNT(flights.Airline) AS NumberOfFlights, airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline ORDER BY NumberOfFlights DESC LIMIT 1",select airline from flights group by airline order by count ( * ) desc limit 1,SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline GROUP BY T1.Airline ORDER BY count ( * )  asc LIMIT 1,flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights ASC LIMIT 1;","SELECT COUNT(flights.Airline) AS NumberOfFlights, airlines.Airline FROM flights JOIN airlines ON flights.Airline = airlines.uid GROUP BY flights.Airline ORDER BY NumberOfFlights ASC LIMIT 1",select airline from flights group by airline order by count ( * ) limit 1,SELECT airlines.Airline FROM airlines JOIN flights GROUP BY flights.Airline ORDER BY COUNT(*) ASC LIMIT 1
"SELECT abbreviation from airlines where airline =  ""AirTran Airways""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT Abbreviation FROM airlines WHERE Airline = 'AirTran Airways';,SELECT Abbreviation FROM airlines WHERE Airline = 'AirTran Airways',select abbreviation from airlines where airline = 'AirTran Airways',"SELECT airlines.Abbreviation FROM airlines WHERE airlines.Airline = ""value"""
"SELECT country from airlines where airline =  ""AirTran Airways""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT Country FROM airlines WHERE Airline = 'AirTran Airways';,SELECT Country FROM airlines WHERE Airline = 'AirTran Airways',select country from airlines where airline = 'AirTran Airways',"SELECT airlines.Country FROM airlines WHERE airlines.Airline = ""value"""
"SELECT T1.id ,  T1.name FROM battle AS T1",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT id, name FROM battle;","SELECT id, name FROM battle","select id, name from battle","SELECT battle.id , battle.name FROM battle"
"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT b.id, b.name FROM battle b JOIN death d ON d.caused_by_ship_id = s.id JOIN ship s ON s.lost_in_battle = b.id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;","SELECT b.id, b.name  FROM battle b  JOIN ship s ON b.id = s.lost_in_battle  JOIN death d ON s.id = d.caused_by_ship_id  GROUP BY b.id, b.name  HAVING SUM(d.killed) > 10","select t1.id, t1.name from battle as t1 join death as t2 on t1.id = t2.caused_by_ship_id group by t1.id having count ( * ) > 10","SELECT battle.id , battle.name FROM battle JOIN death GROUP BY battle.id HAVING SUM(death.killed) > ""value"""
"SELECT T1.id ,  T1.name ,T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id   =   T2.lost_in_battle JOIN death AS T3 ON T2.id   =   T3.caused_by_ship_id GROUP BY T1.id HAVING sum ( T3.killed )   >  10",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT b.id, b.name, b.date FROM battle b JOIN ship s ON s.lost_in_battle = b.id JOIN death d ON d.caused_by_ship_id = s.id GROUP BY b.id, b.name, b.date HAVING SUM(d.killed) > 10;","SELECT b.id, b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name, b.date HAVING SUM(d.killed) > 10","select t1.id, t1.name, t1.date from battle as t1 join death as t2 on t1.id = t2.caused_by_ship_id group by t1.id having count ( * ) > 10","SELECT battle.name , battle.name , battle.date FROM battle JOIN death GROUP BY battle.id HAVING SUM(death.killed) > ""value"""
SELECT avg ( pet_age )  FROM pets WHERE PetType  =  'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT AVG(pet_age) AS avg_cat_age FROM Pets WHERE PetType = 'cat';,SELECT AVG(pet_age) FROM Pets WHERE PetType = 'cat';,"select avg ( pet_age ) from pets where pettype = ""cat""","SELECT AVG(Pets.pet_age) FROM Pets WHERE Pets.PetType = ""value"""
SELECT avg ( pet_age )  FROM pets WHERE PetType  =  'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT AVG(pet_age) AS avg_dog_age FROM Pets WHERE PetType = 'dog';,SELECT AVG(pet_age) FROM Pets WHERE PetType = 'dog';,"select avg ( pet_age ) from pets where pettype = ""dog""","SELECT AVG(Pets.pet_age) FROM Pets WHERE Pets.PetType = ""value"""
SELECT max ( pet_age )  FROM pets WHERE PetType  =  'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT MAX(pet_age) AS max_dog_age FROM Pets WHERE PetType = 'dog';,SELECT MAX(pet_age) FROM Pets WHERE PetType = 'dog';,"select max ( age ) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""dog""","SELECT MAX(Pets.pet_age) FROM Pets WHERE Pets.PetType = ""value"""
"SELECT max ( pet_age )  ,  pettype FROM pets GROUP BY pettype",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT    MAX(CASE WHEN PetType = 'cat' THEN pet_age END) AS max_cat_age,   MAX(CASE WHEN PetType = 'dog' THEN pet_age END) AS max_dog_age FROM Pets;","SELECT MAX(pet_age) FROM Pets WHERE PetType IN ('cat', 'dog');","select max ( t1.age ) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""cat"" or t3.pettype = ""dog""","SELECT MAX(Pets.pet_age) FROM Pets WHERE Pets.PetType = ""value"" OR Pets.PetType = ""value"""
SELECT max ( pet_age )  FROM pets WHERE PetType  =  'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT MAX(pet_age) AS max_cat_age FROM Pets WHERE PetType = 'cat';,SELECT MAX(pet_age) FROM Pets WHERE PetType = 'cat';,"select max ( age ) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""cat""","SELECT MAX(Pets.pet_age) FROM Pets WHERE Pets.PetType = ""value"""
"select fullname from car_makers where maker  =  ""amc""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT FullName FROM car_makers WHERE Maker = 'amc';,SELECT FullName FROM car_makers WHERE Maker = 'amc',"select fullname from car_makers where maker = ""amc""","SELECT car_makers.FullName FROM car_makers WHERE car_makers.Maker = ""value"""
"SELECT T3.model FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T1.countryname  =  ""germany""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT m.Model FROM model_list m JOIN car_makers c ON m.Maker = c.Id JOIN countries co ON c.Country = co.CountryId WHERE co.CountryName = 'germany';,SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'Germany',"select t2.model from car_makers as t1 join model_list as t2 on t1.id = t2.modelid join countries as t3 on t1.country = t3.countryid where t3.countryname = ""germany""","SELECT car_names.Model FROM car_makers JOIN car_names JOIN countries WHERE countries.CountryName = ""value"""
"SELECT modelid from model_list where model  =  ""bmw""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'bmw');,SELECT ModelId FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'bmw'),"select t2.modelid from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = ""BMW""","SELECT model_list.ModelId FROM model_list WHERE model_list.Model = ""value"""
"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country GROUP BY T1.countryId HAVING count ( * )   >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId   =   T2.Country JOIN MODEL_LIST AS T3 ON T2.Id   =   T3.Maker WHERE T3.Model   =   'fiat'",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT co.CountryId, co.CountryName FROM countries co WHERE (   SELECT COUNT(*)    FROM car_makers cm   WHERE cm.Country = co.CountryId ) > 3 OR co.CountryId IN (   SELECT c.Country   FROM car_makers c   JOIN model_list m ON c.Id = m.Maker   WHERE m.Model = 'flat' );","SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country LEFT JOIN model_list ON car_makers.Id = model_list.Maker WHERE model_list.Model = 'flat' OR countries.CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(Id) > 3) GROUP BY countries.CountryId, countries.CountryName","select t1.countryid, t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t2.maker = ( select maker from car_makers group by t2.country having count ( * ) > 3 union select maker from model_list where model = 'flat' )","SELECT countries.CountryId , countries.CountryName FROM countries JOIN model_list WHERE model_list.Model = ""value"" INTERSECT SELECT countries.CountryId , countries.CountryName FROM car_makers JOIN model_list JOIN countries GROUP BY countries.CountryId HAVING COUNT(*) > ""value"""
SELECT T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id order by count ( * )   desc limit 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id ORDER BY COUNT(t.treatment_id) DESC LIMIT 1;,"SELECT professional_id, COUNT(treatment_id) AS treatment_count FROM Treatments GROUP BY professional_id ORDER BY treatment_count DESC LIMIT 1) AS MostTreatments JOIN Professionals ON MostTreatments.professional_id = Professionals.professional_id SELECT home_phone FROM Professionals WHERE professional_id = (SELECT professional_id FROM (SELECT professional_id, COUNT(treatment_id) AS treatment_count FROM Treatments GROUP BY professional_id ORDER BY treatment_count DESC LIMIT 1) AS MostTreatments);",select t1.home_phone from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id order by count(*) desc limit 1,SELECT Professionals.cell_number FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.professional_id  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    > =    2,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2;,"SELECT professional_id FROM Treatments GROUP BY professional_id, treatment_type_code HAVING COUNT(DISTINCT treatment_type_code) >= 2;",select t1.professional_id from professionals as t1 join treatments as t2 on t1.professional_id = t2.professional_id group by t1.professional_id having count ( * ) > 2,"SELECT Professionals.professional_id FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id HAVING COUNT(*) >= ""value"""
select count ( * )  from  ( SELECT *  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id GROUP BY T1.professional_id HAVING count ( * )    =  1 ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) FROM (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) = 1) AS single_treatment_professionals;,SELECT COUNT(*) FROM (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(treatment_id) = 1) AS SingleTreatmentProfessionals;,select count ( * ) from ( select professional_id from treatments group by professional_id having count ( * ) = 1 ),"SELECT COUNT(*) FROM ( SELECT Professionals.professional_id FROM Professionals JOIN Treatments GROUP BY Professionals.professional_id HAVING COUNT(*) = ""value"" )"
SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Document_ID FROM Documents d WHERE (SELECT COUNT(*) FROM Paragraphs p WHERE p.Document_ID = d.Document_ID) BETWEEN 1 AND 2;,SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2,select document_id from paragraphs group by document_id having count ( * ) between 1 and 2,"SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID HAVING COUNT(*) BETWEEN ""value"" AND ""value"""
SELECT Paragraph_Text FROM Paragraphs GROUP BY document_id HAVING count ( * )  BETWEEN 1 AND 2,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_ID IN (   SELECT Document_ID    FROM Documents   WHERE (SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = Documents.Document_ID) BETWEEN 1 AND 2 );,SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2),select paragraph_text from paragraphs,SELECT Paragraphs.Paragraph_Text FROM Paragraphs
select name from teacher order by Age asc limit 1,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT Name, Age FROM teacher ORDER BY Age ASC LIMIT 1;",SELECT Name FROM teacher ORDER BY Age ASC LIMIT 1,select name from teacher order by age limit 1,SELECT teacher.Name FROM teacher ORDER BY teacher.Age ASC LIMIT 1
select Hometown from teacher order by Age asc limit 1,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT Name, Hometown  FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);",SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,select hometown from teacher order by age limit 1,SELECT teacher.Hometown FROM teacher ORDER BY teacher.Age ASC LIMIT 1
select Age from teacher where Name = 'Vicente Carretero',course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT Age FROM teacher WHERE Name = 'Vicente Carretero';,SELECT Age FROM teacher WHERE Name = 'Vicente Carretero',"select age from teacher where name = ""Vicente Carretero""","SELECT teacher.Age FROM teacher WHERE teacher.Name = ""value"""
"SELECT fname, lname FROM student WHERE sex   =   'F'",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
","SELECT LName, FName, PetType, pet_age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID;","SELECT I'm sorry, but your query request is incomplete. Could you please provide more details on what you would like to select?",select distinct pettype from pets,SELECT * FROM Student
SELECT DISTINCT city_code FROM student,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT DISTINCT city_code FROM Student;,SELECT DISTINCT city_code FROM Student;,select distinct city_code from student,SELECT Student.city_code FROM Student
SELECT T3.weight FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T2.petid   =   T3.petid WHERE T1.sex   =   'F',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT p.weight FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F';,SELECT Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Sex = 'F';,"select t2.weight from has_pet as t1 join pets as t2 on t1.petid = t2.petid join student as t3 on t1.stuid = t3.stuid where t3.sex = ""F""","SELECT Pets.weight FROM Has_Pet JOIN Pets JOIN Student WHERE Student.Sex = ""value"""
SELECT id from cars_data order by horsepower limit 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Id FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data);,SELECT MIN(Horsepower) FROM cars_data,select id from cars_data order by horsepower limit 1,SELECT cars_data.Id FROM cars_data ORDER BY cars_data.Horsepower ASC LIMIT 1
SELECT avg ( horsepower ) from cars_data,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT AVG(Horsepower) FROM cars_data;,SELECT AVG(Horsepower) FROM cars_data,select avg ( horsepower ) from cars_data,SELECT AVG(cars_data.Horsepower) FROM cars_data
SELECT T1.Id FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Id  FROM cars_data WHERE Horsepower < (SELECT AVG(Horsepower) FROM cars_data);,SELECT Id FROM cars_data WHERE Horsepower < (SELECT AVG(Horsepower) FROM cars_data),select id from cars_data where horsepower < ( select avg ( horsepower ) from cars_data ),SELECT cars_data.Id FROM cars_data WHERE cars_data.Horsepower < ( SELECT AVG(cars_data.Horsepower) FROM cars_data )
"SELECT T1.Id ,T2.model FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id   =   T2.MakeId WHERE T1.Horsepower <  ( SELECT avg ( Horsepower )  FROM CARS_DATA ) ",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT cars_data.Id, model_list.Model, car_names.Make FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE cars_data.Horsepower < (SELECT AVG(Horsepower) FROM cars_data);","SELECT cars_data.Id, car_names.Model, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE Horsepower < (SELECT AVG(Horsepower) FROM cars_data)","select t1.id, t2.model, t2.make from cars_data as t1 join car_names as t2 on t1.id = t2.makeid where t1.horsepower < ( select avg ( horsepower ) from cars_data )","SELECT car_names.Model , car_names.Make , cars_data.Horsepower FROM car_names JOIN cars_data WHERE cars_data.Horsepower < ( SELECT AVG(cars_data.Horsepower) FROM cars_data )"
SELECT transcript_id FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT MAX(transcript_date) AS latest_transcript_date FROM Transcripts;,SELECT MAX(transcript_date) FROM Transcripts;,select transcript_date from transcripts order by transcript_date desc limit 1,SELECT * FROM Transcripts JOIN Transcript_Contents ORDER BY Transcripts.transcript_date DESC LIMIT 1
SELECT transcript_date FROM Transcripts WHERE transcript_id  =  5,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT transcript_date  FROM Transcripts WHERE transcript_id = 5;,SELECT transcript_date FROM Transcripts WHERE transcript_id = 5;,select transcript_date from transcripts where transcript_id = 5,"SELECT Transcripts.transcript_date FROM Transcripts WHERE Transcripts.transcript_id = ""value"""
"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT transcript_id, transcript_date FROM Transcripts t WHERE (   SELECT COUNT(*)   FROM Transcript_Contents tc   WHERE tc.transcript_id = t.transcript_id ) >= 2;","SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   HAVING COUNT(student_course_id) >= 2 )","select t1.transcript_date, t1.transcript_id from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t1.transcript_id having count(*) >= 2","SELECT Transcripts.transcript_id , Transcripts.transcript_date FROM Transcripts JOIN Transcript_Contents GROUP BY Transcripts.transcript_id HAVING COUNT(*) >= ""value"""
SELECT T2.other_details FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT t.transcript_id, t.transcript_date, t.other_details FROM Transcripts t WHERE (   SELECT COUNT(*)   FROM Transcript_Contents tc   WHERE tc.transcript_id = t.transcript_id ) >= 2;",SELECT other_details FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   HAVING COUNT(student_course_id) >= 2 ),select other_details from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t2.transcript_id having count ( * ) > 2,"SELECT Transcripts.other_details FROM Transcripts JOIN Transcript_Contents GROUP BY Transcripts.transcript_id HAVING COUNT(*) >= ""value"""
SELECT T2.transcript_date FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id   =   T2.transcript_id GROUP BY T1.transcript_id HAVING count ( * )    > =    2,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT t.transcript_date FROM Transcripts t WHERE (   SELECT COUNT(*)   FROM Transcript_Contents tc   WHERE tc.transcript_id = t.transcript_id ) >= 2;,SELECT transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   HAVING COUNT(student_course_id) >= 2 ),select t1.transcript_date from transcripts as t1 join transcript_contents as t2 on t1.transcript_id = t2.transcript_id group by t2.transcript_id having count ( * ) > 2,"SELECT Transcripts.transcript_date FROM Transcripts JOIN Transcript_Contents GROUP BY Transcripts.transcript_id HAVING COUNT(*) >= ""value"""
select student_id from Friend,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT ID FROM Highschooler;,SELECT id FROM Highschooler;,select id from highschooler,SELECT Highschooler.ID FROM Highschooler
SELECT email_address FROM Professionals WHERE state   =   'Hawaii',dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT email_address FROM Professionals WHERE state = 'Hawaii';,SELECT email_address FROM Professionals WHERE state = 'Hawaii',"select email_address from professionals where state = ""Hawaii""","SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = ""value"""
SELECT email_address FROM Professionals WHERE state   =   'Wisconsin',dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT email_address FROM Professionals WHERE state = 'Wisconsin';,SELECT email_address FROM Professionals WHERE state = 'Wisconsin',"select email_address from professionals where state = ""Wisconsin""","SELECT Professionals.email_address FROM Professionals WHERE Professionals.state = ""value"""
SELECT first_name FROM Professionals WHERE role_code   =   'Employee',dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT first_name FROM Professionals WHERE role_code = 'Employee';,SELECT first_name FROM Professionals WHERE role_code = 'Employee',"select first_name from professionals where role_code = ""Employee""","SELECT Professionals.first_name FROM Professionals WHERE Professionals.role_code = ""value"""
"SELECT T1.semester_name, count ( * )  from semesters as T1 join student_enrolment as T2 on T1.semester_id  =  T2.semester_id group by T2.semester_id",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.semester_name, COUNT(se.student_enrolment_id) AS enrollment_count  FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_name;","SELECT semester_name, COUNT(student_enrolment_id) AS enrollments FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY semester_name","select semester_name, count ( * ) from semesters","SELECT Semesters.semester_name , COUNT(*) FROM Semesters JOIN Student_Enrolment GROUP BY Semesters.semester_id"
SELECT T1.semester_name from semesters as T1 join student_enrolment as T2 on T1.semester_id  =  T2.semester_id group by T2.semester_id order by count ( * )  desc limit 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.semester_name, COUNT(se.student_enrolment_id) AS enrollment_count FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_name ORDER BY enrollment_count DESC LIMIT 1;","SELECT semester_name, COUNT(student_enrolment_id) AS enrollments FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY semester_name ORDER BY enrollments DESC LIMIT 1",select semester_name from semesters group by semester_id order by count ( * ) desc limit 1,SELECT Semesters.semester_name FROM Semesters JOIN Student_Enrolment GROUP BY Semesters.semester_id ORDER BY COUNT(*) DESC LIMIT 1
"SELECT student_enrolment_id, degree_program_id from  Student_Enrolment",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT se.student_enrolment_id, se.degree_program_id FROM Student_Enrolment se;","SELECT student_enrolment_id, degree_program_id FROM Student_Enrolment","select t2.degree_program_id, t2.student_enrolment_id from semesters as t1 join student_enrolment as t2 on t1.semester_id = t2.semester_id group by t1.semester_id order by count ( * ) desc limit 1","SELECT Student_Enrolment.student_enrolment_id , Student_Enrolment.degree_program_id FROM Student_Enrolment"
sELECT semester_name FROM Semesters WHERE semester_id NOT IN (  SELECT semester_id FROM Student_Enrolment  ) ,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL;,SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT DISTINCT semester_id FROM Student_Enrolment),select semester_name from semesters where semester_id not in ( select semester_id from student_enrolment ),SELECT Semesters.semester_name FROM Semesters WHERE Semesters.semester_id NOT IN ( SELECT Student_Enrolment.semester_id FROM Student_Enrolment )
"SELECT name FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   ""English"" AND T2.IsOfficial   =   ""T"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Name FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' AND cl.IsOfficial = 'T' WHERE cl.CountryCode IS NULL,SELECT Country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F',"select distinct name from country except select t1.name from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t2.language = ""English""","SELECT country.Name FROM country EXCEPT SELECT country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"""
"SELECT avg ( LifeExpectancy )  FROM country WHERE Name NOT IN  ( SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   ""English"" AND T2.IsOfficial   =   ""T"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT c.Name, c.LifeExpectancy FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode AND cl.Language = 'English' AND cl.IsOfficial = 'T' WHERE cl.CountryCode IS NULL","SELECT country.Name, AVG(country.LifeExpectancy) AS AverageLifeExpectancy FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language != 'English' OR (countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'F') GROUP BY country.Name","select avg ( lifeexpectancy ) from country where code not in ( select countrycode from countrylanguage where language = ""English"" )","SELECT AVG(country.LifeExpectancy) , country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language = ""value"" GROUP BY country.Name"
"SELECT avg ( LifeExpectancy )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE T2.Language   =   ""English"" AND T2.IsOfficial   =   ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT I will not generate any SQL code without being provided a clear question or task related to the given database schema. Please let me know if you have any other questions!,"SELECT country.Name, AVG(country.LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T') GROUP BY country.Name","select avg ( lifeexpectancy ) from country where code not in ( select countrycode from countrylanguage where language = ""English"" )","SELECT AVG(country.LifeExpectancy) , country.Name FROM country JOIN countrylanguage WHERE countrylanguage.Language != ""value"" GROUP BY country.Name"
"SELECT FlightNo FROM flights where SourceAirport = ""CVO"" and DestAirport = ""SNA""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT FlightNo FROM flights WHERE SourceAirport = 'CVO' AND DestAirport = 'SNA';,SELECT FlightNo FROM flights WHERE SourceAirport = 'CVO' AND DestAirport = 'SNA',"select flightno from flights where sourceairport = ""CVO"" and destairport = ""SNA""","SELECT * FROM flights JOIN airports WHERE airports.AirportCode = ""value"" AND airports.AirportCode = ""value"""
"SELECT * FROM flights where SourceAirport = ""CVO"" and DestAirport = ""DFW""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT FlightNo  FROM flights WHERE SourceAirport = 'CVO' AND DestAirport = 'DFW';,SELECT FlightNo FROM flights WHERE SourceAirport = 'CVO' AND DestAirport = 'DFW',select flightno from flights where sourceairport = 'CVO' and destairport = 'DFW',"SELECT * FROM airports JOIN flights WHERE airports.AirportCode = ""value"""
"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   "" CVO""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO';,SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'CVO',"select airline from flights where sourceairport = ""CVO""","SELECT flights.Airline FROM flights JOIN airports WHERE airports.AirportCode = ""value"""
"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id  =  T2.Channel WHERE T2.Episode  =  ""A Love of a Lifetime""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT c.series_name FROM TV_series s JOIN TV_Channel c ON s.Channel = c.id WHERE s.Episode = 'A Love of a Lifetime';,SELECT Channel FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"select channel from tv_series where episode = ""A love of a lifetime""","SELECT TV_series.Channel FROM TV_Channel JOIN TV_series WHERE TV_Channel.series_name = ""value"""
"SELECT  Viewers_m FROM  TV_series  where Episode  =  ""A Love of a Lifetime""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Viewers_m FROM TV_series WHERE Episode = 'A Love of a Lifetime';,SELECT Viewers_m FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"select viewers_m from tv_series where episode = ""A love of a lifetime""","SELECT TV_series.Viewers_m FROM TV_series JOIN TV_Channel WHERE TV_Channel.series_name = ""value"""
"SELECT  Weekly_Rank  FROM  TV_series  where Episode  =  ""A Love of a Lifetime""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Rating FROM TV_series WHERE Episode = 'A Love of a Lifetime';,SELECT Rating FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"select rating from tv_series where episode = ""A love of a lifetime""","SELECT TV_series.Rating FROM TV_series JOIN TV_Channel WHERE TV_Channel.series_name = ""value"""
"SELECT  Air_Date  FROM  TV_series  where Episode  =  ""A Love of a Lifetime""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';,SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"select air_date from tv_series where episode = ""A love of a lifetime""","SELECT TV_series.Air_Date FROM TV_series JOIN TV_Channel WHERE TV_Channel.series_name = ""value"""
SELECT player_id FROM players ORDER BY birth_date desc LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT player_id FROM players ORDER BY birth_date DESC LIMIT 1;,"SELECT MIN(birth_date), player_id FROM players GROUP BY player_id ORDER BY birth_date DESC LIMIT 1",select player_id from players order by birth_date desc limit 1,SELECT players.player_id FROM players ORDER BY players.birth_date ASC LIMIT 1
SELECT player_id FROM players ORDER BY birth_date LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT player_id FROM players ORDER BY birth_date ASC LIMIT 1;,"SELECT MAX(birth_date), player_id FROM players GROUP BY player_id ORDER BY birth_date ASC LIMIT 1",select player_id from players order by birth_date desc limit 1,SELECT players.player_id FROM players ORDER BY players.birth_date DESC LIMIT 1
"SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT first_name, country_code  FROM players WHERE player_id = (SELECT player_id FROM players ORDER BY birth_date ASC LIMIT 1);","SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM players ORDER BY birth_date ASC LIMIT 1)","select first_name, country_code from players order by birth_date desc limit 1","SELECT players.first_name , players.country_code FROM players ORDER BY players.birth_date DESC LIMIT 1"
SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * )    > =    2,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT Name FROM teacher WHERE Teacher_ID IN (   SELECT Teacher_ID   FROM course_arrange   GROUP BY Teacher_ID   HAVING COUNT(DISTINCT Course_ID) >= 2 );,SELECT GROUP_CONCAT(t.Name) AS Teacher_Names FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(ca.Course_ID) >= 2,select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id having count(*) >= 2,"SELECT teacher.Name FROM course_arrange JOIN teacher JOIN course GROUP BY course_arrange.Teacher_ID HAVING COUNT(*) >= ""value"""
"SELECT T2.age, t2.hometown FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID GROUP BY T2.Name HAVING COUNT ( * )    > =    2",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
","SELECT t.Age, t.Hometown FROM teacher t WHERE t.Name = (   SELECT Name    FROM teacher   WHERE Teacher_ID IN (     SELECT Teacher_ID     FROM course_arrange     GROUP BY Teacher_ID     HAVING COUNT(DISTINCT Course_ID) >= 2   ) );","SELECT t.Age, t.Hometown FROM teacher t WHERE t.Name = 'Her Name'","select t2.name, t2.age, t2.hometown from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id group by t1.teacher_id having count ( * ) > 1","SELECT teacher.Age , teacher.Hometown FROM course_arrange JOIN teacher JOIN course GROUP BY course_arrange.Teacher_ID HAVING COUNT(*) >= ""value"""
SELECT t1.grade FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID   =   T2.Teacher_ID order by t2.age desc limit 1,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT ca.Grade FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID WHERE t.Age = (SELECT MAX(Age) FROM teacher);,SELECT ca.Grade FROM course_arrange ca JOIN teacher t ON ca.Teacher_ID = t.Teacher_ID ORDER BY t.Age DESC LIMIT 1,select grade from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id order by t2.age desc limit 1,SELECT course_arrange.Grade FROM course_arrange JOIN teacher WHERE teacher.Age = ( SELECT MAX(teacher.Age) FROM teacher )
SELECT max ( num_of_ticket )  FROM visit,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT MAX(Num_of_Ticket) AS max_tickets_bought FROM visit;,SELECT MAX(Num_of_Ticket) FROM visit,select max ( num_of_ticket ) from visit,SELECT MAX(visit.Num_of_Ticket) FROM visit
SELECT avg ( num_of_ticket )  FROM visit,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT AVG(Num_of_Ticket) AS avg_tickets_bought FROM visit;,SELECT AVG(Num_of_Ticket) FROM visit,select avg ( num_of_ticket ) from visit,SELECT AVG(visit.Num_of_Ticket) FROM visit
SELECT   count ( * )   from ship,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT COUNT(*) FROM ship;,SELECT COUNT(*) FROM ship;,select count ( * ) from ship,SELECT COUNT(*) FROM ship
SELECT  name  from ship,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT name FROM ship;,SELECT name FROM ship;,select name from ship,SELECT ship.name FROM ship
SELECT Name FROM singer ORDER BY age LIMIT 1,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Name FROM singer ORDER BY Age ASC LIMIT 1;,SELECT Name FROM singer ORDER BY Age ASC LIMIT 1,select name from singer order by age limit 1,SELECT singer.Name FROM singer ORDER BY singer.Age ASC LIMIT 1
SELECT Song_Name FROM singer where name  =  'Tribal King',concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Song_Name FROM singer WHERE Name = 'Tribal King';,SELECT Song_Name FROM singer WHERE Name = 'Tribal King',"select song_name from singer where name = ""Tribal King""","SELECT singer.Song_Name FROM singer WHERE singer.Name = ""value"""
SELECT song_release_year FROM singer where name  =  'Tribal King',concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Song_release_year FROM singer WHERE Name = 'Tribal King';,SELECT Song_release_year FROM singer WHERE Name = 'Tribal King',"select song_release_year from singer where name = ""Tribal King""","SELECT singer.Song_release_year FROM singer WHERE singer.Name = ""value"""
"SELECT Name FROM country WHERE continent   =   ""Europe""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Name  FROM country WHERE Continent = 'Europe';,SELECT Name FROM country WHERE Continent = 'Europe',select name from country where continent = 'Europe',"SELECT country.Name FROM country WHERE country.Continent = ""value"""
"SELECT Name FROM country WHERE continent   =   ""Europe"" AND Population   =   ""80000""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;,SELECT Name FROM country WHERE Population = 80000,select name from country where population > 80000,"SELECT country.Name FROM country WHERE country.Population = ""value"""
SELECT Name FROM singer,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT Name FROM singer;,SELECT Name FROM singer;,select name from singer,SELECT singer.Name FROM singer
SELECT department_name FROM Departments WHERE department_name LIKE '%computer%',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT department_name FROM Departments WHERE department_name LIKE '%computer%';,SELECT department_name FROM Departments WHERE department_name LIKE '%computer%';,select department_name from departments where department_name like '%computer%',"SELECT Departments.department_name FROM Departments WHERE Departments.department_name LIKE ""value"""
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT department_description  FROM Departments WHERE department_name LIKE '%computer%';,SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';,select department_description from departments where department_name like '%computer%',"SELECT Departments.department_description FROM Departments WHERE Departments.department_name LIKE ""value"""
SELECT department_id FROM Departments WHERE department_name LIKE '%computer%',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT department_id  FROM Departments WHERE department_name LIKE '%computer%';,SELECT department_id FROM Departments WHERE department_name LIKE '%computer%';,select department_id from departments where department_name like '%computer%',"SELECT Departments.department_id FROM Departments WHERE Departments.department_name LIKE ""value"""
"SELECT other_details FROM Departments WHERE department_name  =  ""history""",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT other_details FROM Departments WHERE department_name = 'history';,SELECT other_details FROM Departments WHERE department_name = 'history';,"select other_details from departments where department_name = ""history""","SELECT Departments.other_details FROM Departments WHERE Departments.department_name = ""value"""
SELECT sum ( Cylinders )  FROM cars_data,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT DISTINCT Cylinders FROM cars_data;,SELECT COUNT(DISTINCT Cylinders) FROM cars_data,select count ( cylinders ) from cars_data,SELECT COUNT(cars_data.Cylinders) FROM cars_data
SELECT Weight FROM cars_data ORDER BY Weight DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MAX(Weight) FROM cars_data;,SELECT MAX(Weight) FROM cars_data,select weight from cars_data order by weight desc limit 1,SELECT cars_data.Weight FROM cars_data ORDER BY cars_data.Weight DESC LIMIT 1
SELECT count ( * )  FROM cars_data,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(DISTINCT Year) FROM cars_data;,SELECT COUNT(DISTINCT Year) FROM cars_data,select count ( year ) from cars_data,SELECT COUNT(cars_data.Year) FROM cars_data
SELECT accelerate FROM cars_data ORDER BY accelerate DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MAX(Accelerate) FROM cars_data;,SELECT MAX(Accelerate) FROM cars_data,select accelerate from cars_data order by accelerate desc limit 1,SELECT MAX(cars_data.Accelerate) FROM cars_data
SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT MAX(Edispl) FROM cars_data;,SELECT MAX(Edispl) FROM cars_data,select edispl from cars_data order by edispl desc limit 1,SELECT cars_data.Edispl FROM cars_data ORDER BY cars_data.Edispl DESC LIMIT 1
"SELECT age from singer where name  =  ""Joe Sharp""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Age FROM singer WHERE Name = 'Joe Sharp';,SELECT Age FROM singer WHERE Name = 'Joe Sharp';,"select age from singer where name = ""Joe Sharp""","SELECT singer.Age FROM singer WHERE singer.Name = ""value"""
"select count ( * )  from singer where country  =  ""United States""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*) FROM singer WHERE Country = 'United States';,SELECT COUNT(Singer_ID) FROM singer WHERE Country = 'US';,"select count ( * ) from singer where country = ""USA""","SELECT COUNT(*) FROM singer WHERE singer.Country = ""value"""
"select count ( * )  from singer where Is_male  =  ""True""",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*) FROM singer WHERE Is_male = 'T';,SELECT COUNT(Singer_ID) FROM singer WHERE Is_male = 'T';,select count ( * ) from singer where is_male = 'T',"SELECT COUNT(*) FROM singer WHERE singer.Is_male = ""value"""
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Model  FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'General Motors';,SELECT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'General Motors';,"select t2.model from car_makers as t1 join model_list as t2 on t1.id = t2.maker where t1.fullname = ""General Motors""","SELECT model_list.Model FROM model_list JOIN car_makers WHERE car_makers.FullName = ""value"""
SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T4.weight  >  3500,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT model_list.Model FROM model_list  JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 3500;,SELECT car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Weight > 3500;,select t1.model from model_list as t1 join cars_data as t2 on t1.model = t2.id where t2.weight > 3500,"SELECT model_list.Model FROM model_list JOIN car_makers JOIN car_names WHERE car_makers.FullName = ""value"""
"SELECT DISTINCT T2.Model, T3.maker FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.horsepower desc limit 1",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_names.Make, car_names.Model FROM car_names  JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower = (SELECT MAX(Horsepower) FROM cars_data);","SELECT car_names.Make, car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY cars_data.Horsepower DESC LIMIT 1;","select t1.make, t1.model from car_names as t1 join cars_data as t2 on t1.make = t2.id order by t2.horsepower desc limit 1","SELECT car_names.Make , car_names.Model FROM car_names JOIN car_makers JOIN cars_data ORDER BY cars_data.Horsepower DESC LIMIT 1"
SELECT count ( * )  FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' and t4.mpg > 15,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'General Motors' AND cars_data.MPG > 15;,SELECT COUNT(*) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'General Motors' AND cars_data.MPG > 15;,"select count ( * ) from ( select t1.make from car_names as t1 join model_list as t2 on t1.model = t2.modelid join car_makers as t3 on t2.maker = t3.id where t3.fullname = ""General Motors"" and mpg > 15","SELECT COUNT(*) FROM car_names JOIN cars_data JOIN car_makers WHERE car_makers.FullName = ""value"" AND cars_data.MPG > ""value"""
"SELECT DISTINCT t1.make, t1.model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model   =   T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker   =   T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId   =   T4.Id WHERE T3.FullName   =   'General Motors' order by t4.mpg desc limit 1",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT car_names.Make, car_names.Model FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.FullName = 'General Motors' ORDER BY cars_data.MPG DESC LIMIT 1;","SELECT car_names.Make, car_names.Model FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'General Motors' ORDER BY cars_data.MPG DESC LIMIT 1;","select t2.make, t2.model from car_makers as t1 join car_names as t2 on t1.id = t2.model where t1.fullname = ""General Motors"" order by t2.mpg","SELECT car_names.Make , car_names.Model FROM car_makers JOIN cars_data JOIN car_names WHERE car_makers.FullName = ""value"" AND cars_data.MPG > ""value"""
SELECT count ( * )  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM Highschooler;,SELECT COUNT(DISTINCT ID) FROM Highschooler;,select count ( * ) from highschooler,SELECT COUNT(*) FROM Highschooler
SELECT avg ( grade )  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT AVG(grade) FROM Highschooler;,SELECT AVG(grade) FROM Highschooler;,select avg ( grade ) from highschooler,SELECT AVG(Highschooler.grade) FROM Highschooler
SELECT grade FROM Highschooler order by grade desc limit 1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT MAX(grade) FROM Highschooler;,SELECT MAX(grade) FROM Highschooler;,select grade from highschooler order by grade desc limit 1,SELECT Highschooler.grade FROM Highschooler ORDER BY Highschooler.grade DESC LIMIT 1
SELECT grade FROM Highschooler order by grade limit 1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT MIN(grade) FROM Highschooler;,SELECT MIN(grade) FROM Highschooler;,select grade from highschooler order by grade limit 1,SELECT MIN(Highschooler.grade) FROM Highschooler
SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT DISTINCT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country;,SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName,select distinct t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country,SELECT countries.CountryName FROM countries JOIN car_makers
SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId   =   T2.Country,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Country IS NULL;,SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers),select countryname from countries except select country from car_makers,SELECT countries.CountryName FROM countries WHERE countries.CountryId NOT IN ( SELECT car_makers.Country FROM car_makers )
"SELECT student_id, friend_id FROM Friend",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT student_id, friend_id FROM Friend;","SELECT student_id, friend_id FROM Friend","select student_id,friend_id from friend","SELECT Friend.student_id , Friend.friend_id FROM Friend"
SELECT id FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT ID FROM Highschooler;,SELECT ID FROM Highschooler,select id from highschooler,SELECT Highschooler.ID FROM Highschooler
SELECT count ( id )  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(ID) FROM Highschooler;,SELECT COUNT(ID) FROM Highschooler,select count ( distinct t1.id ) from highschooler as t1 join friend as t2 on t1.id = t2.student_id,SELECT COUNT(Friend.student_id) FROM Friend
SELECT count ( distinct friend_id )  FROM Friend,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(DISTINCT friend_id) FROM Friend;,SELECT COUNT(*) FROM Friend,select count ( distinct friend_id ) from friend,SELECT COUNT(Friend.friend_id) FROM Friend
SELECT id FROM Highschooler EXCEPT SELECT friend_id FROM Friend,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT ID FROM Highschooler WHERE ID NOT IN (   SELECT student_id FROM Friend   UNION   SELECT friend_id FROM Friend );,SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend) AND ID NOT IN (SELECT friend_id FROM Friend),select id from highschooler,"SELECT Friend.student_id FROM Friend WHERE Friend.friend_id != ""value"""
"SELECT name, grade FROM Highschooler where id  =  1510",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT name, grade FROM Highschooler WHERE ID = 1510;","SELECT name, grade FROM Highschooler WHERE ID = 1510","select name,grade from highschooler where id = 1510","SELECT Highschooler.name , Highschooler.grade FROM Highschooler WHERE Highschooler.ID = ""value"""
SELECT city FROM employee,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT DISTINCT City FROM employee;,SELECT City FROM employee GROUP BY City,select distinct city from employee,SELECT employee.City FROM employee
SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count ( * )   >  1,employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;,SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1,select city from employee where age < 30 group by city having count ( * ) > 1,"SELECT employee.City FROM employee WHERE employee.Age < ""value"" GROUP BY employee.City HAVING COUNT(*) < ""value"""
SELECT Age FROM employee WHERE city  =  'Bath',employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
","SELECT Name, Age FROM employee WHERE City = 'Bath';",SELECT Age FROM employee WHERE City = 'Bath',"select age from employee where city = ""Bath""","SELECT employee.Age FROM employee WHERE employee.City = ""value"" AND employee.Age < ""value"""
SELECT count ( * )  FROM student WHERE age  >  20,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*)  FROM Student WHERE Age > 20;,SELECT COUNT(*) FROM Student WHERE Age > 20;,select count(*) from student where age > 20,"SELECT COUNT(*) FROM Student WHERE Student.Age > ""value"""
SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid WHERE T1.age  >  20,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*)  FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;,SELECT COUNT(DISTINCT s.StuID) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.Age > 20;,select count ( * ) from student as t1 join has_pet as t2 on t1.stuid = t2.stuid where t1.age > 20,"SELECT COUNT(*) FROM Has_Pet JOIN Student WHERE Student.Age > ""value"""
SELECT distinct loser_name from matches where loser_age  =  24.626967830300003,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT loser_name FROM matches WHERE loser_age = 24.626967830300003;,SELECT loser_name FROM matches WHERE loser_age = 24.626967830300003;,"select loser_name from matches where loser_age = ""24.626967830300003""","SELECT matches.loser_name FROM matches WHERE matches.loser_age = ""value"""
"SELECT count ( * )  from matches where loser_name  =  ""Petra Kvitova"" or winner_name  =  ""Petra Kvitova""",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) AS total_matches FROM matches WHERE winner_name = 'Petra Kvitova' OR loser_name = 'Petra Kvitova';,SELECT COUNT(*) FROM matches WHERE winner_name = 'Petra Kvitova' OR loser_name = 'Petra Kvitova';,"select count ( * ) from players as t1 join matches as t2 on t1.player_id = t2.loser_id where t1.first_name = ""Petra"" and t1.last_name = ""Kvitova""","SELECT COUNT(*) FROM matches JOIN players WHERE players.first_name = ""value"" AND players.last_name = ""value"""
SELECT distinct loser_id from matches where loser_rank_points > 3500,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT loser_id, loser_name, loser_rank, loser_rank_points  FROM matches WHERE loser_rank_points > 3500;","SELECT loser_id, loser_name, loser_rank_points FROM matches WHERE loser_rank_points > 3500;",select * from matches where loser_rank_points > 3500,"SELECT matches.loser_id FROM matches WHERE matches.loser_rank_points > ""value"""
"SELECT winner_name , winner_rank_points FROM matches GROUP BY winner_name ORDER BY count ( * )  DESC LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT winner_name, winner_rank_points, COUNT(*) AS wins FROM matches GROUP BY winner_name, winner_rank_points ORDER BY wins DESC LIMIT 1;","SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1;","select t2.winner_name, t2.winner_rank_points from rankings as t1 join matches as t2 on t1.ranking_date = t2.tourney_date group by t1.player_id order by count ( * ) desc limit 1","SELECT matches.winner_name , matches.winner_rank_points FROM matches WHERE matches.winner_rank_points = ( SELECT matches.winner_id FROM matches GROUP BY matches.winner_id ORDER BY COUNT(*) DESC LIMIT 1 )"
SELECT name FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler;,SELECT names FROM Highschooler;,select name from highschooler,SELECT Highschooler.name FROM Highschooler
SELECT count ( * )  from  Likes  group by student_id order by  count ( * )  desc limit  1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT student_id, MAX(num_likes) AS max_likes FROM (   SELECT student_id, COUNT(*) AS num_likes   FROM Likes   GROUP BY student_id ) AS likes_count GROUP BY student_id;","SELECT student_id, COUNT(liked_id) AS NumberOfLikes FROM Likes GROUP BY student_id ORDER BY NumberOfLikes DESC LIMIT 1;","select t1.name, count ( * ) from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.name order by count ( * ) desc limit 1",SELECT COUNT(*) FROM Highschooler JOIN Likes GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count ( * )  DESC limit 1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name ORDER BY COUNT(*) DESC LIMIT 1;",SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY COUNT(liked_id) DESC LIMIT 1);,select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t2.student_id order by count ( * ) desc limit 1,SELECT Highschooler.name FROM Highschooler JOIN Likes GROUP BY Likes.student_id ORDER BY COUNT(*) DESC LIMIT 1
"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code   =   T2.feature_type_code WHERE T1.feature_name   =   ""AirCon""",real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
",SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (   SELECT feature_type_code   FROM Other_Available_Features   WHERE feature_name = 'AirCon' );,SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon'),"select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code = t2.feature_type_code where t1.feature_name = ""AirCon""","SELECT Ref_Feature_Types.feature_type_name FROM Ref_Feature_Types JOIN Other_Available_Features WHERE Other_Available_Features.feature_name = ""value"""
"select feature_description from Other_Available_Features  where feature_name  =  ""AirCon""",real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
",SELECT feature_description FROM Other_Available_Features WHERE feature_name = 'AirCon';,SELECT feature_description FROM Other_Available_Features WHERE feature_name = 'AirCon',"select feature_description from other_available_features where feature_name = ""AirCon""","SELECT Other_Available_Features.feature_description FROM Other_Available_Features WHERE Other_Available_Features.feature_name = ""value"""
select count ( * )  from  ( select distinct feature_id from Other_Available_Features  ) ,real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
",SELECT COUNT(DISTINCT feature_id) FROM Other_Available_Features;,SELECT COUNT(DISTINCT feature_id) FROM Other_Available_Features,select count ( distinct feature_id ) from other_available_features,SELECT COUNT(Other_Available_Features.feature_id) FROM Other_Available_Features
"select feature_type_code from Other_Available_Features  where feature_name  =  ""AirCon""",real_estate_properties,"CREATE TABLE `Ref_Feature_Types` (
`feature_type_code` VARCHAR(20) PRIMARY KEY,
`feature_type_name` VARCHAR(80)
);
CREATE TABLE `Ref_Property_Types` (
`property_type_code` VARCHAR(20) PRIMARY KEY,
`property_type_description` VARCHAR(80)
);
CREATE TABLE `Other_Available_Features` (
`feature_id` INTEGER PRIMARY KEY,
`feature_type_code` VARCHAR(20) NOT NULL,
`feature_name` VARCHAR(80),
`feature_description` VARCHAR(80),
FOREIGN KEY (`feature_type_code` ) REFERENCES `Ref_Feature_Types`(`feature_type_code` )
);
CREATE TABLE `Properties` (
`property_id` INTEGER PRIMARY KEY,
`property_type_code` VARCHAR(20) NOT NULL,
`date_on_market` DATETIME,
`date_sold` DATETIME,
`property_name` VARCHAR(80),
`property_address` VARCHAR(255),
`room_count` INTEGER,
`vendor_requested_price` DECIMAL(19,4),
`buyer_offered_price` DECIMAL(19,4),
`agreed_selling_price` DECIMAL(19,4),
`apt_feature_1` VARCHAR(255),
`apt_feature_2` VARCHAR(255),
`apt_feature_3` VARCHAR(255),
`fld_feature_1` VARCHAR(255),
`fld_feature_2` VARCHAR(255),
`fld_feature_3` VARCHAR(255),
`hse_feature_1` VARCHAR(255),
`hse_feature_2` VARCHAR(255),
`hse_feature_3` VARCHAR(255),
`oth_feature_1` VARCHAR(255),
`oth_feature_2` VARCHAR(255),
`oth_feature_3` VARCHAR(255),
`shp_feature_1` VARCHAR(255),
`shp_feature_2` VARCHAR(255),
`shp_feature_3` VARCHAR(255),
`other_property_details` VARCHAR(255),
FOREIGN KEY (`property_type_code` ) REFERENCES `Ref_Property_Types`(`property_type_code` )
);
CREATE TABLE `Other_Property_Features` (
`property_id` INTEGER NOT NULL,
`feature_id` INTEGER NOT NULL,
`property_feature_description` VARCHAR(80),
FOREIGN KEY (`feature_id` ) REFERENCES `Other_Available_Features`(`feature_id` ),
FOREIGN KEY (`property_id` ) REFERENCES `Properties`(`property_id` )
);
",SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon';,SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon',"select feature_type_code from other_available_features where feature_name = ""AirCon""","SELECT Other_Available_Features.feature_type_code FROM Other_Available_Features WHERE Other_Available_Features.feature_name = ""value"""
SELECT transcript_date FROM Transcripts group by transcript_date order by count ( * )  asc limit 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY COUNT(*) ASC LIMIT 1;,"SELECT transcript_date, COUNT(*) AS count FROM Transcripts GROUP BY transcript_date ORDER BY count ASC LIMIT 1",select transcript_date from transcripts group by transcript_date order by count ( * ) asc limit 1,SELECT Transcripts.transcript_date FROM Transcripts GROUP BY Transcripts.transcript_date ORDER BY COUNT(*) ASC LIMIT 1
"SELECT count ( * )  FROM Transcripts Where transcript_date  =  ""1975-05-06 12:04:47""",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) FROM Transcripts WHERE transcript_date = '1975-05-06 12:04:47';,SELECT COUNT(*) FROM Transcripts WHERE transcript_date = '1975-05-06 12:04:47',"select count ( * ) from transcripts where transcript_date = ""1975-05-06 12:04:47""","SELECT COUNT(*) FROM Transcripts WHERE Transcripts.transcript_date = ""value"""
SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY count ( * )  desc limit 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT transcript_date FROM Transcripts GROUP BY transcript_date ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT transcript_date, COUNT(*) AS count FROM Transcripts GROUP BY transcript_date ORDER BY count DESC LIMIT 1",select transcript_date from transcripts group by transcript_date order by count ( * ) desc limit 1,SELECT Transcripts.transcript_date FROM Transcripts GROUP BY Transcripts.transcript_date ORDER BY COUNT(*) DESC LIMIT 1
"SELECT T2.DestAirport FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
","SELECT a.AirportName, a.City, a.Country FROM flights f JOIN airlines al ON f.Airline = al.uid JOIN airports a ON f.DestAirport = a.AirportCode WHERE al.Airline = 'United Airlines';","SELECT FlightNo, DestAirport FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')",select t1.destairport from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode join airlines as t3 on t1.airline = t3.uid where t3.airline = 'United Airlines',"SELECT flights.DestAirport FROM flights JOIN airports JOIN airlines WHERE airlines.Airline = ""value"""
"SELECT COUNT ( T1.Airline )  FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.sourceAirport like ""%APG%""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT COUNT(DISTINCT Airline) FROM flights WHERE SourceAirport = 'APG';,SELECT COUNT(DISTINCT Airline) FROM flights WHERE SourceAirport = 'APG',select count ( distinct airline ) from flights where destairport = 'APG',"SELECT COUNT(*) FROM flights JOIN airlines WHERE flights.DestAirport = ""value"""
"SELECT T2.FlightNo FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T1.Airline  =  ""Delta Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT FlightNo FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'Delta Airlines';,SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Delta Airlines'),"select flightno from airlines as t1 join flights as t2 on t1.uid = t2.airline where t1.abbreviation = ""Delta""","SELECT flights.FlightNo FROM airlines JOIN flights JOIN airports WHERE airlines.Airline = ""value"""
SELECT count ( * )  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker   =   T2.Id JOIN COUNTRIES AS T3 ON T2.Country   =   T3.CountryId WHERE T3.CountryName   =   'usa',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*)  FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'USA';,SELECT COUNT(DISTINCT model_list.Model) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA',"select count ( * ) from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.countryname = ""USA""","SELECT COUNT(*) FROM car_makers JOIN model_list JOIN countries WHERE countries.CountryName = ""value"""
SELECT distinct t1.maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country   =   T2.CountryId WHERE T2.CountryName   =   'usa',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT cm.Maker, cm.FullName FROM model_list ml  JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'USA';",SELECT DISTINCT car_makers.FullName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'USA',"select t1.maker from car_makers as t1 join model_list as t2 on t1.id = t2.modelid join countries as t3 on t1.country = t3.continent where t3.countryname = ""USA""","SELECT car_makers.FullName FROM car_makers JOIN model_list JOIN countries WHERE countries.CountryName = ""value"""
"select count (  * )  from model_list as t1 join car_makers as t2 where t1.maker  =  t2.id and t2.maker  =  ""ford""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'ford';,SELECT COUNT(DISTINCT model_list.Model) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'ford',"select count ( * ) from model_list where maker = ""ford""","SELECT COUNT(*) FROM model_list JOIN car_makers WHERE car_makers.FullName = ""value"""
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    2,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Likes   GROUP BY student_id   HAVING COUNT(*) >= 2 );,SELECT names FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(liked_id) >= 2),select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.id having count(*) >= 2,"SELECT Highschooler.name FROM Highschooler JOIN Likes GROUP BY Likes.student_id HAVING COUNT(*) >= ""value"""
SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Likes   GROUP BY student_id   HAVING COUNT(*) >= 1 );,SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(liked_id) >= 1),select t1.name from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.id having count ( * ) = 1,"SELECT Highschooler.name FROM Highschooler JOIN Likes GROUP BY Likes.student_id HAVING COUNT(*) = ""value"""
SELECT T2.id FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id GROUP BY T1.student_id HAVING count ( * )    > =    1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT ID, name FROM Highschooler WHERE ID IN (   SELECT student_id   FROM Likes   GROUP BY student_id   HAVING COUNT(*) >= 1 );",SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(liked_id) >= 1,select t1.id from highschooler as t1 join likes as t2 on t1.id = t2.student_id group by t1.id having count ( * ) = 1,"SELECT Highschooler.ID FROM Highschooler JOIN Likes GROUP BY Likes.student_id HAVING COUNT(*) = ""value"""
"SELECT DestAirport FROM flights WHERE airline   =   ""1""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT DestAirport FROM flights WHERE Airline = 1;,SELECT DestAirport FROM flights WHERE Airline = 1,select destairport from flights where airline = 1,"SELECT flights.DestAirport FROM flights WHERE flights.Airline = ""value"""
"SELECT COUNTRY FROM AIRLINES WHERE AIRLINE   =   ""United Airlines""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT Country FROM airlines WHERE Airline = 'United Airlines';,SELECT Country FROM airlines WHERE Airline = 'United Airlines',select country from airlines where airline = 'United Airlines',"SELECT airlines.Country FROM airlines WHERE airlines.Airline = ""value"""
"SELECT SourceAirport FROM flights WHERE DestAirport   =   ""ASY""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT SourceAirport FROM flights WHERE DestAirport = 'ASY';,SELECT SourceAirport FROM flights WHERE DestAirport = 'ASY',"select * from airports as t1 join flights as t2 on t1.airportcode = t2.sourceairport where t1.airportcode = ""ASY""","SELECT airports.AirportName FROM airports JOIN flights WHERE airports.AirportCode = ""value"""
"SELECT country FROM Airlines WHERE Airline   =   ""US Airways""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT Country FROM airlines WHERE Airline = 'US Airways';,SELECT Country FROM airlines WHERE Airline = 'US Airways',select country from airlines where airline = 'US Airways',"SELECT airlines.Country FROM airlines WHERE airlines.Airline = ""value"""
"SELECT Airline FROM Airlines WHERE country   =   ""USA""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT Airline FROM airlines WHERE Country = 'USA';,SELECT Airline FROM airlines WHERE Country = 'USA',select airline from airlines where country = 'USA',"SELECT airlines.Airline FROM airlines WHERE airlines.Country = ""value"""
SELECT AVG ( grade )  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT AVG(grade) FROM Highschooler;,SELECT AVG(grade) FROM Highschooler;,select avg ( grade ) from highschooler,SELECT AVG(Highschooler.grade) FROM Highschooler
SELECT AVG ( grade )  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler WHERE name LIKE 'A%';,SELECT name FROM Highschooler WHERE name LIKE 'A%';,"select name from highschooler where grade like ""A%""","SELECT Highschooler.name FROM Highschooler WHERE Highschooler.name LIKE ""value"""
SELECT MAX ( grade )  FROM Highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT MAX(grade) FROM Highschooler;,SELECT MAX(grade) FROM Highschooler;,select max ( grade ) from highschooler,SELECT MAX(Highschooler.grade) FROM Highschooler
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Final_Table_Made,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;,SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.final_table_made asc,SELECT people.Name FROM poker_player JOIN people ORDER BY poker_player.Final_Table_Made ASC
SELECT T1.Nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Final_Table_Made,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Nationality FROM poker_player pp  JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;,SELECT people.Nationality FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Final_Table_Made ASC,select t2.nationality from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.final_table_made asc,SELECT people.Nationality FROM people JOIN poker_player ORDER BY poker_player.Final_Table_Made ASC
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings desc limit 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC LIMIT 1;,SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings DESC LIMIT 1,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings desc limit 1,SELECT people.Name FROM poker_player JOIN people ORDER BY poker_player.Earnings DESC LIMIT 1
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings limit 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;,SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1,select t2.name from poker_player as t1 join people as t2 on t1.people_id = t2.people_id order by t1.earnings limit 1,SELECT people.Name FROM poker_player JOIN people ORDER BY poker_player.Earnings ASC LIMIT 1
SELECT T2.Best_Finish FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T2.Earnings  limit 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT pp.Best_Finish FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings ASC LIMIT 1;,SELECT poker_player.Best_Finish FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1,select best_finish from poker_player order by earnings limit 1,SELECT poker_player.Best_Finish FROM poker_player JOIN people ORDER BY poker_player.Earnings ASC LIMIT 1
select transcript_date from Transcripts,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT transcript_date FROM Transcripts;,SELECT transcript_date FROM Transcripts;,select transcript_date from transcripts,SELECT Transcripts.transcript_date FROM Transcripts
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT MAX(transcript_date) FROM Transcripts;,SELECT MAX(transcript_date) FROM Transcripts;,select transcript_date from transcripts order by transcript_date desc limit 1,SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts;,SELECT MAX(transcript_date) FROM Transcripts;,select transcript_date from transcripts order by transcript_date desc limit 1,SELECT Transcripts.transcript_date FROM Transcripts ORDER BY Transcripts.transcript_date DESC LIMIT 1
SELECT Title FROM cartoon ORDER BY original_air_date LIMIT 1,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT Title, Original_air_date FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;",SELECT MAX(Original_air_date) AS Most_Recent_Air_Date FROM Cartoon;,select title from cartoon order by original_air_date desc limit 1,SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1
SELECT Channel FROM cartoon ORDER BY original_air_date LIMIT 1,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT c.series_name, c.id FROM Cartoon AS ct JOIN TV_Channel AS c ON ct.Channel = c.id ORDER BY ct.Original_air_date DESC LIMIT 1;",SELECT Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);,select channel from cartoon order by original_air_date desc limit 1,SELECT Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1
"SELECT production_code ,  channel, original_air_date FROM cartoon ORDER BY original_air_date desc LIMIT 1",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT ct.Production_code, c.series_name  FROM Cartoon AS ct JOIN TV_Channel AS c ON ct.Channel = c.id ORDER BY ct.Original_air_date DESC LIMIT 1;","SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon);","select production_code, channel from cartoon order by original_air_date desc limit 1","SELECT Cartoon.Production_code , Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1"
SELECT Version_Number from Templates where Template_ID  =  3,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Version_Number FROM Templates WHERE Template_ID = 3;,SELECT Version_Number FROM Templates WHERE Template_ID = 3,select version_number from templates where template_id = 3,"SELECT Templates.Version_Number FROM Templates WHERE Templates.Template_ID = ""value"""
SELECT t2.Document_Name from Templates as t1 join Documents as t2 on t1.Template_ID  =  t2.Template_ID where t1.Template_ID  =  25,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Document_Name FROM Documents WHERE Template_ID = 25;,SELECT Document_Name FROM Documents WHERE Template_ID = 25,select document_name from documents where template_id = 25,"SELECT Documents.Document_Name FROM Documents WHERE Documents.Template_ID = ""value"""
SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT DISTINCT Template_Type_Code    FROM Templates   WHERE Template_ID IN (     SELECT Template_ID FROM Documents   ) );,SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents)),select template_type_code from templates except select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id = t2.template_id,SELECT Templates.Template_Type_Code FROM Templates EXCEPT SELECT Templates.Template_Type_Code FROM Templates JOIN Documents
SELECT Version_Number from Templates where Template_ID  =  4,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Version_Number FROM Templates WHERE Template_ID = 4;,SELECT Version_Number FROM Templates WHERE Template_ID = 4,select version_number from templates where template_id = 4,"SELECT Templates.Version_Number FROM Templates WHERE Templates.Template_ID = ""value"""
"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport   =  ""AHD""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT FlightNo FROM flights WHERE SourceAirport = 'AHD';,SELECT FlightNo FROM flights WHERE SourceAirport = 'AHD',select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport = t2.airportcode where t2.airportcode = 'AHD',"SELECT flights.FlightNo FROM flights WHERE flights.SourceAirport = ""value"""
"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid   =   T2.Airline WHERE T2.SourceAirport   =   "" AHD""",flight_2,"CREATE TABLE 'airlines' (
	uid INTEGER PRIMARY KEY, 
	Airline TEXT, 
	Abbreviation TEXT, 
	Country TEXT
);
CREATE TABLE 'airports' (
	City TEXT, 
	AirportCode TEXT PRIMARY KEY, 
	AirportName TEXT, 
	Country TEXT, 
	CountryAbbrev TEXT
);
CREATE TABLE 'flights' (
	Airline INTEGER, 
	FlightNo INTEGER, 
	SourceAirport TEXT, 
	DestAirport TEXT, 
	PRIMARY KEY(Airline, FlightNo),
	FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode),
	FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode)
);
",SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';,SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD',"select distinct t1.airline from airlines as t1 join flights as t2 on t1.uid = t2.flightno where t2.sourceairport = ""AHD""","SELECT airlines.Airline FROM flights JOIN airlines WHERE flights.SourceAirport = ""value"""
SELECT count ( * )  FROM stadium WHERE average > 1000,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT COUNT(*)  FROM stadium WHERE Average > 1000;,SELECT COUNT(*) FROM stadium WHERE Average > 1000;,select count(*) from stadium where capacity > 1000 and avg(capacity) > 1000,SELECT COUNT(*) FROM stadium WHERE stadium.Average > ( SELECT AVG(stadium.Average) FROM stadium )
SELECT name FROM stadium ORDER BY average LIMIT 1,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Name FROM stadium WHERE Average = (SELECT MIN(Average) FROM stadium);,SELECT Name FROM stadium ORDER BY Average ASC LIMIT 1;,select name from stadium order by average limit 1,SELECT stadium.Name FROM stadium ORDER BY stadium.Average ASC LIMIT 1
SELECT name FROM stadium ORDER BY average DESC LIMIT 1,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Name FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);,SELECT Name FROM stadium ORDER BY Average DESC LIMIT 1;,select name from stadium order by average desc limit 1,SELECT stadium.Name FROM stadium ORDER BY stadium.Average DESC LIMIT 1
"SELECT Name FROM country WHERE Continent   =   ""Africa""  AND population  <   ( SELECT min ( population )  FROM country WHERE Continent   =   ""Asia"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Name FROM country c WHERE c.Continent = 'Africa'   AND c.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia');,SELECT Population FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia'),select distinct name from country where continent = 'Africa' and population < (select max(population) from country where continent = 'Asia'),"SELECT country.Name FROM country WHERE country.Population < ( SELECT MIN(country.Population) FROM country WHERE country.Continent = ""value"" )"
"SELECT Name FROM country WHERE Continent   =   ""Asia""  AND population  <   ( SELECT min ( population )  FROM country WHERE Continent   =   ""Africa"" ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT c.Name FROM country c WHERE c.Continent = 'Asia'   AND c.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Africa');,SELECT Name FROM country WHERE Continent = 'Asia' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Africa'),select distinct t1.name from country as t1 join city as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' and t1.population < ( select min ( population ) from country where continent = 'Africa' ),"SELECT country.Name FROM country WHERE country.Population < ( SELECT MIN(country.Population) FROM country WHERE country.Continent = ""value"" )"
"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy DESC LIMIT 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Name, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy DESC LIMIT 1;",SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy DESC LIMIT 1,select name from country where continent = 'Asia' order by lifeexpectancy desc limit 1,"SELECT country.Name FROM country WHERE country.Continent = ""value"" ORDER BY country.LifeExpectancy DESC LIMIT 1"
SELECT count ( * )  FROM Dogs WHERE dog_id NOT IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*)  FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL;,SELECT COUNT(dog_id) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);,select count ( * ) from dogs where dog_id not in ( select dog_id from treatments ),SELECT COUNT(*) FROM Dogs WHERE Dogs.dog_id NOT IN ( SELECT Treatments.dog_id FROM Treatments )
SELECT count ( * )  FROM Dogs WHERE abandoned_yn  =  1 AND dog_id NOT IN  (  SELECT dog_id FROM Treatments  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*)  FROM Dogs d WHERE NOT EXISTS (   SELECT 1   FROM Treatments t   WHERE t.dog_id = d.dog_id ) AND d.abandoned_yn = 1;,SELECT COUNT(dog_id) FROM Dogs WHERE abandoned_yn = 1 AND dog_id NOT IN (SELECT dog_id FROM Treatments);,"select count ( * ) from dogs where dog_id not in ( select dog_id from treatments ) and date_adopted > ""2018-03-19 00:00:00""","SELECT COUNT(*) FROM Dogs WHERE Dogs.dog_id NOT IN ( SELECT Treatments.dog_id FROM Treatments ) AND Dogs.abandoned_yn = ""value"""
"SELECT T1.dog_id, T2.treatment_type_code FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE abandoned_yn  =  1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT d.dog_id, t.treatment_type_code FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.abandoned_yn = 1;","SELECT Dogs.dog_id, Treatments.treatment_type_code FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.abandoned_yn = 1;","select t1.dog_id, t2.treatment_type_code from dogs as t1 join treatments as t2 on t1.dog_id = t2.dog_id where t1.abandoned_yn = 1","SELECT Dogs.dog_id , Treatments.treatment_type_code FROM Dogs JOIN Treatments WHERE Dogs.abandoned_yn = ""value"""
"select age from employee where name  =  ""George Chuter""",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT Age FROM employee WHERE Name = 'George Chuter';,SELECT Age FROM employee WHERE Name = 'George Chuter',"select age from employee where name = ""George Chuter""","SELECT employee.Age FROM employee WHERE employee.Name = ""value"""
"select city from employee where name  =  ""Lee Mears""",employee_hire_evaluation,"CREATE TABLE ""employee"" (
""Employee_ID"" int,
""Name"" text,
""Age"" int,
""City"" text,
PRIMARY KEY (""Employee_ID"")
);
CREATE TABLE ""shop"" (
""Shop_ID"" int,
""Name"" text,
""Location"" text,
""District"" text,
""Number_products"" int,
""Manager_name"" text,
PRIMARY KEY (""Shop_ID"")
);
CREATE TABLE ""hiring"" (
""Shop_ID"" int,
""Employee_ID"" int,
""Start_from"" text,
""Is_full_time"" bool,
PRIMARY KEY (""Employee_ID""),
FOREIGN KEY (`Shop_ID`) REFERENCES `shop`(`Shop_ID`),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
CREATE TABLE ""evaluation"" (
""Employee_ID"" text,
""Year_awarded"" text,
""Bonus"" real,
PRIMARY KEY (""Employee_ID"",""Year_awarded""),
FOREIGN KEY (`Employee_ID`) REFERENCES `employee`(`Employee_ID`)
);
",SELECT SUM(Bonus) AS total_bonus FROM evaluation WHERE Employee_ID = 1;  SELECT City FROM employee WHERE Name = 'Lee Mears';,SELECT City FROM employee WHERE Name = 'Lee Mears',"select city from employee where name = ""Lee Mears""","SELECT employee.City FROM employee WHERE employee.Name = ""value"""
"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  DESC LIMIT 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;","SELECT degree_program_id, degree_summary_name FROM Degree_Programs JOIN Student_Enrolment ON Degree_Programs.degree_program_id = Student_Enrolment.degree_program_id GROUP BY degree_program_id ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1","select t1.degree_program_id, t1.degree_summary_description from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1","SELECT Student_Enrolment.degree_program_id , Degree_Programs.degree_summary_name FROM Student_Enrolment JOIN Degree_Programs GROUP BY Student_Enrolment.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1"
SELECT T1.degree_program_id  FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;",SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) DESC LIMIT 1,select t1.degree_program_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count ( * ) desc limit 1,SELECT Degree_Programs.degree_summary_name FROM Degree_Programs JOIN Student_Enrolment GROUP BY Student_Enrolment.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1
"SELECT COUNT ( * )  FROM Student_Enrolment WHERE degree_program_id  =  ""9""",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) AS student_count FROM Student_Enrolment WHERE degree_program_id = 9;,SELECT COUNT(student_id) FROM Student_Enrolment WHERE degree_program_id = 9,select count ( * ) from student_enrolment where degree_program_id = 9,"SELECT COUNT(*) FROM Student_Enrolment WHERE Student_Enrolment.degree_program_id = ""value"""
"SELECT COUNT ( * )  FROM Degree_Programs WHERE degree_summary_name  =  ""Master"" AND degree_program_id  =  ""9""",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) AS master_student_count  FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_program_id = 9 AND dp.degree_summary_name = 'Master';,SELECT COUNT(student_id) FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_program_id = 9 AND Degree_Programs.degree_summary_name = 'Master',select count ( * ) from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id = t2.degree_program_id where t2.degree_program_id = 9 and t2.degree_summary_name = 'Master',"SELECT COUNT(*) FROM Student_Enrolment WHERE Student_Enrolment.degree_program_id = ""value"""
"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count ( * )  limit 1",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(*) ASC LIMIT 1;",SELECT degree_program_id FROM Student_Enrolment GROUP BY degree_program_id ORDER BY COUNT(student_id) ASC LIMIT 1,select t1.degree_program_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id = t2.degree_program_id group by t1.degree_program_id order by count ( * ) asc limit 1,SELECT Student_Enrolment.degree_program_id FROM Student_Enrolment GROUP BY Student_Enrolment.degree_program_id ORDER BY COUNT(*) ASC LIMIT 1
"SELECT COUNT ( * )  FROM Student_Enrolment where degree_program_id  =  ""3""",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) AS student_count FROM Student_Enrolment WHERE degree_program_id = 3;,SELECT COUNT(student_id) FROM Student_Enrolment WHERE degree_program_id = 3,select count ( * ) from student_enrolment where degree_program_id = 3,"SELECT COUNT(*) FROM Student_Enrolment WHERE Student_Enrolment.student_enrolment_id = ""value"""
SELECT sum ( cost_of_treatment )  from treatments,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT SUM(cost_of_treatment) AS total_cost_of_treatment FROM Treatments;,SELECT SUM(cost_of_treatment) FROM Treatments,select sum ( cost_of_treatment ) from treatments,SELECT SUM(Treatments.cost_of_treatment) FROM Treatments
"select T1.first_name, T1.last_name from Professionals as T1 join Treatments as T2 on T1.professional_id  =  T2.professional_id order by T2.cost_of_treatment asc limit 1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT p.first_name, p.last_name, MIN(t.cost_of_treatment) AS lowest_cost_of_treatment  FROM Treatments t JOIN Professionals p ON t.professional_id = p.professional_id GROUP BY p.first_name, p.last_name ORDER BY lowest_cost_of_treatment LIMIT 1;","SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id ORDER BY Treatments.cost_of_treatment ASC LIMIT 1","select t2.first_name, t2.last_name from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id group by t1.professional_id order by sum ( t1.cost_of_treatment ) asc limit 1","SELECT Professionals.first_name , Professionals.last_name FROM Professionals JOIN Treatments ORDER BY Treatments.cost_of_treatment ASC LIMIT 1"
select dog_id from treatments order by cost_of_treatment asc limit 1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT t.dog_id, MIN(t.cost_of_treatment) AS lowest_cost_of_treatment FROM Treatments t GROUP BY t.dog_id ORDER BY lowest_cost_of_treatment LIMIT 1;",SELECT dog_id FROM Treatments ORDER BY cost_of_treatment ASC LIMIT 1,select dog_id from treatments order by cost_of_treatment limit 1,SELECT Treatments.dog_id FROM Treatments ORDER BY Treatments.cost_of_treatment ASC LIMIT 1
"SELECT ContId ,  Continent  FROM CONTINENTS",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT ContId, Continent FROM continents;","SELECT Continent, ContId FROM continents",select continent from continents group by continent,SELECT continents.ContId FROM continents
"SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT c.Continent, COUNT(co.CountryId) AS num_countries FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent GROUP BY c.Continent;","SELECT continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent","select t1.continent, count ( * ) from continents as t1 join countries as t2 on t1.continent = t2.continent group by t1.continent","SELECT continents.Continent , COUNT(*) FROM countries JOIN continents GROUP BY continents.ContId"
"SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.Continent GROUP BY T1.ContId ORDER BY count ( * )  DESC LIMIT 1",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT c.Continent FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.Continent ORDER BY COUNT(co.CountryId) DESC LIMIT 1;,"SELECT continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.Continent ORDER BY NumberOfCountries DESC LIMIT 1",select continent from countries group by continent order by count ( * ) desc limit 1,"SELECT continents.Continent , continents.ContId FROM countries JOIN continents GROUP BY continents.ContId ORDER BY COUNT(*) DESC LIMIT 1"
"SELECT T1.document_id ,  T2.document_name ,  count ( * )  FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id GROUP BY T1.document_id",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT      d.Document_ID,     d.Document_Name,     COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM      Documents d LEFT JOIN      Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY     d.Document_ID, d.Document_Name;","SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS NumberOfParagraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name","select t1.document_id, t1.document_name, count ( * ) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id group by t1.document_id","SELECT Documents.Document_ID , Documents.Document_Name , COUNT(*) FROM Documents JOIN Paragraphs GROUP BY Documents.Document_ID"
SELECT Paragraph_Text FROM Paragraphs,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT     Paragraph_Text FROM     Paragraphs;,SELECT Paragraph_Text FROM Paragraphs,select paragraph_text from paragraphs,SELECT Paragraphs.Paragraph_Text FROM Paragraphs
"SELECT Paragraph_Text FROM Paragraphs WHERE Other_Details ! =  ""NULL""",cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT     Paragraph_Text FROM     Paragraphs WHERE     Other_Details IS NOT NULL;,SELECT Paragraph_Text FROM Paragraphs WHERE Other_Details IS NOT NULL AND Other_Details <> 'None',select paragraph_text from paragraphs where paragraph_text in ( select paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.other_details,"SELECT Paragraphs.Paragraph_Text FROM Paragraphs WHERE Paragraphs.Other_Details != ""value"""
select * from Cartoon where Written_by  =  'Todd Casey',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Title  FROM Cartoon WHERE Written_by = 'Todd Casey';,SELECT Title FROM Cartoon WHERE Written_by = 'Todd Casey';,"select * from cartoon where written_by = ""Todd Casey""","SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = ""value"""
select Title from Cartoon where Written_by  =  'Todd Casey',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Title FROM Cartoon WHERE Written_by = 'Todd Casey';  The query already filters for only cartoon titles since it is selecting from the Cartoon table.,SELECT Title FROM Cartoon WHERE Written_by = 'Todd Casey';,"select title from cartoon where written_by = ""Todd Casey""","SELECT Cartoon.Title FROM Cartoon WHERE Cartoon.Written_by = ""value"""
SELECT T1.id FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by  =  'Todd Casey',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT c.Title, tc.series_name AS Channel FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE c.Written_by = 'Todd Casey';","SELECT Title, Channel FROM Cartoon WHERE Written_by = 'Todd Casey';","select title,channel from cartoon where written_by = ""Todd Casey""","SELECT Cartoon.Title , Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = ""value"""
SELECT sum ( t2.Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id WHERE t1.Level_of_membership   =   1,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT SUM(v.Total_spent) AS total_spent FROM visit v JOIN visitor vi ON v.visitor_ID = vi.ID WHERE vi.Level_of_membership = 1;,SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1;,select sum ( total_spent ) from visit as t1 join visitor as t2 on t1.visitor_id = t2.id where t2.level_of_membership = 1,"SELECT SUM(visit.Total_spent) FROM visit JOIN visitor WHERE visitor.Level_of_membership = ""value"""
SELECT COUNT ( id )  FROM visitor WHERE Level_of_membership  =  1,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(*) AS num_level_1_visitors FROM visitor WHERE Level_of_membership = 1;,SELECT COUNT(*) FROM visitor WHERE Level_of_membership = 1;,select count ( * ) from visitor where level_of_membership = 1,"SELECT COUNT(*) FROM visitor WHERE visitor.Level_of_membership = ""value"""
SELECT COUNT ( DISTINCT level_of_membership )  FROM visitor,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT MAX(Level_of_membership) AS num_membership_levels FROM visitor;,SELECT COUNT(DISTINCT Level_of_membership) FROM visitor;,select count ( distinct level_of_membership ) from visitor,SELECT COUNT(visitor.Level_of_membership) FROM visitor
SELECT name FROM visitor WHERE Level_of_membership  =  1,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Name FROM visitor WHERE Level_of_membership = 1;,SELECT Name FROM visitor WHERE Level_of_membership = 1;,select name from visitor where level_of_membership = 1,"SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership = ""value"""
"SELECT  t1.level_of_membership, sum ( Total_spent )  FROM visitor AS t1 JOIN visit AS t2 ON t1.id   =   t2.visitor_id group by Level_of_membership",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT vi.Level_of_membership, SUM(v.Total_spent) AS total_spent FROM visit v JOIN visitor vi ON v.visitor_ID = vi.ID GROUP BY vi.Level_of_membership;","SELECT Level_of_membership, SUM(Total_spent) FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY Level_of_membership;","select sum ( total_spent ), level_of_membership from visitor as t1 join visit as t2 on t1.id = t2.visitor_id group by level_of_membership","SELECT visitor.Level_of_membership , SUM(visit.Total_spent) FROM visit JOIN visitor GROUP BY visitor.Level_of_membership"
SELECT first_name FROM players WHERE player_id  =  200001,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT first_name FROM players WHERE player_id = 200001;,SELECT first_name FROM players WHERE player_id = 200001;,select first_name from players where player_id = 200001,"SELECT players.first_name FROM players WHERE players.player_id = ""value"""
SELECT birth_date FROM players WHERE player_id  =  200001,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT birth_date FROM players WHERE player_id = 200001;,SELECT birth_date FROM players WHERE first_name = 'Martina' AND player_id = 200001;,"select birth_date from players where first_name = ""Martina"" and player_id = 200001","SELECT players.birth_date FROM players WHERE players.first_name = ""value"""
SELECT country_code FROM players WHERE player_id  =  200003,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT country_code FROM players WHERE player_id = 200003;,SELECT country_code FROM players WHERE player_id = 200003;,select country_code from players where player_id = 200003,"SELECT players.country_code FROM players WHERE players.player_id = ""value"""
SELECT last_name FROM players WHERE player_id  =  200003,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT last_name FROM players WHERE player_id = 200003;,SELECT last_name FROM players WHERE first_name = 'Justine' AND player_id = 200003;,"select last_name from players where player_id = 200003 and first_name = ""Justine""","SELECT players.last_name FROM players WHERE players.player_id = ""value"""
SELECT count ( * )  FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) AS paragraph_count FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';,SELECT COUNT(Paragraph_ID) FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Document_Name = 'Welcome to NY';,select count ( t2.paragraph_id ) from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.document_name = 'Welcome to NY',"SELECT COUNT(Paragraphs.Paragraph_ID) FROM Documents JOIN Paragraphs WHERE Documents.Document_Name = ""value"""
SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT p.Paragraph_Text FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';,SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Document_Name = 'Welcome to NY';,select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id = t2.document_id where t2.document_name = 'Welcome to NY',"SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents WHERE Documents.Document_Name = ""value"""
SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id   =   T2.document_id WHERE T2.Document_Name   =   'Welcome to NY',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT p.Paragraph_ID FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Welcome to NY';,SELECT Paragraph_ID FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Document_Name = 'Welcome to NY';,select t2.paragraph_id from documents as t1 join paragraphs as t2 on t1.document_id = t2.document_id where t1.document_name = 'Welcome to NY',"SELECT Paragraphs.Paragraph_ID FROM Paragraphs JOIN Documents WHERE Documents.Document_Name = ""value"""
"SELECT sum ( ranking_points )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.first_name",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;","SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name","select sum ( ranking_points ), first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.player_id","SELECT sum ( ranking_points )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.first_name"
SELECT distinct T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT p.first_name FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking = 1 LIMIT 1;,SELECT p.first_name FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking = 1,select t1.first_name from players as t1 join rankings as t2 on t1.player_id = t2.player_id order by t2.ranking_points desc limit 1,SELECT distinct T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id WHERE T2.ranking  =  1
"SELECT Name FROM country WHERE Continent  =  ""Africa"" order by population desc limit 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Name, Population  FROM country WHERE Continent = 'Africa' ORDER BY Population DESC LIMIT 1;",SELECT MAX(Population) FROM country WHERE Continent = 'Africa';,select name from country where continent = 'Africa' order by population desc limit 1,"SELECT country.Name FROM country WHERE country.Continent = ""value"" ORDER BY country.Population DESC LIMIT 1"
select population from country where Name  =  'Nigeria',world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Population FROM country WHERE Name = 'Nigeria';,SELECT Population FROM country WHERE Name = 'Nigeria';,"select population from city where countrycode = ""Nigeria""","SELECT country.Population FROM country WHERE country.Name = ""value"""
"SELECT Name FROM country WHERE Continent   =   ""Asia""  order by population desc limit 1",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Name, Population FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 1;",SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY Population DESC LIMIT 1;,select * from country where continent = 'Asia' order by population desc limit 1,"SELECT country.Name FROM country WHERE country.Continent = ""value"" ORDER BY country.Population DESC LIMIT 1"
SELECT population from country where name  =  'China',world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Population FROM country WHERE Name = 'China';,SELECT Population FROM country WHERE Name = 'China';,"select population from country where name = ""China""","SELECT country.Population FROM country WHERE country.Name = ""value"""
"SELECT count ( Name )  FROM country WHERE Continent   =   ""Asia""  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM country WHERE Continent = 'Asia' AND Population > (SELECT Population FROM country WHERE Name = 'Nigeria');,SELECT COUNT(*) FROM country WHERE Continent = 'Asia' AND Population > (SELECT Population FROM country WHERE Name = 'Nigeria');,"select count ( * ) from country where population > ( select min ( population ) from country where name = ""Nigeria"" )","SELECT COUNT(*) FROM country WHERE country.Continent = ""value"" AND country.Population > ""value"""
"SELECT Name FROM country WHERE Continent   =   ""Asia""  AND population >  ( SELECT population FROM country WHERE name  =  'Nigeria' ) ",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Name, Population FROM country  WHERE Continent = 'Asia'    AND Population > (SELECT Population FROM country WHERE Name = 'Nigeria') ORDER BY Population DESC;",SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT Population FROM country WHERE Name = 'Nigeria');,select count ( * ) from country where population > ( select max ( population ) from country where continent = 'Asia' ),"SELECT country.Name FROM country WHERE country.Population > ( SELECT MAX(country.Population) FROM country WHERE country.Continent = ""value"" )"
"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T1.Continent   =   ""Asia""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia';,SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' GROUP BY city.Name;,select distinct t1.name from city as t1 join country as t2 on t1.countrycode = t2.code where t2.continent = 'Asia',"SELECT city.Name FROM city JOIN country WHERE country.Continent = ""value"""
SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T3.Population >200000,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT DISTINCT city.Name  FROM city  JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND city.Population > 200000;,SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Asia' AND city.Population > 200000 GROUP BY city.Name;,select distinct t2.name from country as t1 join city as t2 on t1.code = t2.countrycode where t1.continent = 'Asia' and t2.population > 200000,"SELECT city.Name FROM city JOIN country WHERE city.Population > ""value"" AND country.Continent = ""value"""
"SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T1.Name  =  ""China""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT AVG(city.Population) AS avg_population FROM city  JOIN country ON city.CountryCode = country.Code WHERE country.Name = 'China';,SELECT AVG(city.Population) FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Name = 'China';,"select avg ( population ) from city where countrycode = ""China""","SELECT AVG(city.Population) FROM city JOIN country WHERE country.Name = ""value"""
"SELECT avg ( T3.Population )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode JOIN city AS T3 ON T1.Code   =   T3.CountryCode WHERE T2.Language  =  ""Dutch""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT AVG(city.Population) AS avg_population FROM city  JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch';,SELECT AVG(city.Population) FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Dutch';,"select avg ( population ) from city where countrycode in ( select countrycode from countrylanguage where language = ""Dutch"" )","SELECT AVG(city.Population) FROM city JOIN country JOIN countrylanguage WHERE countrylanguage.Language = ""value"""
SELECT count ( * )  from visitor,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(*) FROM visitor;,SELECT COUNT(DISTINCT visitor_ID) FROM visit,select count ( * ) from visit,SELECT COUNT(*) FROM visitor
SELECT count ( * )  FROM visitor WHERE Level_of_membership  >  4,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(*) FROM visitor WHERE Level_of_membership > 4;,SELECT COUNT(*) FROM visitor WHERE Level_of_membership > 4,select count ( * ) from visitor where level_of_membership > 4,"SELECT COUNT(*) FROM visitor WHERE visitor.Level_of_membership > ""value"""
SELECT name FROM visitor WHERE Level_of_membership  >  4,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT Name FROM visitor WHERE Level_of_membership > 4;,SELECT Name FROM visitor WHERE Level_of_membership > 4,select name from visitor where level_of_membership > 4,"SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > ""value"""
SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;",SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC,select name from visitor where level_of_membership > 4 order by level_of_membership desc,"SELECT visitor.Name FROM visitor WHERE visitor.Level_of_membership > ""value"" ORDER BY visitor.Name ASC"
"SELECT avg ( ranking )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT p.first_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;","SELECT AVG(rankings.ranking) AS average_ranking, players.first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name","select t1.first_name, avg ( t2.ranking_points ) from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.first_name","SELECT avg ( ranking )  ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id	wta_1"
"SELECT avg ( ranking )  ,  T1.first_name, t1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT p.first_name, p.last_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name, p.last_name;","SELECT AVG(rankings.ranking) AS average_ranking, players.first_name, players.last_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.first_name, players.last_name","select t1.first_name, t1.last_name, avg ( t2.ranking_points ) from players as t1 join rankings as t2 on t1.player_id = t2.player_id group by t1.player_id","SELECT avg ( ranking )  ,  T1.first_name, t1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id GROUP BY T1.player_id	wta_1"
"SELECT  T1.first_name, t1.last_name FROM players AS T1 where t1.hand  =  ""L""",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT first_name, last_name FROM players WHERE hand = 'L';",SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'L',"select first_name, last_name from players where hand = ""L""","SELECT  T1.first_name, t1.last_name FROM players AS T1 where t1.hand  =  ""L""	wta_1"
"SELECT T1.last_name FROM players AS T1 where t1.hand  =  ""L""",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT last_name FROM players WHERE hand = 'L';,SELECT last_name FROM players WHERE hand = 'L',"select last_name from players where hand = ""L""","SELECT T1.last_name FROM players AS T1 where t1.hand  =  ""L""	wta_1"
"SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  ""L"" GROUP BY T1.first_name",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT p.last_name, AVG(r.ranking) AS avg_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE p.hand = 'L' GROUP BY p.last_name;","SELECT players.last_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id WHERE players.hand = 'L' GROUP BY players.last_name","select t1.first_name, t1.last_name, avg ( t2.ranking_points ) from players as t1 join rankings as t2 on t1.player_id = t2.player_id where t1.hand = ""L""","SELECT avg ( ranking )  ,  T1.last_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id   =   T2.player_id where T1.hand  =  ""L"" GROUP BY T1.first_name	wta_1"
SELECT avg ( grade )  FROM Highschooler WHERE id IN  ( SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id   =   T2.id ) ,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (   SELECT DISTINCT student_id   FROM Friend );,SELECT AVG(h.grade) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id OR h.ID = f.friend_id GROUP BY h.ID,select avg ( t2.grade ) from friend as t1 join highschooler as t2 on t1.student_id = t2.id,SELECT AVG(Highschooler.grade) FROM Highschooler JOIN Friend GROUP BY Friend.student_id
SELECT * FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
","SELECT ID, name, grade FROM Highschooler WHERE ID NOT IN (   SELECT DISTINCT student_id   FROM Friend );","SELECT h.ID, h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT student_id FROM Friend) AND h.ID NOT IN (SELECT friend_id FROM Friend)",select * from highschooler where id not in ( select student_id from friend ),SELECT * FROM Highschooler WHERE Highschooler.ID NOT IN ( SELECT Friend.student_id FROM Friend )
SELECT grade FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM Highschooler WHERE ID NOT IN (   SELECT DISTINCT student_id   FROM Friend );,SELECT h.grade FROM Highschooler h WHERE h.ID NOT IN (SELECT student_id FROM Friend) AND h.ID NOT IN (SELECT friend_id FROM Friend),select grade from highschooler where id not in ( select student_id from friend ),SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.ID NOT IN ( SELECT Friend.student_id FROM Friend )
SELECT name FROM Highschooler WHERE id not IN  ( SELECT student_id FROM Friend ) ,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler WHERE ID NOT IN (   SELECT DISTINCT student_id   FROM Friend );,SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT student_id FROM Friend) AND h.ID NOT IN (SELECT friend_id FROM Friend),select name from highschooler where id not in ( select student_id from friend ),SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID NOT IN ( SELECT Friend.student_id FROM Friend )
SELECT name FROM Highschooler WHERE id IN  ( SELECT student_id FROM Friend ) ,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler  WHERE ID IN (   SELECT DISTINCT student_id   FROM Friend );,SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id OR h.ID = f.friend_id,select name from highschooler where id in ( select student_id from friend ),SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID IN ( SELECT Friend.student_id FROM Friend )
select count ( * )  from highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM Highschooler;,SELECT COUNT(*) FROM Highschooler;,select count ( * ) from highschooler,SELECT COUNT(*) FROM Highschooler
SELECT count ( * )  FROM highschooler WHERE grade   =   9,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM Highschooler WHERE grade = 9;,SELECT COUNT(*) FROM Highschooler WHERE grade = 9;,select count ( * ) from highschooler where grade = 9,"SELECT COUNT(*) FROM Highschooler WHERE Highschooler.grade = ""value"""
"SELECT grade from highschooler where name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM Highschooler WHERE name = 'Jordan';,SELECT grade FROM Highschooler WHERE name = 'Jordan';,select grade from highschooler where grade = 9,"SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.grade = ""value"""
SELECT name FROM stadium WHERE stadium_id NOT IN  ( SELECT stadium_id FROM concert ) ,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Name FROM stadium,SELECT Name FROM stadium,select name from stadium where stadium_id not in ( select stadium_id from concert ),SELECT stadium.Name FROM stadium WHERE stadium.Stadium_ID NOT IN ( SELECT stadium.Name FROM stadium )
SELECT name FROM stadium ORDER BY Highest DESC LIMIT 1,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Name FROM stadium WHERE Highest = (SELECT MAX(Highest) FROM stadium),SELECT Name FROM stadium WHERE Highest = (SELECT MAX(Highest) FROM stadium),select name from stadium order by highest desc limit 1,SELECT stadium.Name FROM stadium JOIN concert GROUP BY stadium.Stadium_ID ORDER BY stadium.Highest DESC LIMIT 1
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * )  DESC LIMIT 1,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship ORDER BY NumberOfSingers DESC LIMIT 1",select citizenship from singer group by citizenship order by count ( * ) desc limit 1,SELECT singer.Citizenship FROM singer GROUP BY singer.Citizenship ORDER BY COUNT(*) DESC LIMIT 1
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT ( * )  ASC LIMIT 1,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) ASC LIMIT 1;,"SELECT Citizenship, COUNT(*) AS NumberOfSingers FROM singer GROUP BY Citizenship ORDER BY NumberOfSingers ASC LIMIT 1",select citizenship from singer group by citizenship order by count ( * ) limit 1,SELECT singer.Citizenship FROM singer GROUP BY singer.Citizenship ORDER BY COUNT(*) ASC LIMIT 1
SELECT name FROM singer where Citizenship = 'Australia',singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT Name FROM singer WHERE Citizenship = 'Australia';,SELECT Name FROM singer WHERE Citizenship = 'Australia',"select name from singer where citizenship = ""Australia ""","SELECT singer.Name FROM singer WHERE singer.Citizenship = ""value"""
SELECT Nationality FROM people where People_ID = 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Nationality FROM people WHERE People_ID = 1;,SELECT Nationality FROM people WHERE People_ID = 1;,select nationality from people where people_id = 1,"SELECT people.Nationality FROM people WHERE people.People_ID = ""value"""
"SELECT Birth_Date FROM people where Name = ""Teodor Salparov""",poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Birth_Date FROM people WHERE Name = 'Teodor Salparov';,SELECT Birth_Date FROM people WHERE Name = 'Teodor Salparov';,"select birth_date from people where name = ""Teodor Salparov""","SELECT people.Birth_Date FROM people WHERE people.Name = ""value"""
SELECT Earnings FROM poker_player where People_ID   =   5,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Earnings  FROM poker_player WHERE People_ID = 5;,SELECT Earnings FROM poker_player WHERE People_ID = 5;,select earnings from poker_player where people_id = 5,"SELECT poker_player.Earnings FROM poker_player WHERE poker_player.People_ID = ""value"""
SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID   =   T2.People_ID ORDER BY T1.Height DESC LIMIT 1,poker_player,"CREATE TABLE ""poker_player"" (
""Poker_Player_ID"" int,
""People_ID"" int,
""Final_Table_Made"" real,
""Best_Finish"" real,
""Money_Rank"" real,
""Earnings"" real,
PRIMARY KEY (""Poker_Player_ID""),
FOREIGN KEY (""People_ID"") REFERENCES `people`(""People_ID"")
);
CREATE TABLE ""people"" (
""People_ID"" int,
""Nationality"" text,
""Name"" text,
""Birth_Date"" text,
""Height"" real,
PRIMARY KEY (""People_ID"")
);
",SELECT Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height = (SELECT MAX(Height) FROM people);,SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Height DESC LIMIT 1;,select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id = t2.people_id order by t1.height desc limit 1,SELECT poker_player.Money_Rank FROM poker_player JOIN people ORDER BY people.Height DESC LIMIT 1
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id   =   T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count ( * )  DESC LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY COUNT(se.student_id) ASC LIMIT 1;,"SELECT degree_program_id, COUNT(student_id) AS student_count FROM Student_Enrolment GROUP BY degree_program_id ORDER BY student_count ASC LIMIT 1",select degree_program_id from student_enrolment group by degree_program_id order by count(*) asc limit 1,SELECT Student_Enrolment.degree_program_id FROM Student_Enrolment GROUP BY Student_Enrolment.degree_program_id ORDER BY COUNT(*) ASC LIMIT 1
SELECT degree_program_id from Degree_Programs where degree_summary_description  =  'architecto',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_description = 'architecto';,SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_description = 'architecto',select degree_program_id from degree_programs where degree_summary_description = 'architecto',"SELECT Degree_Programs.degree_program_id FROM Degree_Programs WHERE Degree_Programs.degree_summary_description = ""value"""
"SELECT T2.degree_program_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T1.first_name  =  ""Timmothy""",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT dp.degree_summary_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE s.first_name = 'Timmothy';,SELECT degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id JOIN students ON student_enrolment.student_id = students.student_id WHERE students.first_name = 'Timmothy',"select t3.degree_program_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join degree_programs as t3 on t2.degree_program_id = t3.degree_program_id where t1.first_name = ""Timmothy""","SELECT Student_Enrolment.degree_program_id FROM Student_Enrolment JOIN Students WHERE Students.first_name = ""value"""
"SELECT date_first_registered, date_left FROM Students WHERE first_name  =  ""Timmothy""",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.date_first_registered, s.date_left FROM Students s WHERE s.first_name = 'Timmothy';","SELECT date_first_registered, date_left FROM students WHERE first_name = 'Timmothy'","select date_first_registered, date_left from students where first_name = ""Timmothy""","SELECT Students.date_first_registered , Students.date_left FROM Students JOIN Student_Enrolment WHERE Students.first_name = ""value"""
"SELECT middle_name FROM Students WHERE email_address  =  ""johns.unique@example.net""",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT s.middle_name FROM Students s WHERE s.email_address = 'johns.unique@example.net';,SELECT middle_name FROM students WHERE email_address = 'johns.unique@example.net',"select middle_name from students where email_address = ""johns.unique@example.net""","SELECT Students.middle_name FROM Students WHERE Students.email_address = ""value"""
SELECT distinct PetType from Pets,pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT DISTINCT PetType FROM Pets;,SELECT DISTINCT PetType FROM Pets;,select distinct pettype from pets,SELECT Pets.PetType FROM Pets
"SELECT count ( * )   from Pets where PetType = ""dog""",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*) AS num_dogs  FROM Pets WHERE PetType = 'dog';,SELECT COUNT(*) FROM Pets WHERE PetType = 'dog';,"select count ( * ) from pets where pettype = ""dog""","SELECT COUNT(*) FROM Pets WHERE Pets.PetType = ""value"" OR Pets.PetType = ""value"""
"SELECT pet_age  from Pets where PetType = ""dog""",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT pet_age FROM Pets WHERE PetType = 'dog' LIMIT 2;,SELECT pet_age FROM Pets WHERE PetType = 'dog';,"select pet_age from pets where pettype = ""dog""","SELECT Pets.pet_age FROM Pets WHERE Pets.PetType = ""value"""
"SELECT weight  from Pets where PetType = ""dog"" and pet_age  =   ( select min ( pet_age )  from Pets where PetType = ""dog"" ) ",pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT weight  FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;,SELECT weight FROM Pets WHERE PetType = 'dog' AND pet_age = 1;,select weight from pets where pet_age = 1,"SELECT Pets.weight FROM Pets WHERE Pets.pet_age = ""value"""
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'NorthCarolina';,SELECT last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE state_province_county = 'NorthCarolina',"select t2.last_name from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t1.state_province_county = ""NorthCarolina""","SELECT Students.last_name FROM Addresses JOIN Students WHERE Addresses.state_province_county = ""value"""
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina',student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT first_name, last_name  FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'NorthCarolina';",SELECT first_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE state_province_county = 'NorthCarolina',"select t2.first_name from addresses as t1 join students as t2 on t1.address_id = t2.permanent_address_id where t1.state_province_county = ""NorthCarolina""","SELECT Students.first_name FROM Addresses JOIN Students WHERE Addresses.state_province_county = ""value"""
SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id LEFT JOIN Student_Enrolment se ON s.student_id = se.student_id WHERE a.state_province_county = 'NorthCarolina' AND se.student_enrolment_id IS NULL;,SELECT Students.last_name FROM Students  JOIN Addresses ON Students.current_address_id = Addresses.address_id  LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id  WHERE Addresses.state_province_county = 'NorthCarolina' AND Student_Enrolment.student_id IS NULL,"select last_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join addresses as t3 on t1.permanent_address_id = t3.address_id where t3.state_province_county = ""NorthCarolina""","SELECT Students.last_name FROM Students WHERE Students.student_id NOT IN ( SELECT Student_Enrolment.student_id FROM Student_Enrolment ) EXCEPT SELECT Students.last_name FROM Students WHERE Students.student_id = ""value"""
SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id   =   T2.address_id WHERE T2.state_province_county   =   'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id   =   T4.student_id,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
","SELECT s.first_name, s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'NorthCarolina' AND s.student_id NOT IN (   SELECT student_id    FROM Student_Enrolment );",SELECT Students.first_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'NorthCarolina' AND Student_Enrolment.student_id IS NULL,"select first_name from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id join addresses as t3 on t1.permanent_address_id = t3.address_id where t3.state_province_county = ""NorthCarolina""",SELECT Students.first_name FROM Students WHERE Students.student_id IN ( SELECT Students.last_name FROM Students EXCEPT SELECT Student_Enrolment.student_id FROM Students JOIN Student_Enrolment )
"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);","SELECT loser_name, winner_name FROM matches ORDER BY minutes DESC LIMIT 1","select loser_name, winner_name from matches order by minutes desc limit 1","SELECT matches.loser_name , matches.winner_name FROM matches ORDER BY matches.minutes DESC LIMIT 1"
SELECT score FROM matches ORDER BY minutes DESC LIMIT 1,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
","SELECT winner_name, loser_name, score  FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);",SELECT score FROM matches ORDER BY minutes DESC LIMIT 1,select score from matches order by minutes desc limit 1,SELECT matches.score FROM matches ORDER BY matches.minutes DESC LIMIT 1
select distinct Model from car_names,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT Model FROM model_list;,SELECT Model FROM model_list,select distinct model from model_list,SELECT car_names.Model FROM car_names
SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model   =   T2.model JOIN CARS_DATA AS T3 ON T2.MakeId   =   T3.id WHERE T3.year  >  1980,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT DISTINCT model_list.Model FROM model_list  INNER JOIN car_names ON model_list.Model = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;,SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980,select distinct model from model_list where model in ( select distinct model from car_names where make > 1980 ),"SELECT car_names.Model FROM car_names JOIN cars_data WHERE cars_data.Year > ""value"""
SELECT grade FROM Highschooler GROUP BY grade ORDER BY count ( * )  DESC LIMIT 1,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;,"SELECT grade, COUNT(ID) AS num_students FROM Highschooler GROUP BY grade ORDER BY num_students DESC LIMIT 1",select grade from highschooler group by grade order by count ( * ) desc limit 1,SELECT Highschooler.grade FROM Highschooler GROUP BY Highschooler.grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT name FROM Highschooler WHERE grade  =  9,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler WHERE grade = 9;,SELECT name FROM Highschooler WHERE grade = 9,select name from highschooler where grade = 9,"SELECT Highschooler.name FROM Highschooler WHERE Highschooler.grade = ""value"""
"SELECT grade FROM Highschooler WHERE name  =  ""Tiffany""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM Highschooler WHERE name = 'Tiffany';,SELECT grade FROM Highschooler WHERE name = 'Tiffany',select grade from highschooler where name = 'Tiffany',"SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = ""value"""
SELECT count ( * )  FROM Highschooler WHERE grade  =  9,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM Highschooler WHERE grade = 9;,SELECT COUNT(ID) FROM Highschooler WHERE grade = 9,select count ( * ) from highschooler where grade = 9,"SELECT COUNT(*) FROM Highschooler WHERE Highschooler.grade = ""value"""
"SELECT grade FROM Highschooler WHERE name  =  ""Gabriel"" AND ID  =  1689",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT grade FROM Highschooler WHERE ID = 1689;,SELECT grade FROM Highschooler WHERE ID = 1689,"select grade from highschooler where name = ""Gabriel""","SELECT Highschooler.grade FROM Highschooler WHERE Highschooler.name = ""value"""
"SELECT ID FROM Highschooler WHERE name  =  ""Tiffany""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT ID FROM Highschooler WHERE name = 'Tiffany';,SELECT ID FROM Highschooler WHERE name = 'Tiffany',"select id from highschooler where name = ""Tiffany""","SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = ""value"""
SELECT name FROM Highschooler WHERE ID  =  1510,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler WHERE ID = 1510;,SELECT name FROM Highschooler WHERE ID = 1510,select * from highschooler where id = 1510,"SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID = ""value"""
"SELECT T1.first_name , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.owner_id   =  1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, last_name FROM Owners WHERE owner_id = 1;","SELECT first_name, last_name FROM Owners WHERE owner_id = 1","select first_name, last_name from owners where owner_id = 1","SELECT Owners.owner_id , Owners.first_name , Owners.last_name FROM Owners WHERE Owners.owner_id = ""value"""
SELECT name  FROM Dogs  WHERE age  =  6,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT name FROM Dogs WHERE age = 6;,SELECT name FROM Dogs WHERE age = 6,select name from dogs where age = 6,"SELECT Dogs.name FROM Dogs WHERE Dogs.age = ""value"""
SELECT  name  FROM  Dogs WHERE age >5,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT name FROM Dogs WHERE age > 5;,SELECT name FROM Dogs WHERE age > 5,select name from dogs where age > 5,"SELECT Dogs.name FROM Dogs WHERE Dogs.age > ""value"""
"SELECT T2.name  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id WHERE T1.state   = ""Virginia""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT d.name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id WHERE o.state = 'Virginia';,SELECT Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia',"select t2.name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id where t1.state = ""Virginia""","SELECT Dogs.name FROM Dogs JOIN Owners WHERE Owners.state = ""value"""
SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name ORDER BY count ( * )  LIMIT 1,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(sec.student_enrolment_id) ASC LIMIT 1;,SELECT course_name FROM Courses WHERE course_id = (   SELECT course_id   FROM Student_Enrolment_Courses   GROUP BY course_id   ORDER BY COUNT(*) ASC   LIMIT 1 ),select t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id group by t1.course_name order by count ( * ) asc limit 1,SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses GROUP BY Student_Enrolment_Courses.course_id ORDER BY COUNT(*) ASC LIMIT 1
"SELECT course_id from courses where course_name  =  ""math""",student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT course_id FROM Courses WHERE course_name = 'math';,SELECT course_id FROM Courses WHERE course_name = 'math',select course_id from courses where course_name ='math',"SELECT Courses.course_id FROM Courses WHERE Courses.course_name = ""value"""
SELECT  count ( * )  FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id   =   T2.course_id GROUP BY T1.course_name having T1.course_id  =  14,student_transcripts_tracking,"CREATE TABLE `Addresses` (
`address_id` INTEGER PRIMARY KEY,
`line_1` VARCHAR(255),
`line_2` VARCHAR(255),
`line_3` VARCHAR(255),
`city` VARCHAR(255),
`zip_postcode` VARCHAR(20),
`state_province_county` VARCHAR(255),
`country` VARCHAR(255),
`other_address_details` VARCHAR(255)
);
CREATE TABLE `Courses` (
`course_id` INTEGER PRIMARY KEY,
`course_name` VARCHAR(255),
`course_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Departments` (
`department_id` INTEGER PRIMARY KEY,
`department_name` VARCHAR(255),
`department_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Degree_Programs` (
`degree_program_id` INTEGER PRIMARY KEY,
`department_id` INTEGER NOT NULL,
`degree_summary_name` VARCHAR(255),
`degree_summary_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`department_id` ) REFERENCES `Departments`(`department_id` )
);
CREATE TABLE `Sections` (
`section_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`section_name` VARCHAR(255),
`section_description` VARCHAR(255),
`other_details` VARCHAR(255),
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` )
);
CREATE TABLE `Semesters` (
`semester_id` INTEGER PRIMARY KEY,
`semester_name` VARCHAR(255),
`semester_description` VARCHAR(255),
`other_details` VARCHAR(255)
);
CREATE TABLE `Students` (
`student_id` INTEGER PRIMARY KEY,
`current_address_id` INTEGER NOT NULL,
`permanent_address_id` INTEGER NOT NULL,
`first_name` VARCHAR(80),
`middle_name` VARCHAR(40),
`last_name` VARCHAR(40),
`cell_mobile_number` VARCHAR(40),
`email_address` VARCHAR(40),
`ssn` VARCHAR(40),
`date_first_registered` DATETIME,
`date_left` DATETIME,
`other_student_details` VARCHAR(255),
FOREIGN KEY (`current_address_id` ) REFERENCES `Addresses`(`address_id` ),
FOREIGN KEY (`permanent_address_id` ) REFERENCES `Addresses`(`address_id` )
);
CREATE TABLE `Student_Enrolment` (
`student_enrolment_id` INTEGER PRIMARY KEY,
`degree_program_id` INTEGER NOT NULL,
`semester_id` INTEGER NOT NULL,
`student_id` INTEGER NOT NULL,
`other_details` VARCHAR(255),
FOREIGN KEY (`degree_program_id` ) REFERENCES `Degree_Programs`(`degree_program_id` ),
FOREIGN KEY (`semester_id` ) REFERENCES `Semesters`(`semester_id` ),
FOREIGN KEY (`student_id` ) REFERENCES `Students`(`student_id` )
);
CREATE TABLE `Student_Enrolment_Courses` (
`student_course_id` INTEGER PRIMARY KEY,
`course_id` INTEGER NOT NULL,
`student_enrolment_id` INTEGER NOT NULL,
FOREIGN KEY (`course_id` ) REFERENCES `Courses`(`course_id` ),
FOREIGN KEY (`student_enrolment_id` ) REFERENCES `Student_Enrolment`(`student_enrolment_id` )
);
CREATE TABLE `Transcripts` (
`transcript_id` INTEGER PRIMARY KEY,
`transcript_date` DATETIME,
`other_details` VARCHAR(255)
);
CREATE TABLE `Transcript_Contents` (
`student_course_id` INTEGER NOT NULL,
`transcript_id` INTEGER NOT NULL,
FOREIGN KEY (`student_course_id` ) REFERENCES `Student_Enrolment_Courses`(`student_course_id` ),
FOREIGN KEY (`transcript_id` ) REFERENCES `Transcripts`(`transcript_id` )
);
",SELECT COUNT(*) AS num_students  FROM Student_Enrolment_Courses WHERE course_id = 14;,SELECT COUNT(DISTINCT student_enrolment_id) FROM Student_Enrolment_Courses WHERE course_id = 14,select count ( * ) from courses as t1 join student_enrolment_courses as t2 on t1.course_id = t2.course_id where t1.course_id = 14,"SELECT COUNT(*) FROM Courses JOIN Student_Enrolment_Courses WHERE Student_Enrolment_Courses.course_id = ""value"""
SELECT count ( distinct  Language )  from countrylanguage,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(CountryCode) FROM city;  SELECT COUNT(DISTINCT CountryCode) FROM city;  SELECT COUNT(Language) FROM countrylanguage;,SELECT COUNT(DISTINCT CountryCode) FROM city; SELECT COUNT(DISTINCT Language) FROM countrylanguage;,select count ( distinct language ) from countrylanguage,SELECT COUNT(countrylanguage.Language) FROM countrylanguage
SELECT max ( Percentage )  from countrylanguage,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT MAX(Percentage) FROM countrylanguage;,SELECT MAX(Percentage) FROM countrylanguage;,select percentage from countrylanguage order by percentage desc limit 1,SELECT countrylanguage.Percentage FROM countrylanguage ORDER BY countrylanguage.Percentage DESC LIMIT 1
select name from highschooler,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler;,SELECT names FROM Highschooler;,select name from highschooler,SELECT Highschooler.name FROM Highschooler
"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT H2.name FROM Highschooler H1  JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle';,SELECT h.name  FROM Highschooler h  JOIN Friend f ON h.ID = f.friend_id  JOIN Highschooler k ON f.student_id = k.ID  WHERE k.name = 'Kyle';,select t1.name from highschooler as t1 join friend as t2 on t1.id = t2.student_id where t2.friend_id = 'Kyle',"SELECT Highschooler.name FROM Highschooler JOIN Friend WHERE Highschooler.name = ""value"""
"SELECT id FROM highschooler where name  =  ""Kyle""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT ID FROM Highschooler WHERE name = 'Kyle';,SELECT ID FROM Highschooler WHERE name = 'Kyle';,select id from highschooler where name = 'Kyle',"SELECT Highschooler.ID FROM Highschooler WHERE Highschooler.name = ""value"""
SELECT name FROM highschooler where id  =  1709,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT name FROM Highschooler WHERE ID = 1709;,SELECT name FROM Highschooler WHERE ID = 1709;,select * from highschooler where id = 1709,"SELECT Highschooler.name FROM Highschooler WHERE Highschooler.ID = ""value"""
"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Jordan""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Jordan';,SELECT h2.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON f.friend_id = h2.ID WHERE h1.name = 'Jordan';,select t3.name from highschooler as t1 join friend as t2 on t1.id = t2.friend_id join highschooler as t3 on t1.id = t2.student_id where t1.name = 'Jordan',"SELECT Highschooler.name FROM Highschooler JOIN Friend WHERE Highschooler.name = ""value"" AND Highschooler.name != ""value"""
"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Gabriel""",network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.friend_id JOIN Highschooler H2 ON F.student_id = H2.ID WHERE H1.name = 'Gabriel';,SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id WHERE f.student_id = (SELECT ID FROM Highschooler WHERE name = 'Gabriel');,select t2.friend_id from highschooler as t1 join friend as t2 on t1.id = t2.student_id where t1.name = 'Gabriel',"SELECT Highschooler.name FROM Highschooler JOIN Friend WHERE Highschooler.name = ""value"""
SELECT distinct T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT c.CountryName FROM countries c JOIN continents co ON c.Continent = co.ContId WHERE co.Continent = 'europe';,SELECT countries.CountryName FROM countries JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'europe',select countryname from countries where continent = 'europe',"SELECT countries.CountryName FROM countries JOIN continents WHERE continents.Continent = ""value"""
"SELECT T1.CountryName, count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT c.CountryName, COUNT(cm.Id) AS NumManufacturers FROM countries c JOIN continents co ON c.Continent = co.ContId LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE co.Continent = 'europe' GROUP BY c.CountryName;","SELECT countries.CountryName, COUNT(car_makers.Id) AS NumberOfManufacturers FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'europe' GROUP BY countries.CountryName","select count ( * ), country from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.continent = 'europe' group by country","SELECT countries.CountryName , COUNT(*) FROM countries JOIN car_makers JOIN continents WHERE continents.Continent = ""value"" GROUP BY countries.CountryName"
SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName HAVING count ( * )    > =    3,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT c.CountryName, COUNT(cm.Id) AS NumManufacturers FROM countries c JOIN continents co ON c.Continent = co.ContId LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE co.Continent = 'europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;",SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3,select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.continent = 'europe' group by t1.countryname having count ( * ) > 2,"SELECT countries.CountryName , COUNT(*) FROM countries JOIN car_makers JOIN continents WHERE continents.Continent = ""value"" GROUP BY countries.CountryName HAVING COUNT(*) >= ""value"""
"SELECT T1.CountryName, count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe' GROUP BY T1.CountryName HAVING count ( * )    > =    3",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT c.CountryName, COUNT(cm.Id) AS NumManufacturers FROM countries c JOIN continents co ON c.Continent = co.ContId LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE co.Continent = 'europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;","SELECT countries.CountryName, COUNT(car_makers.Id) AS NumberOfManufacturers FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'europe' GROUP BY countries.CountryName HAVING COUNT(car_makers.Id) >= 3",select count ( * ) from countries as t1 join car_makers as t2 on t1.countryid = t2.country where t1.continent = 'europe' group by t1.countryid,"SELECT countries.CountryName , COUNT(*) FROM countries JOIN car_makers JOIN continents WHERE continents.Continent = ""value"" GROUP BY countries.CountryName HAVING COUNT(*) >= ""value"""
SELECT count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'europe',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(cm.Id) AS TotalManufacturers FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId JOIN continents co ON c.Continent = co.ContId WHERE co.Continent = 'europe';,SELECT COUNT(car_makers.Id) AS TotalManufacturers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'europe',select count ( * ) from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.continent = 'europe',"SELECT COUNT(*) FROM car_makers JOIN countries JOIN continents WHERE continents.Continent = ""value"""
SELECT count ( * )  FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(cm.Id) AS TotalManufacturers FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId JOIN continents co ON c.Continent = co.ContId WHERE co.Continent = 'america';,SELECT COUNT(car_makers.Id) AS TotalManufacturers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'america',select count ( * ) from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.continent = 'america',"SELECT COUNT(*) FROM car_makers JOIN countries JOIN continents WHERE continents.Continent = ""value"""
SELECT T3.Fullname FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent   =   T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId   =   T3.Country WHERE T2.Continent   =   'america',car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT cm.FullName AS Manufacturer FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId JOIN continents co ON c.Continent = co.ContId WHERE co.Continent = 'america';,SELECT car_makers.FullName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'america',select count ( * ) from continents as t1 join car_makers as t2 on t1.continent = t2.country where t1.continent = 'america',"SELECT COUNT(*) FROM car_makers JOIN countries JOIN continents WHERE continents.Continent = ""value"""
SELECT count ( * )  FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 ) ,museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
",SELECT COUNT(*) AS total_visitors FROM visitor WHERE ID NOT IN (   SELECT DISTINCT visitor_ID   FROM visit   JOIN museum ON visit.Museum_ID = museum.Museum_ID   WHERE museum.Open_Year > 2010 );,SELECT COUNT(DISTINCT visitor.ID) FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year <= 2010 OR museum.Museum_ID IS NULL,select count ( * ) from visitor where id not in ( select visitor_id from visit where museum_id in ( select museum_id from museum where open_year > 2010 ) ),"SELECT COUNT(*) FROM visitor WHERE visitor.ID NOT IN ( SELECT visit.visitor_ID FROM visit JOIN museum WHERE museum.Open_Year > ""value"" )"
"SELECT name, level_of_membership FROM visitor WHERE id NOT IN  ( SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID   =   t2.Museum_ID WHERE t1.open_year  >  2010 ) ",museum_visit,"CREATE TABLE ""museum"" (
""Museum_ID"" int,
""Name"" text,
""Num_of_Staff"" int,
""Open_Year"" text,
PRIMARY KEY (""Museum_ID"")
);
CREATE TABLE ""visitor"" (
""ID"" int,
""Name"" text,
""Level_of_membership"" int,
""Age"" int,
PRIMARY KEY (""ID"")
);
CREATE TABLE ""visit"" (
""Museum_ID"" int,
""visitor_ID"" text,
""Num_of_Ticket"" int,
""Total_spent"" real,
PRIMARY KEY (""Museum_ID"",""visitor_ID""),
FOREIGN KEY (""Museum_ID"") REFERENCES `museum`(""Museum_ID""),
FOREIGN KEY (""visitor_ID"") REFERENCES `visitor`(""ID"")
);
","SELECT Name, Level_of_membership FROM visitor WHERE ID IN (   SELECT ID   FROM visitor   WHERE ID NOT IN (     SELECT DISTINCT visitor_ID     FROM visit     JOIN museum ON visit.Museum_ID = museum.Museum_ID     WHERE museum.Open_Year > 2010   )   LIMIT 3 );","SELECT Name, Level_of_membership FROM visitor WHERE ID IN (SELECT visitor.ID FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year <= 2010 OR museum.Museum_ID IS NULL) LIMIT 3","select name, level_of_membership from visitor where id not in ( select visitor_id from visit as t1 join museum as t2 on t1.museum_id = t2.museum_id where t2.open_year > 2010 )","SELECT visitor.Name , visitor.Level_of_membership FROM visitor WHERE visitor.ID NOT IN ( SELECT visit.visitor_ID FROM visit JOIN museum WHERE museum.Open_Year > ""value"" )"
SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(*) AS owners_without_dogs FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL;,SELECT COUNT(DISTINCT owner_id) FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs);,select count ( * ) from owners where owner_id not in ( select owner_id from dogs ),SELECT COUNT(*) FROM Owners WHERE Owners.owner_id NOT IN ( SELECT Dogs.owner_id FROM Dogs )
SELECT count ( * )  FROM Owners WHERE owner_id NOT IN  (  SELECT owner_id FROM Dogs  ) ,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT o.first_name, o.last_name FROM Owners o WHERE NOT EXISTS (   SELECT 1   FROM Dogs d   WHERE d.owner_id = o.owner_id );","SELECT first_name, last_name FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs);","select first_name, last_name from owners except select t1.first_name, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id","SELECT Owners.first_name , Owners.last_name FROM Owners WHERE Owners.owner_id NOT IN ( SELECT Dogs.owner_id FROM Dogs )"
SELECT title  FROM cartoon ORDER BY original_air_date LIMIT 1,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT Title, Original_air_date FROM Cartoon ORDER BY Original_air_date LIMIT 1;",SELECT MIN(Original_air_date) FROM Cartoon;,select title from cartoon order by original_air_date asc limit 1,SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Original_air_date ASC LIMIT 1
SELECT title  FROM cartoon ORDER BY original_air_date desc LIMIT 1,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT Title, Original_air_date  FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;",SELECT Title FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;,select title from cartoon order by original_air_date desc limit 1,SELECT Cartoon.Title FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1
SELECT channel FROM cartoon ORDER BY original_air_date desc LIMIT 1,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
","SELECT c.Title, c.Original_air_date, tc.series_name AS Channel FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id ORDER BY c.Original_air_date DESC LIMIT 1;",SELECT Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;,select channel from cartoon order by original_air_date desc limit 1,SELECT Cartoon.Channel FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1
SELECT production_code FROM cartoon ORDER BY original_air_date desc LIMIT 1,tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT c.Production_code FROM Cartoon c ORDER BY c.Original_air_date DESC LIMIT 1;,SELECT Production_code FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;,select production_code from cartoon order by original_air_date desc limit 1,SELECT Cartoon.Production_code FROM Cartoon ORDER BY Cartoon.Original_air_date DESC LIMIT 1
SELECT * FROM singer WHERE Birth_Year  <  1945,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT Name, Birth_Year FROM singer WHERE Birth_Year < 1945;",SELECT Name FROM singer WHERE Birth_Year < 1945;,select * from singer where birth_year < 1945,"SELECT singer.Name FROM singer WHERE singer.Birth_Year < ""value"""
SELECT * FROM singer WHERE Birth_Year  >  1955,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT Name, Birth_Year FROM singer WHERE Birth_Year > 1955;",SELECT Name FROM singer WHERE Birth_Year > 1955;,select * from singer where birth_year > 1955,"SELECT singer.Name FROM singer WHERE singer.Birth_Year < ""value"""
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT Citizenship FROM singer WHERE Birth_Year < 1945;,SELECT Citizenship FROM singer WHERE Birth_Year < 1945;,select citizenship from singer where birth_year < 1945,"SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < ""value"" INTERSECT SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year > ""value"""
SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 or Birth_Year  >  1955,singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
",SELECT Citizenship FROM singer WHERE Birth_Year > 1955;,SELECT Citizenship FROM singer WHERE Birth_Year > 1955;,select citizenship from singer where birth_year > 1955 or birth_year < 1945,"SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year < ""value"" INTERSECT SELECT singer.Citizenship FROM singer WHERE singer.Birth_Year > ""value"""
SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'United States',singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT Name, Birth_Year, Citizenship  FROM singer WHERE Citizenship = 'United States' AND Birth_Year < 1945;",SELECT Name FROM singer WHERE Citizenship = 'United States' AND Birth_Year < 1945;,"select singer_id from singer where citizenship = ""United States"" and birth_year < 1945","SELECT singer.Name FROM singer WHERE singer.Citizenship = ""value"" AND singer.Birth_Year < ""value"""
SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'United States' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'United States',singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT Name, Birth_Year, Citizenship FROM singer WHERE Citizenship = 'United States' AND Birth_Year > 1955;",SELECT Name FROM singer WHERE Citizenship = 'United States' AND Birth_Year > 1955;,select singer_id from singer where citizenship = 'United States' and birth_year < 1945 intersect select singer_id from singer where citizenship = 'United States' and birth_year > 1955,"SELECT singer.Name FROM singer WHERE singer.Citizenship = ""value"" AND singer.Birth_Year < ""value"""
SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'France',singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT Name, Birth_Year, Citizenship FROM singer WHERE Citizenship = 'France' AND Birth_Year < 1945;",SELECT Name FROM singer WHERE Citizenship = 'France' AND Birth_Year < 1945;,"select singer_id from singer where citizenship = ""France"" and birth_year < 1945","SELECT singer.Name FROM singer WHERE singer.Citizenship = ""value"" AND singer.Birth_Year < ""value"""
SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'France' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'France',singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT Name, Birth_Year, Citizenship FROM singer WHERE Citizenship = 'France' AND Birth_Year > 1955;",SELECT Name FROM singer WHERE Citizenship = 'France' AND Birth_Year > 1955;,"select singer_id from singer where citizenship = ""France"" and birth_year < 1945 intersect select singer_id from singer where citizenship = ""United States"" and birth_year > 1955","SELECT singer.Name FROM singer WHERE singer.Citizenship = ""value"" AND singer.Birth_Year < ""value"""
SELECT * FROM singer WHERE Birth_Year  <  1945 and Citizenship  =  'Chile' UNION SELECT * FROM singer WHERE Birth_Year  >  1955 and Citizenship  =  'Chile',singer,"CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Birth_Year"" real,
""Net_Worth_Millions"" real,
""Citizenship"" text,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""song"" (
""Song_ID"" int,
""Title"" text,
""Singer_ID"" int,
""Sales"" real,
""Highest_Position"" real,
PRIMARY KEY (""Song_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES `singer`(""Singer_ID"")
);
","SELECT Name, Birth_Year, Citizenship  FROM singer WHERE Citizenship = 'Chile' AND (Birth_Year < 1945 OR Birth_Year > 1955);",SELECT Name FROM singer WHERE Citizenship = 'Chile' AND (Birth_Year < 1945 OR Birth_Year > 1955);,"select singer_id from singer where citizenship = ""Chile"" and birth_year < 1945 or birth_year > 1955","SELECT singer.Name FROM singer WHERE singer.Citizenship = ""value"" OR singer.Birth_Year < ""value"""
select count ( * )  from Country,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM country;,SELECT COUNT(*) FROM country;,select count ( * ) from country,SELECT COUNT(*) FROM country
select count ( distinct Language )  from countrylanguage,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(*) FROM countrylanguage;,SELECT COUNT(*) FROM countrylanguage;,select count ( distinct language ) from countrylanguage,SELECT COUNT(countrylanguage.Language) FROM countrylanguage
select SurfaceArea from Country where Code  =  'AFG',world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SurfaceArea FROM country WHERE Code = 'AFG';,SELECT SurfaceArea FROM country WHERE Code = 'AFG';,"select surfacearea from country where code = ""AFG""","SELECT country.SurfaceArea FROM country WHERE country.Code = ""value"""
"SELECT sum ( Population )  FROM country WHERE Region  =  ""Caribbean""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT SUM(Population) AS Caribbean_Population FROM country WHERE Region = 'Caribbean';,SELECT SUM(Population) FROM country WHERE Region = 'Caribbean';,"select population from country where region = ""Caribbean""","SELECT country.Population FROM country WHERE country.Region = ""value"""
SELECT Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72,world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;,"SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country GROUP BY Continent HAVING AvgLifeExpectancy < 72;",select continent from country group by continent having avg ( lifeexpectancy ) < 72,"SELECT country.Continent FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < ""value"""
"SELECT sum ( Population ) ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Continent, SUM(Population) AS Total_Population FROM country WHERE Continent IN (   SELECT Continent   FROM country   GROUP BY Continent   HAVING AVG(LifeExpectancy) < 72 ) GROUP BY Continent;","SELECT Continent, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;","select continent, sum ( population ) from country where lifeexpectancy < 72 group by continent","SELECT country.Continent , AVG(country.Population) FROM country GROUP BY country.Continent HAVING AVG(country.LifeExpectancy) < ""value"""
"SELECT avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Continent, AVG(LifeExpectancy) AS Average_Life_Expectancy FROM country WHERE Continent IN (   SELECT Continent   FROM country   GROUP BY Continent   HAVING AVG(LifeExpectancy) < 72 ) GROUP BY Continent;","SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;",select avg ( lifeexpectancy ) from country where lifeexpectancy < 72,"SELECT country.Continent , AVG(country.LifeExpectancy) FROM country GROUP BY country.Continent"
"SELECT sum ( Population )  ,  avg ( LifeExpectancy )  ,  Continent FROM country GROUP BY Continent HAVING avg ( LifeExpectancy )   <  72",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
","SELECT Continent, AVG(LifeExpectancy) AS Average_Life_Expectancy, SUM(Population) AS Total_Population FROM country WHERE Continent IN (   SELECT Continent   FROM country   GROUP BY Continent   HAVING AVG(LifeExpectancy) < 72 ) GROUP BY Continent;","SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;","select avg ( lifeexpectancy ), sum ( population ) from country where lifeexpectancy < 72 group by continent","SELECT AVG(country.LifeExpectancy) , AVG(country.Population) FROM country GROUP BY country.Continent"
"SELECT street FROM Owners WHERE first_name  =  ""Nora"" and last_name  =  ""Haley""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT street  FROM Owners WHERE first_name = 'Nora' AND last_name = 'Haley';,SELECT street FROM Owners WHERE first_name = 'Nora' AND last_name = 'Haley';,"select street from owners where first_name = ""Nora"" and last_name = ""Haley""","SELECT Owners.street FROM Owners WHERE Owners.first_name = ""value"" AND Owners.last_name = ""value"""
"SELECT home_phone FROM Owners WHERE first_name  =  ""Nora"" and last_name  =  ""Haley""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT home_phone FROM Owners WHERE first_name = 'Nora' AND last_name = 'Haley';,SELECT home_phone FROM Owners WHERE first_name = 'Nora' AND last_name = 'Haley';,"select home_phone from owners where first_name = ""Nora"" and last_name = ""Haley""","SELECT Owners.home_phone FROM Owners WHERE Owners.first_name = ""value"" AND Owners.last_name = ""value"""
"SELECT email_address FROM Owners WHERE first_name  =  ""Jaclyn"" and last_name  =  ""Stoltenberg""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT email_address FROM Owners WHERE first_name = 'Jaclyn' AND last_name = 'Stoltenberg';,SELECT email_address FROM Owners WHERE first_name = 'Jaclyn' AND last_name = 'Stoltenberg';,"select email_address from owners where first_name = ""Jaclyn"" and last_name = ""Stoltenberg""","SELECT Owners.email_address FROM Owners WHERE Owners.first_name = ""value"""
"SELECT first_name FROM Owners WHERE last_name  =  ""DuBuque""",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT first_name FROM Owners WHERE last_name = 'DuBuque';,SELECT first_name FROM Owners WHERE last_name = 'DuBuque';,"select first_name from owners where last_name = ""DuBuque""","SELECT Owners.first_name FROM Owners WHERE Owners.last_name = ""value"""
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * )  ASC LIMIT 1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT d.Document_ID FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) ASC LIMIT 1;,"SELECT Document_ID, COUNT(Paragraph_ID) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID ORDER BY ParagraphCount ASC LIMIT 1",select document_id from paragraphs group by document_id order by count(*) asc limit 1,SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*) ASC LIMIT 1
SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count ( * )  desc LIMIT 1,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT d.Document_ID FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;,"SELECT Document_ID, COUNT(Paragraph_ID) AS ParagraphCount FROM Paragraphs GROUP BY Document_ID ORDER BY ParagraphCount DESC LIMIT 1",select document_id from paragraphs group by document_id order by count ( * ) desc limit 1,SELECT Paragraphs.Document_ID FROM Paragraphs GROUP BY Paragraphs.Document_ID ORDER BY COUNT(*) DESC LIMIT 1
select count ( paragraph_id )  from Paragraphs where Document_ID  =  2394,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = 2394;,SELECT COUNT(Paragraph_ID) FROM Paragraphs WHERE Document_ID = 2394,select count ( * ) from paragraphs where document_id = 2394,"SELECT COUNT(*) FROM Paragraphs WHERE Paragraphs.Document_ID = ""value"""
select Paragraph_Text from Paragraphs where Document_ID  =  2394,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = 2394;,SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = 2394,select paragraph_text from paragraphs where document_id = 2394,"SELECT Paragraphs.Paragraph_Text FROM Paragraphs WHERE Paragraphs.Document_ID = ""value"""
SELECT email_address from owners where owner_id  =  1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT email_address FROM Owners WHERE owner_id = 1;,SELECT email_address FROM Owners WHERE owner_id = 1,select email_address from owners where owner_id = 1,"SELECT Owners.email_address FROM Owners WHERE Owners.owner_id = ""value"""
SELECT weight from dogs where dog_id  =  1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT weight FROM Dogs WHERE dog_id = 1;,SELECT weight FROM Dogs WHERE dog_id = 1,select weight from dogs where dog_id = 1,"SELECT Dogs.weight FROM Dogs WHERE Dogs.dog_id = ""value"""
SELECT age from dogs where dog_id  =  1,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT age FROM Dogs WHERE dog_id = 1;,SELECT age FROM Dogs WHERE dog_id = 1,select age from dogs where dog_id = 1,"SELECT Dogs.age FROM Dogs WHERE Dogs.dog_id = ""value"""
"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id   =   T2.owner_id JOIN Treatments AS T3 ON T2.dog_id   =   T3.dog_id GROUP BY T1.owner_id ORDER BY count ( * )  DESC LIMIT 1",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY COUNT(t.treatment_id) DESC LIMIT 1;","SELECT Owners.owner_id, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Treatments ON Dogs.dog_id = Treatments.dog_id GROUP BY Owners.owner_id, Owners.last_name ORDER BY COUNT(Treatments.treatment_id) DESC LIMIT 1","select t1.owner_id, t1.last_name from owners as t1 join dogs as t2 on t1.owner_id = t2.owner_id group by t1.owner_id order by count ( * ) desc limit 1","SELECT Owners.owner_id , Owners.last_name FROM Owners JOIN Dogs JOIN Treatments GROUP BY Owners.owner_id ORDER BY COUNT(*) DESC LIMIT 1"
SELECT count ( * )  FROM matches WHERE YEAR   =   2013,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*)  FROM matches WHERE year = 2013;,SELECT COUNT(*) FROM matches WHERE year = 2013,select count(*) from matches where year = 2013,"SELECT COUNT(*) FROM matches WHERE matches.year = ""value"""
SELECT count ( * )  FROM matches WHERE YEAR   =   2016,wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT COUNT(*) FROM matches WHERE year = 2016;,SELECT COUNT(*) FROM matches WHERE year = 2016,select count ( * ) from matches where year = 2016,"SELECT COUNT(*) FROM matches WHERE matches.year = ""value"""
"SELECT distinct loser_id  FROM  matches where loser_name   = ""Petra Kvitova""",wta_1,"CREATE TABLE players(
    ""player_id"" INT PRIMARY KEY,
    ""first_name"" TEXT,
    ""last_name"" TEXT,
    ""hand"" TEXT,
    ""birth_date"" DATE,
    ""country_code"" TEXT
);
CREATE TABLE matches(
  ""best_of"" INT,
  ""draw_size"" INT,
  ""loser_age"" FLOAT,
  ""loser_entry"" TEXT,
  ""loser_hand"" TEXT,
  ""loser_ht"" INT,
  ""loser_id"" INT,
  ""loser_ioc"" TEXT,
  ""loser_name"" TEXT,
  ""loser_rank"" INT,
  ""loser_rank_points"" INT,
  ""loser_seed"" INT,
  ""match_num"" INT,
  ""minutes"" INT,
  ""round"" TEXT,
  ""score"" TEXT,
  ""surface"" TEXT,
  ""tourney_date"" DATE,
  ""tourney_id"" TEXT,
  ""tourney_level"" TEXT,
  ""tourney_name"" TEXT,
  ""winner_age"" FLOAT,
  ""winner_entry"" TEXT,
  ""winner_hand"" TEXT,
  ""winner_ht"" INT,
  ""winner_id"" INT,
  ""winner_ioc"" TEXT,
  ""winner_name"" TEXT,
  ""winner_rank"" INT,
  ""winner_rank_points"" INT,
  ""winner_seed"" INT,
  ""year"" INT,
  FOREIGN KEY(loser_id) REFERENCES players(player_id),
  FOREIGN KEY(winner_id) REFERENCES players(player_id)
);
CREATE TABLE rankings(""ranking_date"" DATE,""ranking"" INT,""player_id"" INT,""ranking_points"" INT,""tours"" INT,FOREIGN KEY(player_id) REFERENCES players(player_id));
",SELECT loser_id FROM matches WHERE loser_name = 'Petra Kvitova';,SELECT loser_id FROM matches WHERE loser_name = 'Petra Kvitova' LIMIT 1,"select t2.loser_id from players as t1 join matches as t2 on t1.player_id = t2.loser_id where t1.first_name = ""Petra"" and t1.last_name = ""Kvitota""","SELECT matches.loser_id FROM matches WHERE matches.loser_name = ""value"""
SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.written_by   =   'Todd Casey',tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Country FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' );,SELECT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey'),select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by = 'Todd Casey',"SELECT TV_Channel.Country FROM TV_Channel WHERE TV_Channel.id NOT IN ( SELECT Cartoon.Channel FROM Cartoon WHERE Cartoon.Written_by = ""value"" )"
"SELECT directed_by from cartoon where title  =  ""The Rise of the Blue Beetle!"" and written_by  =  ""Michael Jelenic""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Directed_by FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!' AND Written_by = 'Michael Jelenic';,SELECT Directed_by FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!' AND Written_by = 'Michael Jelenic',"select directed_by from cartoon where written_by = ""Michael Jelenic"" and title = ""The rise of blue beetle""","SELECT Cartoon.Directed_by FROM Cartoon WHERE Cartoon.Written_by = ""value"" AND Cartoon.Title = ""value"""
"SELECT Package_Option from tv_channel where country  =  ""Italy""",tvshow,"CREATE TABLE ""TV_Channel"" (
""id"" text,
""series_name"" text,
""Country"" text,
""Language"" text,
""Content"" text,
""Pixel_aspect_ratio_PAR"" text,
""Hight_definition_TV"" text,
""Pay_per_view_PPV"" text,
""Package_Option"" text,
PRIMARY KEY (""id"")
);
CREATE TABLE ""TV_series"" (
""id"" real,
""Episode"" text,
""Air_Date"" text,
""Rating"" text,
""Share"" real,
""18_49_Rating_Share"" text,
""Viewers_m"" text,
""Weekly_Rank"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
CREATE TABLE ""Cartoon"" (
""id"" real,
""Title"" text,
""Directed_by"" text,
""Written_by"" text,
""Original_air_date"" text,
""Production_code"" real,
""Channel"" text,
PRIMARY KEY (""id""),
FOREIGN KEY (`Channel`) REFERENCES `TV_Channel`(`id`)
);
",SELECT Package_Option  FROM TV_Channel WHERE Country = 'Italy';,SELECT Package_Option FROM TV_Channel WHERE Country = 'Italy',"select package_option from tv_channel where country = ""Italy""","SELECT TV_Channel.Package_Option FROM TV_Channel WHERE TV_Channel.Country = ""value"""
"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1;","SELECT Name, Song_release_year FROM singer ORDER BY Age ASC LIMIT 1","select song_name, song_release_year from singer order by age limit 1","SELECT singer.Song_Name , singer.Song_release_year FROM singer ORDER BY singer.Age ASC LIMIT 1"
"SELECT song_name ,  song_release_year FROM singer ORDER BY age desc LIMIT 1",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT Name, Song_release_year FROM singer ORDER BY Age DESC LIMIT 1;","SELECT Name, Song_release_year FROM singer ORDER BY Age DESC LIMIT 1","select song_name, song_release_year from singer order by age desc limit 1","SELECT singer.Song_Name , singer.Song_release_year FROM singer ORDER BY singer.Age DESC LIMIT 1"
SELECT Name FROM singer ORDER BY age LIMIT 1,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT Name, Song_release_year, Age FROM singer ORDER BY Age ASC LIMIT 1;",SELECT Name FROM singer ORDER BY Age ASC LIMIT 1,select name from singer order by age limit 1,SELECT singer.Name FROM singer ORDER BY singer.Age ASC LIMIT 1
"SELECT Name, age FROM singer ORDER BY age desc LIMIT 1",concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT Name, Age FROM singer ORDER BY Age DESC LIMIT 1;","SELECT Name, Age FROM singer ORDER BY Age DESC LIMIT 1","select name, age from singer order by age desc limit 1","SELECT singer.Name , singer.Age FROM singer ORDER BY singer.Age DESC LIMIT 1"
SELECT Country FROM singer ORDER BY age desc LIMIT 1,concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
","SELECT Name, Country, Age FROM singer ORDER BY Age DESC LIMIT 1;",SELECT Country FROM singer ORDER BY Age DESC LIMIT 1,select country from singer order by age desc limit 1,SELECT singer.Country FROM singer ORDER BY singer.Age DESC LIMIT 1
SELECT Name FROM singer where country  =  'United States',concert_singer,"CREATE TABLE ""stadium"" (
""Stadium_ID"" int,
""Location"" text,
""Name"" text,
""Capacity"" int,
""Highest"" int,
""Lowest"" int,
""Average"" int,
PRIMARY KEY (""Stadium_ID"")
);
CREATE TABLE ""singer"" (
""Singer_ID"" int,
""Name"" text,
""Country"" text,
""Song_Name"" text,
""Song_release_year"" text,
""Age"" int,
""Is_male"" bool,
PRIMARY KEY (""Singer_ID"")
);
CREATE TABLE ""concert"" (
""concert_ID"" int,
""concert_Name"" text,
""Theme"" text,
""Stadium_ID"" text,
""Year"" text,
PRIMARY KEY (""concert_ID""),
FOREIGN KEY (""Stadium_ID"") REFERENCES ""stadium""(""Stadium_ID"")
);
CREATE TABLE ""singer_in_concert"" (
""concert_ID"" int,
""Singer_ID"" text,
PRIMARY KEY (""concert_ID"",""Singer_ID""),
FOREIGN KEY (""concert_ID"") REFERENCES ""concert""(""concert_ID""),
FOREIGN KEY (""Singer_ID"") REFERENCES ""singer""(""Singer_ID"")
);
",SELECT Name FROM singer WHERE Country = 'United States';,SELECT Name FROM singer WHERE Country = 'United States',"select name from singer where country = ""United States""","SELECT singer.Name , singer.Is_male FROM singer WHERE singer.Country = ""value"""
SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*)  FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog';,SELECT COUNT(DISTINCT Student.StuID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog';,"select count ( * ) from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = ""dog""","SELECT COUNT(*) FROM Student JOIN Has_Pet JOIN Pets WHERE Pets.PetType = ""value"""
SELECT count ( * )  FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT COUNT(*)  FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat';,SELECT COUNT(DISTINCT Student.StuID) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat';,"select count ( * ) from has_pet as t1 join pets as t2 on t1.petid = t2.petid where t2.pettype = ""cat""","SELECT COUNT(*) FROM Student JOIN Has_Pet JOIN Pets WHERE Pets.PetType = ""value"""
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid   =   T2.stuid JOIN pets AS T3 ON T3.petid   =   T2.petid WHERE T3.pettype   =   'cat' OR T3.pettype   =   'dog',pets_1,"CREATE TABLE Student (
       StuID    	INTEGER PRIMARY KEY,
       LName		VARCHAR(12),
       Fname		VARCHAR(12),
       Age		INTEGER,
       Sex		VARCHAR(1),
       Major		INTEGER,
       Advisor		INTEGER,
       city_code	VARCHAR(3)
);
CREATE TABLE Has_Pet (
       StuID		INTEGER,
       PetID		INTEGER,
       FOREIGN KEY(PetID) REFERENCES Pets(PetID),
       FOREIGN KEY(StuID) REFERENCES Student(StuID)
);
CREATE TABLE Pets (
       PetID		INTEGER PRIMARY KEY,
       PetType		VARCHAR(20),
       pet_age INTEGER,
       weight REAL
);
",SELECT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' LIMIT 3;,SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' LIMIT 3;,"select t1.fname from student as t1 join has_pet as t2 on t1.stuid = t2.stuid join pets as t3 on t2.petid = t3.petid where t3.pettype = ""cat""","SELECT Student.Fname FROM Student JOIN Has_Pet JOIN Pets WHERE Pets.PetType = ""value"""
SELECT state FROM Professionals,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT DISTINCT state FROM Professionals;,SELECT states FROM Professionals GROUP BY states;,select state from professionals,SELECT Professionals.state FROM Professionals
SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT DISTINCT o.state FROM Owners o INNER JOIN Professionals p ON o.state = p.state;,SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state;,select state from owners intersect select state from professionals,SELECT Owners.state FROM Owners INTERSECT SELECT Professionals.state FROM Professionals
SELECT DISTINCT first_name FROM professionals,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT first_name FROM Professionals;,SELECT first_name FROM Professionals,select first_name from professionals,SELECT Professionals.first_name FROM Professionals
"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT first_name, role_code FROM Professionals;","SELECT first_name, role_code FROM Professionals","select first_name, role_code from professionals","SELECT Professionals.first_name , COUNT(*) FROM Professionals"
"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT p.first_name, tt.treatment_type_description FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;","SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code","select t2.first_name, t3.treatment_type_description from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id join treatment_types as t3 on t1.treatment_type_code = t3.treatment_type_code","SELECT Professionals.first_name , Treatment_Types.treatment_type_description FROM Treatments JOIN Professionals JOIN Treatment_Types"
SELECT count ( Course_ID )  FROM course,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT COUNT(DISTINCT Course_ID) FROM course;,SELECT COUNT(DISTINCT Course_ID) FROM course;,select count ( distinct course_id ) from course,SELECT COUNT(course_arrange.Course_ID) FROM course_arrange
SELECT Course FROM course,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT Course FROM course;,SELECT Course FROM course;,select course from course,SELECT course.Course FROM course
SELECT count ( Teacher_ID )  FROM teacher,course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT COUNT(DISTINCT Teacher_ID) FROM teacher;,SELECT COUNT(DISTINCT Teacher_ID) FROM teacher;,select count ( distinct teacher_id ) from course_arrange,SELECT COUNT(course_arrange.Teacher_ID) FROM course_arrange JOIN course
"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID   =   T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID   =   T3.Teacher_ID WHERE T2.Course   =   ""Math""",course_teach,"CREATE TABLE ""course"" (
""Course_ID"" int,
""Staring_Date"" text,
""Course"" text,
PRIMARY KEY (""Course_ID"")
);
CREATE TABLE ""teacher"" (
""Teacher_ID"" int,
""Name"" text,
""Age"" text,
""Hometown"" text,
PRIMARY KEY (""Teacher_ID"")
);
CREATE TABLE ""course_arrange"" (
""Course_ID"" int,
""Teacher_ID"" int,
""Grade"" int,
PRIMARY KEY (""Course_ID"",""Teacher_ID"",""Grade""),
FOREIGN KEY (""Course_ID"") REFERENCES `course`(""Course_ID""),
FOREIGN KEY (""Teacher_ID"") REFERENCES `teacher`(""Teacher_ID"")
);
",SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'Math';,SELECT t.Name  FROM teacher t  JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID  JOIN course c ON ca.Course_ID = c.Course_ID  WHERE c.Course = 'Math';,select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id = t2.teacher_id join course as t3 on t1.course_id = t3.course_id where t3.course = 'Math',"SELECT teacher.Name FROM course_arrange JOIN course JOIN teacher WHERE course.Course = ""value"""
"SELECT T1.Continent ,  count ( * )  FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country GROUP BY T1.Continent",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT c.Continent, COUNT(cm.Id) AS CarMakerCount FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;","SELECT continents.Continent, COUNT(car_makers.Id) AS NumberOfCarMakers FROM continents JOIN countries ON continents.ContId = countries.Continent JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY continents.Continent","select t1.continent, count ( * ) from countries as t1 join continents as t2 on t1.continent = t2.contid group by t1.continent","SELECT continents.Continent , COUNT(*) FROM countries JOIN continents JOIN car_makers GROUP BY continents.Continent"
"SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  ""asia""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT cm.FullName, co.CountryName FROM car_makers cm JOIN countries co ON cm.Country = co.CountryId JOIN continents c ON co.Continent = c.ContId WHERE c.Continent = 'asia';","SELECT car_makers.FullName, countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'asia'","select fullname, country from car_makers where id in ( select t1.maker from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.continent = 'asia' )","SELECT car_makers.FullName , car_makers.Country FROM car_makers JOIN countries JOIN continents WHERE continents.Continent = ""value"""
"SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  ""europe""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT cm.FullName, co.CountryName FROM car_makers cm JOIN countries co ON cm.Country = co.CountryId   JOIN continents c ON co.Continent = c.ContId WHERE c.Continent = 'europe';","SELECT car_makers.FullName, countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'europe'","select distinct t1.fullname, t1.country from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.continent = 'europe'","SELECT car_makers.FullName , car_makers.Country FROM car_makers JOIN countries JOIN continents WHERE continents.Continent = ""value"""
"SELECT T3.fullname,  T2.countryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId   =   T2.continent JOIN car_makers AS T3 ON T2.CountryId   =   T3.Country where T1.continent  =  ""america""",car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT cm.FullName, co.CountryName FROM car_makers cm JOIN countries co ON cm.Country = co.CountryId   JOIN continents c ON co.Continent = c.ContId WHERE c.Continent = 'america';","SELECT car_makers.FullName, countries.CountryName FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE continents.Continent = 'america'","select distinct t1.fullname, t1.country from car_makers as t1 join countries as t2 on t1.country = t2.countryid where t2.continent = 'America'","SELECT car_makers.FullName , car_makers.Country FROM car_makers JOIN countries JOIN continents WHERE continents.Continent = ""value"""
select count ( * )  from car_makers,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT COUNT(*) AS TotalCarMakers FROM car_makers;,SELECT COUNT(*) FROM car_makers,select count ( * ) from car_makers,SELECT COUNT(*) FROM car_makers
SELECT count ( distinct professional_id )  from professionals,dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
",SELECT COUNT(DISTINCT professional_id) FROM Professionals;,SELECT COUNT(DISTINCT professional_id) FROM Professionals;,select count ( distinct professional_id ) from professionals,SELECT COUNT(Professionals.professional_id) FROM Professionals
"SELECT T1.professional_id, T1.first_name ,  T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT p.professional_id, p.first_name, t.treatment_type_code FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.first_name, t.treatment_type_code;","SELECT Professionals.professional_id, Professionals.first_name, Treatments.treatment_type_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id;","select t1.professional_id, t2.first_name, t3.treatment_type_code from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id join treatments as t3 on t1.treatment_id = t3.treatment_id","SELECT Professionals.professional_id , Professionals.first_name , Treatments.treatment_type_code FROM Professionals JOIN Treatments"
"SELECT T1.professional_id, T1.first_name, T3.treatment_type_code FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id   =   T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code   =   T3.treatment_type_code order by T2.date_of_treatment desc limit 5",dog_kennels,"CREATE TABLE `Breeds` (
`breed_code` VARCHAR(10) PRIMARY KEY ,
`breed_name` VARCHAR(80)
);
CREATE TABLE `Charges` (
`charge_id` INTEGER PRIMARY KEY ,
`charge_type` VARCHAR(10),
`charge_amount` DECIMAL(19,4)
);
CREATE TABLE `Sizes` (
`size_code` VARCHAR(10) PRIMARY KEY ,
`size_description` VARCHAR(80)
);
CREATE TABLE `Treatment_Types` (
`treatment_type_code` VARCHAR(10) PRIMARY KEY ,
`treatment_type_description` VARCHAR(80)
);
CREATE TABLE `Owners` (
`owner_id` INTEGER PRIMARY KEY ,
`first_name` VARCHAR(50),
`last_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Dogs` (
`dog_id` INTEGER PRIMARY KEY ,
`owner_id` INTEGER NOT NULL,
`abandoned_yn` VARCHAR(1),
`breed_code` VARCHAR(10) NOT NULL,
`size_code` VARCHAR(10) NOT NULL,
`name` VARCHAR(50),
`age` VARCHAR(20),
`date_of_birth` DATETIME,
`gender` VARCHAR(1),
`weight` VARCHAR(20),
`date_arrived` DATETIME,
`date_adopted` DATETIME,
`date_departed` DATETIME,
FOREIGN KEY (`breed_code` ) REFERENCES `Breeds`(`breed_code` ),
FOREIGN KEY (`size_code` ) REFERENCES `Sizes`(`size_code` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` ),
FOREIGN KEY (`owner_id` ) REFERENCES `Owners`(`owner_id` )
);
CREATE TABLE `Professionals` (
`professional_id` INTEGER PRIMARY KEY ,
`role_code` VARCHAR(10) NOT NULL,
`first_name` VARCHAR(50),
`street` VARCHAR(50),
`city` VARCHAR(50),
`state` VARCHAR(20),
`zip_code` VARCHAR(20),
`last_name` VARCHAR(50),
`email_address` VARCHAR(50),
`home_phone` VARCHAR(20),
`cell_number` VARCHAR(20)
);
CREATE TABLE `Treatments` (
`treatment_id` INTEGER PRIMARY KEY ,
`dog_id` INTEGER NOT NULL,
`professional_id` INTEGER NOT NULL,
`treatment_type_code` VARCHAR(10) NOT NULL,
`date_of_treatment` DATETIME,
`cost_of_treatment` DECIMAL(19,4),
FOREIGN KEY (`treatment_type_code` ) REFERENCES `Treatment_Types`(`treatment_type_code` ),
FOREIGN KEY (`professional_id` ) REFERENCES `Professionals`(`professional_id` ),
FOREIGN KEY (`dog_id` ) REFERENCES `Dogs`(`dog_id` )
);
","SELECT p.professional_id, p.first_name, t.treatment_type_code FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.first_name, t.treatment_type_code ORDER BY t.date_of_treatment DESC LIMIT 5;","SELECT Professionals.professional_id, Professionals.first_name, Treatments.treatment_type_code FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id ORDER BY Treatments.date_of_treatment DESC LIMIT 5;","select t1.professional_id, t2.first_name, t3.treatment_type_code from treatments as t1 join professionals as t2 on t1.professional_id = t2.professional_id join treatments as t3 on t1.treatment_type_code = t3.treatment_type_code order by t1.date_of_treatment desc limit 5","SELECT Professionals.first_name , Professionals.professional_id , Treatments.treatment_type_code FROM Professionals JOIN Treatments ORDER BY Treatments.date_of_treatment DESC LIMIT 1"
SELECT name  FROM battle,battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT name FROM battle;,SELECT names FROM battle;,select name from battle,SELECT battle.name FROM battle
"SELECT name, bulgarian_commander FROM battle",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT name, bulgarian_commander FROM battle;","SELECT name, bulgarian_commander FROM battle;","select name, bulgarian_commander from battle","SELECT battle.name , battle.bulgarian_commander FROM battle"
SELECT name  FROM battle EXCEPT SELECT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel',battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT b.name FROM battle b LEFT JOIN ship s ON s.lost_in_battle = b.id AND s.location = 'English Channel' WHERE s.id IS NULL;,SELECT b.name  FROM battle b  WHERE NOT EXISTS (     SELECT 1      FROM ship s      WHERE s.lost_in_battle = b.id AND s.location = 'English Channel' );,"select name from battle except select t1.name from battle as t1 join ship as t2 on t1.id = t2.lost_in_battle where t2.location = ""English Channel""","SELECT battle.name FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.location = ""value"" )"
"SELECT name , RESULT FROM battle EXCEPT SELECT T1.name , T1.result  FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT b.name, b.result FROM battle b WHERE b.id NOT IN (   SELECT s.lost_in_battle   FROM ship s   WHERE s.location = 'English Channel' );","SELECT b.name, b.result FROM battle b WHERE NOT EXISTS (     SELECT 1     FROM ship s     WHERE s.lost_in_battle = b.id AND s.location = 'English Channel' );","select name, result from battle where id not in ( select lost_in_battle from ship where location = ""English Channel"" )","SELECT battle.name , battle.result FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.location = ""value"" )"
"SELECT name , RESULT , bulgarian_commander FROM battle EXCEPT SELECT T1.name , T1.result , T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
","SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE b.id NOT IN (   SELECT s.lost_in_battle   FROM ship s   WHERE s.location = 'English Channel' );","SELECT b.name, b.result, b.bulgarian_commander FROM battle b WHERE NOT EXISTS (     SELECT 1     FROM ship s     WHERE s.lost_in_battle = b.id AND s.location = 'English Channel' );","select name,result,bulgarian_commander from battle where id not in ( select lost_in_battle from ship where location = ""English Channel"" )","SELECT battle.name , battle.result , battle.bulgarian_commander FROM battle WHERE battle.id NOT IN ( SELECT ship.lost_in_battle FROM ship WHERE ship.location = ""value"" )"
"SELECT date FROM battle WHERE result  =  ""Bulgarian victory""",battle_death,"CREATE TABLE ""battle"" (
""id"" int,
""name"" text,
""date"" text,
""bulgarian_commander"" text,
""latin_commander"" text,
""result"" text,
primary key(""id"")
);
CREATE TABLE ""ship"" (
""lost_in_battle"" int,
""id"" int,
""name"" text,
""tonnage"" text,
""ship_type"" text,
""location"" text,
""disposition_of_ship"" text,
primary key(""id""),
foreign key (`lost_in_battle`) references `battle`(""id"") 
);
CREATE TABLE ""death"" (
""caused_by_ship_id"" int,
""id"" int,
""note"" text,
""killed"" int,
""injured"" int,
primary key(""id""),
foreign key (""caused_by_ship_id"") references `ship`(""id"") 
);
",SELECT date FROM battle WHERE result = 'Bulgarian victory';,SELECT date FROM battle WHERE result = 'Bulgarian victory';,select date from battle where result = 'Bulgarian victory',"SELECT battle.date FROM battle WHERE battle.result = ""value"""
SELECT count ( * )  FROM Likes,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM Likes;,SELECT COUNT(*) FROM Likes;,select count ( * ) from likes,SELECT COUNT(*) FROM Likes
SELECT count ( * )  FROM friend,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT COUNT(*) FROM Friend;,SELECT COUNT(*) FROM Friend;,select count ( * ) from friend,SELECT COUNT(*) FROM Friend
SELECT student_id FROM friend where friend_id  =  1689,network_1,"CREATE TABLE Highschooler(
	ID int primary key, 
	name text, 
	grade int);
CREATE TABLE Friend(
	student_id int, 
	friend_id int,
	primary key (student_id,friend_id),
	foreign key(student_id) references Highschooler(ID),
	foreign key (friend_id) references Highschooler(ID)
);
CREATE TABLE Likes(
	student_id int, 
	liked_id int,
	primary key (student_id, liked_id),
        foreign key (liked_id) references Highschooler(ID),
        foreign key (student_id) references Highschooler(ID)
);
",SELECT student_id  FROM Friend WHERE friend_id = 1689;,SELECT student_id FROM Friend WHERE friend_id = 1689;,select student_id from friend where friend_id = 1689,"SELECT Friend.student_id FROM Friend WHERE Friend.friend_id = ""value"""
SELECT * FROM Documents,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT Document_ID, Template_ID, Document_Name, Document_Description, Other_Details FROM Documents;",SELECT * FROM Documents,select document_name from documents,SELECT * FROM Documents
SELECT * FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID,cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
","SELECT d.Document_ID, d.Document_Name, d.Document_Description, d.Other_Details FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID;",SELECT Documents.* FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID,select document_name from documents where template_id in ( select template_id from documents ),SELECT * FROM Documents JOIN Templates
SELECT count ( * )  FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID   =   T2.Template_ID WHERE T2.Template_Type_Code   =   'PPT',cre_Doc_Template_Mgt,"CREATE TABLE Ref_Template_Types (
Template_Type_Code CHAR(15) NOT NULL,
Template_Type_Description VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_Type_Code)
);
CREATE TABLE Templates (
Template_ID INTEGER NOT NULL,
Version_Number INTEGER NOT NULL,
Template_Type_Code CHAR(15) NOT NULL,
Date_Effective_From DATETIME,
Date_Effective_To DATETIME,
Template_Details VARCHAR(255) NOT NULL,
PRIMARY KEY (Template_ID),
FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)
);
CREATE TABLE Documents (
Document_ID INTEGER NOT NULL,
Template_ID INTEGER,
Document_Name VARCHAR(255),
Document_Description VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Document_ID),
FOREIGN KEY (Template_ID) REFERENCES Templates (Template_ID)
);
CREATE TABLE Paragraphs (
Paragraph_ID INTEGER NOT NULL,
Document_ID INTEGER NOT NULL,
Paragraph_Text VARCHAR(255),
Other_Details VARCHAR(255),
PRIMARY KEY (Paragraph_ID),
FOREIGN KEY (Document_ID) REFERENCES Documents (Document_ID)
);
",SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'PPT';,SELECT COUNT(Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT',"select count ( * ) from documents as t1 join templates as t2 on t1.template_id = t2.template_id where t2.template_type_code = ""PPT""","SELECT COUNT(*) FROM Documents JOIN Templates WHERE Templates.Template_Type_Code = ""value"""
SELECT AVG ( Accelerate )  FROM cars_data,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT AVG(Accelerate) AS average_acceleration FROM cars_data;,SELECT AVG(Accelerate) FROM cars_data;,select avg ( accelerate ) from cars_data,SELECT AVG(cars_data.Accelerate) FROM cars_data
SELECT AVG ( Horsepower )  FROM cars_data,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
",SELECT AVG(Horsepower) AS average_horsepower FROM cars_data;,SELECT AVG(Horsepower) FROM cars_data;,select avg ( horsepower ) from cars_data,SELECT AVG(cars_data.Horsepower) FROM cars_data
SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1,car_1,"CREATE TABLE ""continents"" ( 
	""ContId"" INTEGER PRIMARY KEY, 
	""Continent"" TEXT 
);
CREATE TABLE ""countries"" (
	""CountryId"" INTEGER PRIMARY KEY, 
	""CountryName"" TEXT, 
	""Continent"" INTEGER,
	FOREIGN KEY (Continent) REFERENCES continents(ContId)
);
CREATE TABLE ""car_makers"" ( 
	""Id"" INTEGER PRIMARY KEY, 
	""Maker"" TEXT, 
	""FullName"" TEXT, 
	""Country"" TEXT,
	FOREIGN KEY (Country) REFERENCES countries(CountryId)
);
CREATE TABLE ""model_list"" ( 
	""ModelId"" INTEGER PRIMARY KEY, 
	""Maker"" INTEGER, 
	""Model"" TEXT UNIQUE,
	FOREIGN KEY (Maker) REFERENCES car_makers (Id)

);
CREATE TABLE ""car_names"" ( 
	""MakeId"" INTEGER PRIMARY KEY, 
	""Model"" TEXT, 
	""Make"" TEXT,
	FOREIGN KEY (Model) REFERENCES model_list (Model)
);
CREATE TABLE ""cars_data"" (
	""Id"" INTEGER PRIMARY KEY, 
	""MPG"" TEXT, 
	""Cylinders"" INTEGER, 
	""Edispl"" REAL, 
	""Horsepower"" TEXT, 
	""Weight"" INTEGER, 
	""Accelerate"" REAL, 
	""Year"" INTEGER,
	FOREIGN KEY (Id) REFERENCES car_names (MakeId)
);
","SELECT cn.Model, cd.Horsepower FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;",SELECT model_list.Model  FROM cars_data  JOIN car_names ON cars_data.Id = car_names.MakeId  JOIN model_list ON car_names.Model = model_list.Model  WHERE cars_data.Cylinders = 4  ORDER BY cars_data.Horsepower DESC  LIMIT 1;,select t1.model from car_names as t1 join cars_data as t2 on t1.make = t2.id where t2.cylinders = 4 order by horsepower desc limit 1,"SELECT car_names.Model FROM car_names JOIN cars_data WHERE cars_data.Cylinders = ""value"" ORDER BY cars_data.Horsepower DESC LIMIT 1"
"SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT DISTINCT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode IN (   SELECT Code    FROM country   WHERE IndepYear < 1930 );,SELECT DISTINCT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = 'T' AND country.IndepYear < 1930,select distinct language from countrylanguage where countrycode < 1930,"SELECT countrylanguage.Language FROM countrylanguage JOIN country WHERE country.IndepYear < ""value"""
"SELECT count ( DISTINCT T2.Language )  FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code   =   T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial   =   ""T""",world_1,"CREATE TABLE `city` (
  `ID` integer NOT NULL PRIMARY KEY AUTOINCREMENT
,  `Name` char(35) NOT NULL DEFAULT ''
,  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `District` char(20) NOT NULL DEFAULT ''
,  `Population` integer NOT NULL DEFAULT '0'
,  CONSTRAINT `city_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE `country` (
  `Code` char(3) NOT NULL DEFAULT ''
,  `Name` char(52) NOT NULL DEFAULT ''
,  `Continent` text  NOT NULL DEFAULT 'Asia'
,  `Region` char(26) NOT NULL DEFAULT ''
,  `SurfaceArea` float(10,2) NOT NULL DEFAULT '0.00'
,  `IndepYear` integer DEFAULT NULL
,  `Population` integer NOT NULL DEFAULT '0'
,  `LifeExpectancy` float(3,1) DEFAULT NULL
,  `GNP` float(10,2) DEFAULT NULL
,  `GNPOld` float(10,2) DEFAULT NULL
,  `LocalName` char(45) NOT NULL DEFAULT ''
,  `GovernmentForm` char(45) NOT NULL DEFAULT ''
,  `HeadOfState` char(60) DEFAULT NULL
,  `Capital` integer DEFAULT NULL
,  `Code2` char(2) NOT NULL DEFAULT ''
,  PRIMARY KEY (`Code`)
);
CREATE TABLE `countrylanguage` (
  `CountryCode` char(3) NOT NULL DEFAULT ''
,  `Language` char(30) NOT NULL DEFAULT ''
,  `IsOfficial` text  NOT NULL DEFAULT 'F'
,  `Percentage` float(4,1) NOT NULL DEFAULT '0.0'
,  PRIMARY KEY (`CountryCode`,`Language`)
,  CONSTRAINT `countryLanguage_ibfk_1` FOREIGN KEY (`CountryCode`) REFERENCES `country` (`Code`)
);
CREATE INDEX ""idx_countrylanguage_CountryCode"" ON ""countrylanguage"" (`CountryCode`);
CREATE INDEX ""idx_city_CountryCode"" ON ""city"" (`CountryCode`);
",SELECT COUNT(DISTINCT Language) AS total_official_languages FROM countrylanguage  WHERE IsOfficial = 'T'    AND CountryCode IN (     SELECT Code      FROM country     WHERE IndepYear < 1930   );,SELECT COUNT(DISTINCT countrylanguage.Language) FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE countrylanguage.IsOfficial = 'T' AND country.IndepYear < 1930,select count ( distinct language ) from countrylanguage where countrycode in ( select t2.countrycode from country as t1 join countrylanguage as t2 on t1.code = t2.countrycode where t1.indepyear < 1930 ),"SELECT COUNT(countrylanguage.Language) FROM countrylanguage JOIN country WHERE country.IndepYear < ""value"""
